<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lexokid的博客</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-02-27T15:18:32.444Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Lexokid</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>定位和居中</title>
    <link href="http://yoursite.com/2017/02/27/ife2017/%E5%AE%9A%E4%BD%8D%E5%92%8C%E5%B1%85%E4%B8%AD/"/>
    <id>http://yoursite.com/2017/02/27/ife2017/定位和居中/</id>
    <published>2017-02-27T15:10:00.000Z</published>
    <updated>2017-02-27T15:18:32.444Z</updated>
    
    <content type="html"><![CDATA[<h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><p><a href="https://github.com/Lexokid/ife/blob/master/1-4/index.html" target="_blank" rel="external">https://github.com/Lexokid/ife/blob/master/1-4/index.html</a></p>
<h2 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h2><p><a href="https://lexokid.github.io/ife/1-4/index.html" target="_blank" rel="external">https://lexokid.github.io/ife/1-4/index.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;源码&quot;&gt;&lt;a href=&quot;#源码&quot; class=&quot;headerlink&quot; title=&quot;源码&quot;&gt;&lt;/a&gt;源码&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/Lexokid/ife/blob/master/1-4/index.html&quot; ta
    
    </summary>
    
      <category term="ife" scheme="http://yoursite.com/categories/ife/"/>
    
    
      <category term="ife" scheme="http://yoursite.com/tags/ife/"/>
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>三栏式布局</title>
    <link href="http://yoursite.com/2017/02/27/ife2017/%E4%B8%89%E6%A0%8F%E5%BC%8F%E5%B8%83%E5%B1%80/"/>
    <id>http://yoursite.com/2017/02/27/ife2017/三栏式布局/</id>
    <published>2017-02-27T14:55:00.000Z</published>
    <updated>2017-02-27T14:55:12.551Z</updated>
    
    <content type="html"><![CDATA[<h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><p><a href="https://github.com/Lexokid/ife/blob/master/1-3/index.html" target="_blank" rel="external">https://github.com/Lexokid/ife/blob/master/1-3/index.html</a></p>
<h2 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h2><p><a href="https://lexokid.github.io/ife/1-3/index.html" target="_blank" rel="external">https://lexokid.github.io/ife/1-3/index.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;源码&quot;&gt;&lt;a href=&quot;#源码&quot; class=&quot;headerlink&quot; title=&quot;源码&quot;&gt;&lt;/a&gt;源码&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/Lexokid/ife/blob/master/1-3/index.html&quot; ta
    
    </summary>
    
      <category term="ife" scheme="http://yoursite.com/categories/ife/"/>
    
    
      <category term="ife" scheme="http://yoursite.com/tags/ife/"/>
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>ife2017</title>
    <link href="http://yoursite.com/2017/02/27/ife2017/ife2017/"/>
    <id>http://yoursite.com/2017/02/27/ife2017/ife2017/</id>
    <published>2017-02-27T14:46:00.000Z</published>
    <updated>2017-02-28T02:09:24.690Z</updated>
    
    <content type="html"><![CDATA[<h3 id="三栏式布局"><a href="#三栏式布局" class="headerlink" title="三栏式布局"></a><a href="https://lexokid.github.io/2017/02/27/ife2017/%E4%B8%89%E6%A0%8F%E5%BC%8F%E5%B8%83%E5%B1%80/" target="_blank" rel="external">三栏式布局</a></h3><h3 id="定位和居中"><a href="#定位和居中" class="headerlink" title="定位和居中"></a><a href="https://lexokid.github.io/2017/02/27/ife2017/%E5%AE%9A%E4%BD%8D%E5%92%8C%E5%B1%85%E4%B8%AD/" target="_blank" rel="external">定位和居中</a></h3>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;三栏式布局&quot;&gt;&lt;a href=&quot;#三栏式布局&quot; class=&quot;headerlink&quot; title=&quot;三栏式布局&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://lexokid.github.io/2017/02/27/ife2017/%E4%B8%89%E6%A0%8
    
    </summary>
    
      <category term="ife" scheme="http://yoursite.com/categories/ife/"/>
    
    
      <category term="ife" scheme="http://yoursite.com/tags/ife/"/>
    
  </entry>
  
  <entry>
    <title>git命令</title>
    <link href="http://yoursite.com/2017/02/27/git/git%E5%91%BD%E4%BB%A4/"/>
    <id>http://yoursite.com/2017/02/27/git/git命令/</id>
    <published>2017-02-27T13:50:00.000Z</published>
    <updated>2017-02-28T02:01:44.197Z</updated>
    
    <content type="html"><![CDATA[<p>参考博客</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;参考博客&lt;/p&gt;

    
    </summary>
    
      <category term="git" scheme="http://yoursite.com/categories/git/"/>
    
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>MySql零接触(8)</title>
    <link href="http://yoursite.com/2017/02/11/MySql/MySql%E9%9B%B6%E6%8E%A5%E8%A7%A6(8)/"/>
    <id>http://yoursite.com/2017/02/11/MySql/MySql零接触(8)/</id>
    <published>2017-02-11T07:24:54.000Z</published>
    <updated>2017-02-11T13:08:03.303Z</updated>
    
    <content type="html"><![CDATA[<h2 id="自定义函数（UDF）"><a href="#自定义函数（UDF）" class="headerlink" title="自定义函数（UDF）"></a>自定义函数（UDF）</h2><p>自定义函数：UDF是对MySQL扩展的途径，其用法与内置函数相同。<br>必要条件：返回值（必须），参数（非必须）<br>函数可以返回任意类型的值，同样可以接受这些类型的参数</p>
<p>CREATE FUNCTION function_name(参数)<br>RETURNS (返回值类型)<br>{STRING|INTEGER|REAL|DECIMAL}<br>routine_body (函数体，要有RETURN)</p>
<p>函数体：<br>1.函数体由合法的SQL语句构成<br>2.函数体可以是简单的SELECT或INSERT语句<br>3.函数体如果为复合结构则使用BEGIN…END语句<br>4.复合结构可以包含声明，循环，控制结构</p>
<p>删除函数：<br>DROP FUNCTION [IF EXISTS] function_name;</p>
<p>修改结束符：<br>DELEMITER 结束符<br>且当编写函数体内容的时候，需要使用 DELIMITER 关键字将结束符先修改为别的，否则编写语句的时候写到 ‘;’ 的时候会直接执行，导致函数编写失败</p>
<p>例：<br>如果我们要以 X年X月X日 X点:X分:X秒 显示时间<br>每次都需要<code>SELECT DATE_FORMAT(NOW(),&#39;%Y年%m月%d日 %H点:%i分:%s秒&#39;);</code><br>如果我们写成函数就可以直接调用了<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> f1() <span class="keyword">RETURNS</span> <span class="built_in">VARCHAR</span>(<span class="number">30</span>)</div><div class="line"><span class="keyword">RETURN</span> <span class="keyword">DATE_FORMAT</span>(<span class="keyword">NOW</span>(),<span class="string">'%Y年%m月%d日 %H点:%i分:%s秒'</span>);</div><div class="line"></div><div class="line"><span class="keyword">SELECT</span> f1();</div></pre></td></tr></table></figure></p>
<p>实现往表中插入记录时，返回插入的ID</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">DELIMITER $$    <span class="comment">--先修改结束符</span></div><div class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> ADD_USER(p_id <span class="built_in">SMALLINT</span>,username <span class="built_in">VARCHAR</span>(<span class="number">20</span>))</div><div class="line"><span class="keyword">RETURNS</span> <span class="built_in">INT</span> <span class="keyword">UNSIGNED</span></div><div class="line"><span class="keyword">BEGIN</span></div><div class="line"><span class="keyword">INSERT</span> <span class="keyword">user</span>(p_id,username) <span class="keyword">VALUES</span>(p_id,username);</div><div class="line">RETURN LAST_INSERT_ID();</div><div class="line"><span class="keyword">END</span></div><div class="line">$$</div></pre></td></tr></table></figure>
<hr>
<h2 id="存储过程"><a href="#存储过程" class="headerlink" title="存储过程"></a>存储过程</h2><p>存储过程是SQL语句和控制语句的预编译集合，以一个名称存储并作为一个单元处理（类似函数）。存储过程存储在数据库内，可以由应用程序调用执行，而且允许用户申明变量以及进行流程控制。存储过程可以接受输入类型的参数和输出类型的参数，并且可以存在多个返回值。只在第一次调用时进行语法分析和编译，以后的调用直接调用编译的结果，效率大大提高。</p>
<p>优点：<br>1、增强SQL语句的功能和灵活性：可以通过控制语句对流程进行控制和判断<br>2、实现较快的执行速度：客户端第一次调用存储过程时，MySQL引擎会对其进行语法分析、编译等操作，然后将编译结果存储到内存中，所以第一次和之前的效率一样，然而以后会直接调用内存中的编译结果，效率提高<br>3、减少网络流量：例如删除一个记录，我们原本要输入DELETE FROM xx WHERE …; 要传输的字符较多，如果写成存储过程，就只要调用存储过程的名字和相应参数就行，传输的字符数量较少，所以减少了网络流量。</p>
<p>存储过程语法结构分析：<br>CREATE<br>[DEFINER = {user|CURRENT_USER}]//定义时的用户，若是不写就默认为当前用户<br>PROCEDURE sp_name ([proc_parameter[,…]]) //可以带0到多个参数 sp_name存储过程的名字<br>[characteristic …] routine_body<br>其中参数<br>proc_parameter:<br>[IN|OUT|INOUT] param_name type<br>IN, 表示该参数的值必须在调用存储过程时指定<br>OUT, 表示该参数的值可以被存储过程改变，并且可以返回<br>INOUT, 表示该参数的值调用时指定，并且可以被改变和返回</p>
<p>特性：<br>COMMENT ‘string’<br>{CONTAINS SQL|NO SQL|READS SQL DATA|MODIFIES SQL DATA|SQL SECURITY{DEFINER|INVOKER}<br>COMMENT:注释<br>CONTAINS SQL:包含SQL语句, 但不包含读或写数据的语句<br>NO SQL:不包含SQL语句<br>READS SQL DATA:包含读数据的语句<br>MODIFIES SQL DATA:包含写数据的语句<br>SQL SECURITY {DEFINER|INVOKER}指明谁有权限来执行</p>
<p>过程体：<br>(1)过程体由合法的SQL语句构成；<br>(2)过程体可以是任意SQL语句;对表格进行增删，连接，但是不能创建数据表<br>(3)过程体如果为复合结构则使用BEGIN…END语句<br>(4)复合结构可以使用条件、循环等控制语句</p>
<p>修改存储过程：<br>不能修改过程体 要修改过程体需删除存储过程，重新创建<br>ALTER PROCEDURE sp_name [characteristic]<br>COMMENT ‘string’<br>|{CONTAINS SQL|NO SQL|READS SQL DATA|MODIFIES SQL DATA}<br>|SQL SECURITY{DEFINER|INVOKER}</p>
<p>删除存储过程：<br>DROP PROCEDURE [IF EXISTS] sp_name;<br>DROP PROCEDUER removeUserById;</p>
<p>1.用户变量：以”@”开始，形式为”@变量名”  eg.SET @i=7;<br>用户变量跟mysql客户端是绑定的，设置的变量，只对当前用户使用的客户端生效<br>2.全局变量：定义时，以如下两种形式出现，set GLOBAL 变量名  或者  set @@global.变量名<br>对所有客户端生效。只有具有super权限才可以设置全局变量<br>3.会话变量：只对连接的客户端有效。<br>4.局部变量：作用范围在begin到end语句块之间。在该语句块里设置的变量<br>declare语句专门用于定义局部变量。set语句是设置不同类型的变量，包括会话变量和全局变量</p>
<p>例：<br>创建一个输入id号即可删除记录，并返回删除的记录数和剩余的记录数的存储过程<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">DELIMITER $$</div><div class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> removeUserAndReturnInfos(<span class="keyword">IN</span> p_id <span class="built_in">INT</span> <span class="keyword">UNSIGNED</span>,<span class="keyword">OUT</span> userNums <span class="built_in">INT</span> <span class="keyword">UNSIGNED</span>, <span class="keyword">OUT</span> delNums <span class="built_in">SMALLINT</span> <span class="keyword">UNSIGNED</span>)</div><div class="line"><span class="keyword">BEGIN</span></div><div class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> <span class="keyword">users</span> <span class="keyword">WHERE</span> <span class="keyword">id</span> = p_id;</div><div class="line"><span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(<span class="keyword">id</span>) <span class="keyword">FROM</span> <span class="keyword">users</span> <span class="keyword">INTO</span> userNums;</div><div class="line"><span class="keyword">SELECT</span> <span class="keyword">ROW_COUNT</span>() <span class="keyword">INTO</span> delNums;</div><div class="line"><span class="comment">--INTO 含义就是将 SELECT 语句结果的表达式（id数量）返回到 userNums 变量中。   将SELECT结果的表达式放入到OUT变量，使用INTO</span></div><div class="line"><span class="keyword">END</span></div><div class="line">$$</div><div class="line">DELIMITER ;</div><div class="line"><span class="keyword">CALL</span> removeUserAndReturnInfos(<span class="number">20</span>, @a, @b);</div><div class="line">SELELCT  @a, @b;</div></pre></td></tr></table></figure></p>
<p>存储过程与自定义函数的区别：<br>1、存储过程实现的功能相对复杂，函数针对性较强<br>2、存储过程可以返回多个值，函数只能有一个返回值<br>3、存储过程一般独立执行，函数可以作为 sql 语句的组成部分来出现<br>另外，存储过程也比通过API接口调用程序要快。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;自定义函数（UDF）&quot;&gt;&lt;a href=&quot;#自定义函数（UDF）&quot; class=&quot;headerlink&quot; title=&quot;自定义函数（UDF）&quot;&gt;&lt;/a&gt;自定义函数（UDF）&lt;/h2&gt;&lt;p&gt;自定义函数：UDF是对MySQL扩展的途径，其用法与内置函数相同。&lt;br&gt;必
    
    </summary>
    
      <category term="MySql" scheme="http://yoursite.com/categories/MySql/"/>
    
    
      <category term="MySql" scheme="http://yoursite.com/tags/MySql/"/>
    
      <category term="语法" scheme="http://yoursite.com/tags/%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>MySql零接触(7)</title>
    <link href="http://yoursite.com/2017/02/10/MySql/MySql%E9%9B%B6%E6%8E%A5%E8%A7%A6(7)/"/>
    <id>http://yoursite.com/2017/02/10/MySql/MySql零接触(7)/</id>
    <published>2017-02-10T07:24:54.000Z</published>
    <updated>2017-02-11T13:09:07.120Z</updated>
    
    <content type="html"><![CDATA[<h2 id="字符函数"><a href="#字符函数" class="headerlink" title="字符函数"></a>字符函数</h2><p>CONCAT(char1,char2…) 将括号内的字符进行连接<br>CONCAT_WS(sep,char1,char2…) 将字符进行连接，字符间用sep分开<br>FORMAT(char_num,num) 将char_num进行格式化，保留num位小数，返回字符型结果<br>LOWER(char) 转化成小写字母<br>UPPER(char) 转化成大写字母<br>LEFT(char,num) 获取char中左侧num个字符<br>RIGHT(char,num) 获取char中右侧num个字符<br>LENGTH(char) 返回字符串长度（空格也算在长度内）<br>LTRIM(char) 删除前导空格<br>RTRIM(char) 删除后续空格<br>TRIM(char) 删除前导和后续空格<br>TRIM(LEADING char1 FROM char2) 删除char2中的前导char1<br>TRIM(TRAILING char2 FROM char2) 删除char2中的后续char1<br>TRIM(BOTH char1 FROM char2) 删除char2中的前导和后续char1<br>REPLACE(char1,char2,char3) 将char1中的char2替换成char3。可用空格替换。<br>SUBSTRING(char,num1,num2) 在char中，从num1开始，截取num2个字符串（字符串从1开始）。如果缺省num2，则自num1开始截取到末尾。如果num1&lt;0，则倒取。<br>[NOT] LIKE 模式匹配。%代表任意个字符，_代表任意一个字符。若要查找%或_，可写成LIKE ‘%1%%’ EXCAPE ‘1’; //1后面的不用进行解析</p>
<hr>
<h2 id="数值运算符与函数"><a href="#数值运算符与函数" class="headerlink" title="数值运算符与函数"></a>数值运算符与函数</h2><p>CEIL(num) num向上取整<br>FLOOR(num) num向下取整<br>DIV 整数除法，小于1取0<br>MOD 取余数，等价于%<br>POWER(num1,num2) 取num1的num2次方<br>ROUND(num1,num2) 对num1后的num2位小数进行四舍五入<br>TRUNCATE(num1,num2) 对num1后的num2位小数进行截断(不进行四舍五入)</p>
<hr>
<h2 id="比较运算符与函数"><a href="#比较运算符与函数" class="headerlink" title="比较运算符与函数"></a>比较运算符与函数</h2><p>1.[NOT] BETWEEN…AND…   [不]在范围之内<br>2.[NOT] IN()               [不]在列出值范围内<br>3.IS [NOT] NULL            [不]为空</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> <span class="number">15</span> BETWEEND <span class="number">1</span> <span class="keyword">AND</span> <span class="number">20</span>;   <span class="comment">--返回1，15在1到20范围内</span></div><div class="line"><span class="keyword">SELECT</span> <span class="number">15</span> <span class="keyword">NOT</span> BETWEEND <span class="number">1</span> <span class="keyword">AND</span> <span class="number">20</span>;    <span class="comment">--返回0，15不在1到20之间,条件不成立 返回值是0</span></div><div class="line"><span class="keyword">SELECT</span> <span class="number">10</span> <span class="keyword">IN</span>(<span class="number">5</span>,<span class="number">10</span>,<span class="number">15</span>);    <span class="comment">--返回1，值是否在给定的数值中,条件成立为1不成立为0</span></div><div class="line"><span class="keyword">SELECT</span> <span class="number">10</span> <span class="keyword">NOT</span> <span class="keyword">IN</span>(<span class="number">5</span>,<span class="number">10</span>,<span class="number">15</span>);    <span class="comment">--返回0，数值是否不在给定的数值中,条件成立为1不成立为0</span></div><div class="line"><span class="keyword">SELECT</span> <span class="literal">NULL</span> <span class="keyword">IS</span> <span class="literal">NULL</span>;    <span class="comment">--返回1，空是空 条件成立返回1,不成立返回0</span></div><div class="line"><span class="keyword">SELECT</span> <span class="string">''</span> <span class="keyword">IS</span> <span class="literal">NULL</span>;    <span class="comment">--返回0，除了NULL空其它都是非空 返回都是0</span></div><div class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> abc <span class="keyword">WHERE</span> <span class="keyword">id</span> <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>;    <span class="comment">--查找abc表中id不为NULL的列</span></div></pre></td></tr></table></figure>
<hr>
<h2 id="日期时间函数"><a href="#日期时间函数" class="headerlink" title="日期时间函数"></a>日期时间函数</h2><p>NOW() 当前时间 含日期时间<br>CURDATE() 当前日期 只有日期<br>CURTIME() 当前时间 只有时间<br>DATE_ADD() 日期变化（时间增减或减少）<br>DATEDIFF() 日期差值<br>DATE_FORMAT() 日期格式化<br>例：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> <span class="keyword">DATE_ADD</span>(<span class="string">'2014-3-12'</span>,<span class="built_in">INTERVAL</span> <span class="number">365</span> <span class="keyword">DAY</span>); <span class="comment">-- 2015-3-12 --在原有给定的时间上增加365天</span></div><div class="line"><span class="comment">--INTERVAL增加可以增加负值 单位 year,month,week,day</span></div><div class="line"></div><div class="line"><span class="keyword">SELECT</span> <span class="keyword">DATEDIFF</span>(<span class="string">'2014-1-1'</span>,<span class="string">'2015-1-1'</span>) <span class="comment">-- -365</span></div><div class="line"><span class="comment">--时间差值计算 单位为日 前面时间减去后面时间</span></div><div class="line"></div><div class="line"><span class="keyword">SELECT</span> <span class="keyword">DATE_FORMAT</span>(<span class="string">'2014-3-2'</span>,<span class="string">'%m/%d/%y'</span>); <span class="comment">-- 03/02/2014</span></div><div class="line"><span class="comment">--日期格式转换</span></div></pre></td></tr></table></figure></p>
<hr>
<h2 id="信息函数"><a href="#信息函数" class="headerlink" title="信息函数"></a>信息函数</h2><p>CONNECTION_ID(); 连接ID<br>SELECT DATABASE(); 当前数据库<br>LAST_INSERT_ID(); 最后插入记录的 ID 号（所查询的数据表必须有一个自动编号的列才能使用这个语句进行查询），如果是一次insert中插入的是多条记录，得到的是多条中的第一条（而不是最后一条！）<br>VERSION(); 版本的信息<br>USER(); 当前用户</p>
<hr>
<h2 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h2><p>聚合函数的共同特点：只有一个返回值<br>AVG() 平均值<br>COUNT() 计数<br>MAX() 最大值<br>MIN() 最小值<br>SUM() 求和</p>
<hr>
<h2 id="加密函数"><a href="#加密函数" class="headerlink" title="加密函数"></a>加密函数</h2><p>MD5(char) 信息摘要算法，针对web页面的数据库。<br>PASSWORD(char) 密码算法，针对修改当前用户和其他用户的密码。修改客户端密码SET PASSWORD=PASSWORD(‘密码’)。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;字符函数&quot;&gt;&lt;a href=&quot;#字符函数&quot; class=&quot;headerlink&quot; title=&quot;字符函数&quot;&gt;&lt;/a&gt;字符函数&lt;/h2&gt;&lt;p&gt;CONCAT(char1,char2…) 将括号内的字符进行连接&lt;br&gt;CONCAT_WS(sep,char1,char2…
    
    </summary>
    
      <category term="MySql" scheme="http://yoursite.com/categories/MySql/"/>
    
    
      <category term="MySql" scheme="http://yoursite.com/tags/MySql/"/>
    
      <category term="语法" scheme="http://yoursite.com/tags/%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>MySql零接触(6)</title>
    <link href="http://yoursite.com/2017/02/08/MySql/MySql%E9%9B%B6%E6%8E%A5%E8%A7%A6(6)/"/>
    <id>http://yoursite.com/2017/02/08/MySql/MySql零接触(6)/</id>
    <published>2017-02-08T07:24:54.000Z</published>
    <updated>2017-02-10T11:31:25.885Z</updated>
    
    <content type="html"><![CDATA[<h2 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h2><p>子查询是指出现在其他SQL语句内的SELECT子句<br>例如：<br><code>SELECT * FROM t1 WHERE column1 = (SELECT column2 FROM t2);</code><br>其中，SELECT * FROM t1 …称为Outer Query[外查询](或者Outer Statement)<br>SELECT column2 FROM t2 称为Sub Query[子查询]</p>
<p>子查询的条件：<br>    1.始终出现在圆括号内<br>    2.可以包含多个关键字或者条件；如 distinct、group by、order by、limit、函数等  （改为大写）<br>    3.子查询的外查询可以是:【SELECT,INSERT,UPDATE,SET或DO】。SQL语句的统称</p>
<p>子查询的返回值：<br>子查询可以返回标量、一行、一列或子查询</p>
<p>使用比较运算符的子查询：<br>=、&gt;、&lt;、&gt;=、&lt;=、&lt;&gt;、!=、&lt;=&gt;<br>语法结构：<br>operand comparision_operator subquery<br>当子查询返回多个结果时，可用ANY、SOME、ALL关键字来修饰子查询<br>WHERE语句中不能使用聚合函数，想使用，需要通过SELECT子查询</p>
<p>例：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> tdb_goods(</div><div class="line">    goods_id    <span class="built_in">SMALLINT</span> <span class="keyword">UNSIGNED</span> PRIMARY <span class="keyword">KEY</span> AUTO_INCREMENT,    <span class="comment">--商品id</span></div><div class="line">    goods_name  <span class="built_in">VARCHAR</span>(<span class="number">150</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,    <span class="comment">--商品名</span></div><div class="line">    goods_cate  <span class="built_in">VARCHAR</span>(<span class="number">40</span>)  <span class="keyword">NOT</span> <span class="literal">NULL</span>,    <span class="comment">--商品类别</span></div><div class="line">    brand_name  <span class="built_in">VARCHAR</span>(<span class="number">40</span>)  <span class="keyword">NOT</span> <span class="literal">NULL</span>,    <span class="comment">--品牌</span></div><div class="line">    goods_price <span class="built_in">DECIMAL</span>(<span class="number">15</span>,<span class="number">3</span>) <span class="keyword">UNSIGNED</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>,    <span class="comment">--商品价格</span></div><div class="line">    is_show     <span class="built_in">BOOLEAN</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">1</span>,</div><div class="line">    is_saleoff  <span class="built_in">BOOLEAN</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span></div><div class="line">);</div><div class="line">...    <span class="comment">--插入数据</span></div><div class="line"></div><div class="line"><span class="comment">--查找价格大于平均值的商品</span></div><div class="line"><span class="keyword">SELECT</span> goods_id,goods_name,goods_price <span class="keyword">FROM</span> tdb_goods <span class="keyword">WHERE</span> goods_price&gt;=(<span class="keyword">SELECT</span> <span class="keyword">ROUND</span>(<span class="keyword">AVG</span>(goods_price),<span class="number">2</span>) <span class="keyword">FROM</span> tdb_goods);</div></pre></td></tr></table></figure></p>
<hr>
<h2 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h2><p>table_reference {[INNER|CROSS] JOIN|{LEFT|RIGHT}[OUTER]JOIN} table_reference ON conditional_expr<br>连接类型：<br>INNER JOIN,内连接(在MySQL中，JOIN, CROSS JOIN 和 INNER JOIN 是等价的)<br>LEFT [OUTER] JOIN ,左外连接<br>RIGHT [OUTER] JOIN,右外连接<br>连接条件：<br>conditional_expr<br>例如：UPDATE 表1 INNER JOIN 表2 ON 列1 = 列2（两者属性完全相同）SET 列1 = 列3（设置值）。</p>
<h3 id="内连接"><a href="#内连接" class="headerlink" title="内连接"></a>内连接</h3><p>交集  仅显示A、B两表符合连接条件的记录。不符合连接条件的记录不显示。</p>
<h3 id="外连接："><a href="#外连接：" class="headerlink" title="外连接："></a>外连接：</h3><p>LEFT JOIN左外连接<br>RIGHT JOIN右外连接<br>左外连接：LEFT OUTER JOIN：显示左表的全部记录及右表符合连接条件的记录<br>右外连接：RIGHT OUTER JOIN：显示右表的全部记录及左表符合连接条件的记录<br>如果使用LEFT JOIN,左表中存在一条记录A,在右表中没有找到相应的记录,则在返回结果用会出现一条只有记录A中的相应字段内容,其他字段都为NULL在记录(RIGHT JOIN类似).<br>内连接比外链接用的多一些</p>
<p>以左外连接为例：<br>A LEFT JOIN B join_condition<br>1.数据表B的结果集依赖于数据表A(数据表A中的记录在B表中显示出来，否则B表中的记录不能显示)<br>2.数据表A的结果集根据左连接条件依赖所有数据表(B表除外)<br>3.左外连接条件决定如何检索数据表B(在没有指定WHERE条件的情况下)<br>4.如果数据表A的某条记录符合WHERE条件，但是在数据表B不存在符合连接条件的记录，将生成一个所有列为空的额外的B行</p>
<p>外连接冲突：<br>使用内连接查找的记录在连接数据表中不存在，并且在WHERE子句中尝试一下操作：column_name IS NULL<br>如果 column_name 被指定为 NOT NULL，MySQL将在找到符合连接着条件的记录后停止搜索更多的行（查找冲突）</p>
<h3 id="连接条件："><a href="#连接条件：" class="headerlink" title="连接条件："></a>连接条件：</h3><p>使用ON设定连接条件，也可以用WHERE代替<br>一般情况下使用 ON：设定连接条件  WHERE：进行结果集记录的过滤</p>
<h3 id="多表更新"><a href="#多表更新" class="headerlink" title="多表更新"></a>多表更新</h3><p>UPDATE table_reference {[INNER|CROSS] JOIN|{LEFT|RIGHT}[OUTER]JOIN} table_reference ON conditional_expr SET col_name1={expr1 | DEFAULT} [,col_name2={expr2 | DEFAULT}]… [WHERE where_condition]</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">-- 创建“商品分类”表</span></div><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> tdb_goods_cates(</div><div class="line">    cate_id <span class="built_in">SMALLINT</span> <span class="keyword">UNSIGNED</span> PRIMARY <span class="keyword">KEY</span> AUTO_INCREMENT,</div><div class="line">    cate_name <span class="built_in">VARCHAR</span>(<span class="number">40</span>)</div><div class="line">  );</div><div class="line"></div><div class="line"><span class="comment">-- 将分组结果写入到tdb_goods_cates数据表</span></div><div class="line"><span class="keyword">INSERT</span> tdb_goods_cates (cate_name) <span class="keyword">SELECT</span> goods_cate <span class="keyword">FROM</span> tdb_goods <span class="keyword">GROUP</span> <span class="keyword">BY</span> goods_cate;</div><div class="line"></div><div class="line"><span class="comment">-- 通过tdb_goods_cates数据表来更新tdb_goods表</span></div><div class="line"><span class="keyword">UPDATE</span> tdb_goods <span class="keyword">INNER</span> <span class="keyword">JOIN</span> tdb_goods_cates <span class="keyword">ON</span> goods_cate = cate_name <span class="keyword">SET</span> goods_cate = cate_id ;</div></pre></td></tr></table></figure>
<h3 id="多表更新之一步到位"><a href="#多表更新之一步到位" class="headerlink" title="多表更新之一步到位"></a>多表更新之一步到位</h3><p>1.CREATE SELECT<br>创建数据表同时将查询结果写入到数据表<br>CREATE TABLE [IF NOT EXISTS] tbl_name [(create_definition,…)] select_statement;</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> tdb_goods_brands</div><div class="line">(</div><div class="line">brand_id <span class="built_in">SMALLINT</span> <span class="keyword">UNSIGNED</span> PRIMARY <span class="keyword">KEY</span> AUTO_INCREMENT,</div><div class="line">brand_name <span class="built_in">VARCHAR</span>(<span class="number">40</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span></div><div class="line">)</div><div class="line"><span class="keyword">SELECT</span> brand_name <span class="keyword">FROM</span> tdb_goods <span class="keyword">GROUP</span> <span class="keyword">BY</span> brand_name;</div></pre></td></tr></table></figure>
<p>2.两个表建立连接 多表更新<br>根据新建的表tdb_goods_brands修改商品表tdb_goods，把商品表中的brand_name改成tdb_goods_brands中的brand_id</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">--两个表都有brand_name,要用 AS关键词给表起别名</span></div><div class="line"><span class="keyword">UPDATE</span> tdb_goods <span class="keyword">AS</span>  g  <span class="keyword">INNER</span> <span class="keyword">JOIN</span> tdb_goods_brands <span class="keyword">AS</span> b <span class="keyword">ON</span> g.brand_name = b.brand_name <span class="keyword">SET</span> g.brand_name = b.brand_id;</div></pre></td></tr></table></figure>
<p>3.但是商品表tdb_goods中仍为 goods_cate VARCHAR, brand_name VARCHAR。我们要把goods_cate 改为 cate_id,把brand_name 改为 brand_id,并把数据类型改为SAMLLINT。既修改列名称又修改数据类型用CHANGE关键字</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> tdb_goods</div><div class="line"><span class="keyword">CHANGE</span> goods_cate cate_id <span class="built_in">SMALLINT</span> <span class="keyword">UNSIGNED</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="keyword">CHANGE</span> brand_name brand_id <span class="built_in">SMALLINT</span> <span class="keyword">UNSIGNED</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>;</div></pre></td></tr></table></figure>
<p>4.不一定要用物理的外键即FOREIGN KEY 建立联系，也可以使用这种方法 称为事实外键。实际上物理外键使用得少</p>
<h3 id="多表连接"><a href="#多表连接" class="headerlink" title="多表连接"></a>多表连接</h3><p>表的连接可以说就是外键的一种逆向操作,外键将数据分开来存储,通过连接又将多张表联系在一起<br>例如：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> goods_id,goods_name,cate_name,brand_name,goods_price <span class="keyword">FROM</span> tdb_goods <span class="keyword">AS</span> g</div><div class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> tdb_goods_cates <span class="keyword">AS</span> c <span class="keyword">ON</span> g.cate_id=c.cate_id</div><div class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> tdb_goods_brands <span class="keyword">AS</span> b <span class="keyword">ON</span> g.brand_id=b.brand_id;</div></pre></td></tr></table></figure></p>
<h3 id="自身连接"><a href="#自身连接" class="headerlink" title="自身连接"></a>自身连接</h3><p>同一个数据表对其自身进行连接</p>
<p>无限级分类表设计：</p>
<p>1.无限分类：即在同一张表中既有父类，又有子类<br>通过在分类表中再增加多一个字段标识其属于哪一个父类的 ID 来实现<br>需通过对同一张数据表的自身连接来进行查询，需要对表标识别名</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> tdb_goods_types(</div><div class="line">    type_id   <span class="built_in">SMALLINT</span> <span class="keyword">UNSIGNED</span> PRIMARY <span class="keyword">KEY</span> AUTO_INCREMENT,</div><div class="line">    type_name <span class="built_in">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line">    parent_id <span class="built_in">SMALLINT</span> <span class="keyword">UNSIGNED</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span></div><div class="line">);</div><div class="line"></div><div class="line"><span class="keyword">INSERT</span> tdb_goods_types(type_name,parent_id) <span class="keyword">VALUES</span>(<span class="string">'家用电器'</span>,<span class="keyword">DEFAULT</span>);</div><div class="line"><span class="keyword">INSERT</span> tdb_goods_types(type_name,parent_id) <span class="keyword">VALUES</span>(<span class="string">'电脑、办公'</span>,<span class="keyword">DEFAULT</span>);</div><div class="line"><span class="keyword">INSERT</span> tdb_goods_types(type_name,parent_id) <span class="keyword">VALUES</span>(<span class="string">'大家电'</span>,<span class="number">1</span>);</div><div class="line"><span class="keyword">INSERT</span> tdb_goods_types(type_name,parent_id) <span class="keyword">VALUES</span>(<span class="string">'生活电器'</span>,<span class="number">1</span>);</div><div class="line"><span class="keyword">INSERT</span> tdb_goods_types(type_name,parent_id) <span class="keyword">VALUES</span>(<span class="string">'平板电视'</span>,<span class="number">3</span>);</div><div class="line"><span class="keyword">INSERT</span> tdb_goods_types(type_name,parent_id) <span class="keyword">VALUES</span>(<span class="string">'空调'</span>,<span class="number">3</span>);</div><div class="line"><span class="keyword">INSERT</span> tdb_goods_types(type_name,parent_id) <span class="keyword">VALUES</span>(<span class="string">'电风扇'</span>,<span class="number">4</span>);</div><div class="line"><span class="keyword">INSERT</span> tdb_goods_types(type_name,parent_id) <span class="keyword">VALUES</span>(<span class="string">'饮水机'</span>,<span class="number">4</span>);</div><div class="line"><span class="keyword">INSERT</span> tdb_goods_types(type_name,parent_id) <span class="keyword">VALUES</span>(<span class="string">'电脑整机'</span>,<span class="number">2</span>);</div><div class="line"><span class="keyword">INSERT</span> tdb_goods_types(type_name,parent_id) <span class="keyword">VALUES</span>(<span class="string">'电脑配件'</span>,<span class="number">2</span>);</div><div class="line"><span class="keyword">INSERT</span> tdb_goods_types(type_name,parent_id) <span class="keyword">VALUES</span>(<span class="string">'笔记本'</span>,<span class="number">9</span>);</div><div class="line"><span class="keyword">INSERT</span> tdb_goods_types(type_name,parent_id) <span class="keyword">VALUES</span>(<span class="string">'超级本'</span>,<span class="number">9</span>);</div><div class="line"><span class="keyword">INSERT</span> tdb_goods_types(type_name,parent_id) <span class="keyword">VALUES</span>(<span class="string">'游戏本'</span>,<span class="number">9</span>);</div><div class="line"><span class="keyword">INSERT</span> tdb_goods_types(type_name,parent_id) <span class="keyword">VALUES</span>(<span class="string">'CPU'</span>,<span class="number">10</span>);</div><div class="line"><span class="keyword">INSERT</span> tdb_goods_types(type_name,parent_id) <span class="keyword">VALUES</span>(<span class="string">'主机'</span>,<span class="number">10</span>);</div><div class="line"></div><div class="line"><span class="comment">--查找显示子类对应的一级父类：</span></div><div class="line"><span class="keyword">SELECT</span> p.type_id ,p.type_name,s.type_name <span class="keyword">FROM</span> tdb_goods_types <span class="keyword">AS</span> p <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> tdb_goods_types <span class="keyword">AS</span> s <span class="keyword">ON</span> p.parent_id=s.type_id;</div><div class="line"></div><div class="line"><span class="comment">--查找父类下的子类:</span></div><div class="line"><span class="keyword">SELECT</span> p.type_id ,p.type_name,s.type_name <span class="keyword">FROM</span> tdb_goods_types <span class="keyword">AS</span> p <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> tdb_goods_types <span class="keyword">AS</span> s <span class="keyword">ON</span> p.type_id=s.parent_id <span class="keyword">ORDER</span> <span class="keyword">BY</span> p.type_id;</div><div class="line"></div><div class="line"><span class="comment">--查找有多少子级:</span></div><div class="line"><span class="keyword">SELECT</span> <span class="keyword">max</span>(p.type_id) <span class="keyword">id</span>, p.type_name, <span class="keyword">count</span>(s.type_name) count_type <span class="keyword">FROM</span> tdb_goods_types p <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> tdb_goods_types s <span class="keyword">on</span> p.type_id=s.parent_id <span class="keyword">GROUP</span> <span class="keyword">BY</span> p.type_name <span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">max</span>(p.type_id);</div></pre></td></tr></table></figure>
<h3 id="多表删除"><a href="#多表删除" class="headerlink" title="多表删除"></a>多表删除</h3><p>DELETE tbl_name[.<em>][,tbl_name[.</em>]]… FROM table_references [WHERE where_condition]<br>当表中有相同数据时，可通过多表删除，自身连接来删除重复项。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">delete</span> t1 <span class="keyword">from</span> tdb_goods <span class="keyword">as</span> t1 <span class="keyword">inner</span> <span class="keyword">join</span> (<span class="keyword">select</span> <span class="keyword">max</span>(goods_id) <span class="keyword">as</span> goods_id <span class="keyword">from</span> tdb_goods <span class="keyword">group</span> <span class="keyword">by</span> goods_name <span class="keyword">having</span> <span class="keyword">count</span>(goods_id) &gt; <span class="number">1</span>) <span class="keyword">as</span> t2 <span class="keyword">on</span> t1.goods_id = t2.goods_id;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;子查询&quot;&gt;&lt;a href=&quot;#子查询&quot; class=&quot;headerlink&quot; title=&quot;子查询&quot;&gt;&lt;/a&gt;子查询&lt;/h2&gt;&lt;p&gt;子查询是指出现在其他SQL语句内的SELECT子句&lt;br&gt;例如：&lt;br&gt;&lt;code&gt;SELECT * FROM t1 WHERE c
    
    </summary>
    
      <category term="MySql" scheme="http://yoursite.com/categories/MySql/"/>
    
    
      <category term="MySql" scheme="http://yoursite.com/tags/MySql/"/>
    
      <category term="语法" scheme="http://yoursite.com/tags/%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>MySql零接触(5)</title>
    <link href="http://yoursite.com/2017/02/08/MySql/MySql%E9%9B%B6%E6%8E%A5%E8%A7%A6(5)/"/>
    <id>http://yoursite.com/2017/02/08/MySql/MySql零接触(5)/</id>
    <published>2017-02-08T06:24:54.000Z</published>
    <updated>2017-02-08T06:17:11.238Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数据的操作"><a href="#数据的操作" class="headerlink" title="数据的操作"></a>数据的操作</h2><p>若省略列名称则所有列要依次赋值<br>对于自动编号的字段，插入“NULL”或“DEFAULT”系统将自动依次递增编号<br>对于有默认值的字段，可以插入“DEFAULT”表示使用默认值<br>列值可传入数值、表达式或函数，如密码可以用md5()函数(PHP中的函数  求字符串哈希值函数)(如md5(‘123’))<br>可同时插入多条数据，多条数据括号间用逗号“,”隔开</p>
<h3 id="1-插入数据"><a href="#1-插入数据" class="headerlink" title="1.插入数据"></a>1.插入数据</h3><p>方法一：<strong>INSERT [INTO] tbl_name [(col_name)] {VALUES|VALUE}({expr|DEFAULT},…),(…),…;</strong><br>示例：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">INSERT</span> tb1(username,salary) <span class="keyword">VALUES</span>(<span class="string">'Tom'</span>,<span class="number">6666.66</span>),(<span class="string">'John'</span>,<span class="number">1234</span>);</div></pre></td></tr></table></figure></p>
<p>方法二：<strong>INSERT [INTO] tbl_name SET col_name={expr|DEFAULT},…;</strong><br>此方法可以使用子查询，一次只能插入一条数据<br>示例：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">INSERT</span> tb1 <span class="keyword">SET</span> username=<span class="string">'Ben'</span>,salary=<span class="string">'1234'</span>;</div></pre></td></tr></table></figure></p>
<p>方法三：<strong>INSERT [INTO] tbl_name [(col_name,…)] SELECT …;</strong><br>此方法可以将查询结果插入到指定数据表<br>示例：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">INSERT</span> <span class="keyword">test</span> <span class="keyword">SELECT</span> username <span class="keyword">FROM</span> tb1 <span class="keyword">WHERE</span> age &gt;=<span class="number">30</span>;</div><div class="line"><span class="comment">--新创建的test表只有uname字段，查找tb1表中age大于等于30的username的数据，插入test表</span></div></pre></td></tr></table></figure></p>
<h3 id="2-更新数据"><a href="#2-更新数据" class="headerlink" title="2.更新数据"></a>2.更新数据</h3><p><strong>UPDATE [LOW_PRIORITY] [IGNORE] table_reference SET col_name1={expr1|DEFAULT} [,col_name2={expr2|DEFAULT}]… [WHERE where_condition]</strong><br>当缺少WHERE时，所有记录都会更新<br>LOW_PRIORITY：UPDATE的执行被延迟了，直到没有其它的客户端从表中读取为止<br>IGNORE：即使在更新过程中出现错误，更新语句也不会中断<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">UPDATE</span> tb1 <span class="keyword">SET</span> salary = <span class="number">1000</span>, age = age + <span class="number">5</span>;</div><div class="line"><span class="keyword">UPDATE</span> tb1 <span class="keyword">SET</span> salary = salary + <span class="number">1000</span> <span class="keyword">WHERE</span> age &gt;= <span class="number">20</span>;</div></pre></td></tr></table></figure></p>
<h3 id="3-删除数据"><a href="#3-删除数据" class="headerlink" title="3.删除数据"></a>3.删除数据</h3><p>若不添加WHERE则删除全部记录<br>删除后再插入，插入的记录中设置为AUTO_INCREMENT(自动编号)列将从最大值往上加，而是基于原有记录最大编号继续增加<br><strong>DELETE FROM tbl_name [WHERE where_condition];</strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> tb1 <span class="keyword">WHERE</span> username = <span class="string">'Tom'</span>;</div></pre></td></tr></table></figure></p>
<hr>
<h2 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h2><h3 id="1-查找数据"><a href="#1-查找数据" class="headerlink" title="1.查找数据"></a>1.查找数据</h3><p><strong>SELECT select_expr [,select_expr2…] 只查找某一个函数或表达式<br>[<br>FROM table_references 查询表名<br>[WHERE where_conditon] 查询条件<br>[GROUP BY {col_name|position} [ASC|DESC],…] 按某个字段进行分组，相同的只显示第一个<br>[HAVING where_conditon] 分组时，给出显示条件<br>[ORDER BY {col_name|expr|position} [ASC(升序，默认)|DESC(降序)],…] 排序<br>[LIMIT {[offset,]row_count|row_count OFFSET offset}] 限制返回数量<br>]</strong><br>每一个表达式表示想要的一列，必须有至少一个<br>多个列之间以英文逗号分隔，输入列的顺序影响到结果列的顺序<br>可通过tal_name.col_name 来指明是tal_name的col_name列<br>星号(*)表示所有列，tbl_name.*可以表示命名表的所有列<br>查询表达式可以使用[AS] alias_name为其赋予别名，(主要用于不同表的同名列)别名影响到结果<br>别名可用于GROUP BY，ORDER BY或HAVING子句</p>
<p>示例：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> <span class="keyword">NOW</span>();    <span class="comment">--当前时间</span></div><div class="line"><span class="keyword">SELECT</span> username <span class="keyword">AS</span> uname, age <span class="keyword">FROM</span> tb1;    <span class="comment">--从tb1中查找username(以uname别名显示)和age</span></div><div class="line"><span class="keyword">SELECT</span> age <span class="keyword">FROM</span> tb1 <span class="keyword">GROUP</span> <span class="keyword">BY</span> age <span class="keyword">HAVING</span> <span class="keyword">COUNT</span>(salary)&gt;<span class="number">2</span>;    <span class="comment">--以age分组，显示salary的个数多于2个的age分组</span></div><div class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> tb1 <span class="keyword">ORDER</span> <span class="keyword">BY</span> age, salary <span class="keyword">DESC</span>;    <span class="comment">--先以age升序排列，在以salary降序排列</span></div><div class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> tb1 <span class="keyword">ORDER</span> <span class="keyword">BY</span> salary <span class="keyword">LIMIT</span> <span class="number">2</span>,<span class="number">3</span>;    <span class="comment">--从第2条开始(从0开始)，返回3条信息</span></div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;数据的操作&quot;&gt;&lt;a href=&quot;#数据的操作&quot; class=&quot;headerlink&quot; title=&quot;数据的操作&quot;&gt;&lt;/a&gt;数据的操作&lt;/h2&gt;&lt;p&gt;若省略列名称则所有列要依次赋值&lt;br&gt;对于自动编号的字段，插入“NULL”或“DEFAULT”系统将自动依次递增编号
    
    </summary>
    
      <category term="MySql" scheme="http://yoursite.com/categories/MySql/"/>
    
    
      <category term="MySql" scheme="http://yoursite.com/tags/MySql/"/>
    
      <category term="语法" scheme="http://yoursite.com/tags/%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>MySql零接触(4)</title>
    <link href="http://yoursite.com/2017/02/06/MySql/MySql%E9%9B%B6%E6%8E%A5%E8%A7%A6(4)/"/>
    <id>http://yoursite.com/2017/02/06/MySql/MySql零接触(4)/</id>
    <published>2017-02-06T11:24:54.000Z</published>
    <updated>2017-02-06T11:06:27.182Z</updated>
    
    <content type="html"><![CDATA[<h2 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h2><ul>
<li>约束分为表级约束和列级约束</li>
<li>约束保证数据的完整性和一致性</li>
<li>约束类型包括：<br>  NOT NULL(非空约束）<br>  PRIMARY KEY（主键约束）<br>  UNIQUE(唯一约束)<br>  DEFAULT(默认约束)<br>  FOREIGN KEY(外键约束)</li>
</ul>
<h3 id="表级约束与列级约束"><a href="#表级约束与列级约束" class="headerlink" title="表级约束与列级约束"></a>表级约束与列级约束</h3><ul>
<li>对于一个列所创建的约束，称之为列级约束，而对于两个或两个以上的列所创建的约束，我们称之为表级约束</li>
<li>列级约束在使用的时候，既可以在列定义的时候声明，也可以在列定义以后声明</li>
<li>表级的约束只能在列定义以后来声明</li>
<li>在实际开发中，用列级约束比较多，表级约束很少用，除此之外，在所有的约束中，并不是说每种约束都存在着表级或列级约束，其中，NOT NULL 非空约束，DEFAULT约束这两种约束就不存在表级约束，它们只有列级约束，而对于其他的三种，像主键，唯一，外键，它们都可以存在表级和列级约束。</li>
</ul>
<hr>
<h2 id="添加-修改约束"><a href="#添加-修改约束" class="headerlink" title="添加\修改约束"></a>添加\修改约束</h2><p><strong>主键约束</strong></p>
<ul>
<li>每张数据表只能存在一个主键</li>
<li>主键保证数据的唯一性</li>
<li>主键自动为NOT NULL</li>
</ul>
<h3 id="1-添加主键约束"><a href="#1-添加主键约束" class="headerlink" title="1.添加主键约束"></a>1.添加主键约束</h3><p><strong>ALTER TABLE tbl_name ADD [CONSTRAINT [symbol]] PRIMARY KEY [index_type] (index_col_name,…);</strong><br>示例：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> tb1 <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> pk_tb1_username PRIMARY <span class="keyword">KEY</span> (username);</div></pre></td></tr></table></figure></p>
<h3 id="2-删除主键约束"><a href="#2-删除主键约束" class="headerlink" title="2.删除主键约束"></a>2.删除主键约束</h3><p><strong>ALTER TABLE tbl_name DROP PRIMARY KEY;</strong></p>
<hr>
<p><strong>唯一约束</strong></p>
<ul>
<li>唯一约束可以保证记录的唯一性</li>
<li>唯一约束的字段可以为空值</li>
<li>每张数据表可以存在多个唯一约束</li>
</ul>
<h3 id="3-添加唯一约束"><a href="#3-添加唯一约束" class="headerlink" title="3.添加唯一约束"></a>3.添加唯一约束</h3><p><strong>ALTER TABLE tbl_name ADD [CONSTRAINT [symbol]] UNIQUE [INDEX|KEY] [index_name] [index_type] (index_col_name,…);</strong><br>示例：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> tb1 <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> uq_tb1_age <span class="keyword">UNIQUE</span> (username);</div></pre></td></tr></table></figure></p>
<h3 id="4-删除唯一约束"><a href="#4-删除唯一约束" class="headerlink" title="4.删除唯一约束"></a>4.删除唯一约束</h3><p><strong>ALTER TABLE tbl_name DROP {INDEX|KEY} index_name;</strong><br>示例：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> tb1 <span class="keyword">DROP</span> uq_tb1_age;</div></pre></td></tr></table></figure></p>
<hr>
<p><strong>外键约束</strong><br>保持数据一致性，完整性<br>实现数据表一对一或一对多关系<br><strong>外键约束的要求：</strong><br>1.父表和子表必须使用相同的存储引擎，而且禁止使用临时表<br>2.数据表的存储引擎只能为InnoDB<br>3.外键列和参照列必须具有相似的数据类型。其中数字的长度或是否有符号位必须相同，而字符的长度则可以不同<br>4.外键列和参照列必须创建索引。如果外键列不存在索引的话，mysql将自动创建索引</p>
<p><strong>外键约束的参照操作</strong></p>
<ol>
<li>CASCADE 需要在两张表中插入记录，必须先在父表中插入记录再在子表中插入记录<br>因为子表参照的是父表中的信息，若父表中没有则无法参照<br>2、SET NULL：从父表删除或更新行，并设置子表中的外键列为NULL。如果使用该选项，必须保证子列表没有指定NOT NULL。<br>3、RESTRICT：拒绝对父表的删除或更新操作。<br>4、NO ACTION：标准SQL的关键字，在MySQL中与RESTRICT相同。</li>
</ol>
<p>FOREIGN KEY （子表列名） REFERENCES FROM 父表名（父表列名）[ON DELETE|UPDATE CASCADE|SET NULL|RESTRICT|NO ACTION];</p>
<p>在实际开发中，存储引擎不为INNODB，无法使用FOREIGN KEY，普遍使用逻辑方法。</p>
<h3 id="5-添加外键约束"><a href="#5-添加外键约束" class="headerlink" title="5.添加外键约束"></a>5.添加外键约束</h3><p><strong>ALTER TABLE tbl_name ADD [CONSTRAINT [symbol]] FOREIGN KEY [index_name] (index_col_name,…) REFERENCES tbl2_name (col_name);</strong><br>示例：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> tb1 <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> fk_username FOREIGN <span class="keyword">KEY</span> (username) <span class="keyword">REFERENCES</span> tb2 (username);</div></pre></td></tr></table></figure></p>
<h3 id="6-删除外键约束"><a href="#6-删除外键约束" class="headerlink" title="6.删除外键约束"></a>6.删除外键约束</h3><p><strong>ALTER TABLE tbl_name DROP FOREIGN KEY fk_symbol;</strong><br>示例：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> tb1 <span class="keyword">DROP</span> FOREIGN <span class="keyword">KEY</span> fk_username;</div></pre></td></tr></table></figure></p>
<hr>
<p><strong>默认约束</strong></p>
<ul>
<li>默认值</li>
<li>当插入数据时，如果没有明确为字段赋值，则自动赋予默认值</li>
</ul>
<h3 id="7-添加-删除默认约束"><a href="#7-添加-删除默认约束" class="headerlink" title="7.添加/删除默认约束"></a>7.添加/删除默认约束</h3><p><strong>ALTER TABLE tbl_name ALTER [COLUMN] col_name {SET DEFAULT literal | DROP DEFAULT};</strong><br>示例：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> tb1 <span class="keyword">ALTER</span> salary <span class="keyword">SET</span> <span class="keyword">DEFAULT</span> <span class="number">2000</span>;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;约束&quot;&gt;&lt;a href=&quot;#约束&quot; class=&quot;headerlink&quot; title=&quot;约束&quot;&gt;&lt;/a&gt;约束&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;约束分为表级约束和列级约束&lt;/li&gt;
&lt;li&gt;约束保证数据的完整性和一致性&lt;/li&gt;
&lt;li&gt;约束类型包括：&lt;br&gt;  NOT 
    
    </summary>
    
      <category term="MySql" scheme="http://yoursite.com/categories/MySql/"/>
    
    
      <category term="MySql" scheme="http://yoursite.com/tags/MySql/"/>
    
      <category term="语法" scheme="http://yoursite.com/tags/%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>MySql零接触(3)</title>
    <link href="http://yoursite.com/2017/02/06/MySql/MySql%E9%9B%B6%E6%8E%A5%E8%A7%A6(3)/"/>
    <id>http://yoursite.com/2017/02/06/MySql/MySql零接触(3)/</id>
    <published>2017-02-06T10:24:54.000Z</published>
    <updated>2017-02-08T14:31:00.242Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数据表操作"><a href="#数据表操作" class="headerlink" title="数据表操作"></a>数据表操作</h2><p>NULL，字段值可以为空<br>NOT NULL，字段值禁止为空<br>AUTO_INCREMENT，自动编号，必须与主键组合使用，默认情况，起始值为1，每次的增量为1</p>
<h3 id="1-创建数据表"><a href="#1-创建数据表" class="headerlink" title="1.创建数据表"></a>1.创建数据表</h3><p><strong>CREATE TABLE [IF NOT EXISTS] table_name(column_name(列名称) data_type(列类型)[NOT NULL|NULL],….);</strong><br>示例：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">create</span> <span class="keyword">TABLE</span> tb1(</div><div class="line">username <span class="built_in">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line">age TINYINT <span class="keyword">UNSIGNED</span>,   <span class="comment">--unsigned表示无符号位，即不能为负数</span></div><div class="line">salary <span class="built_in">FLOAT</span>(<span class="number">8</span>,<span class="number">2</span>), <span class="keyword">UNSIGNED</span>,    <span class="comment">--有效位数为8位，精度为2，即6位整数，2位小数</span></div><div class="line">);</div></pre></td></tr></table></figure></p>
<h3 id="2-添加单列"><a href="#2-添加单列" class="headerlink" title="2.添加单列"></a>2.添加单列</h3><p><strong>ALTER TABLE tbl_name ADD [COLUMN] col_name column_definitione [FIRST | AFTER col_name];</strong><br>示例：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> tb1 <span class="keyword">ADD</span> pwd <span class="built_in">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">AFTER</span> username;    <span class="comment">--没指定FIRST或者AFTER将位于最后</span></div></pre></td></tr></table></figure></p>
<h3 id="3-添加多列"><a href="#3-添加多列" class="headerlink" title="3.添加多列"></a>3.添加多列</h3><p><strong>ALTER TABLE tbl_name ADD [COLUMN] (col_name column_definition,…);</strong></p>
<h3 id="4-删除列"><a href="#4-删除列" class="headerlink" title="4.删除列"></a>4.删除列</h3><p><strong>ALTER TABLE tbl_name DROP col_name,…;</strong><br>示例：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> tb1 <span class="keyword">DROP</span> pwd, <span class="keyword">DROP</span> age;</div></pre></td></tr></table></figure></p>
<h3 id="5-查看数据表结构"><a href="#5-查看数据表结构" class="headerlink" title="5.查看数据表结构"></a>5.查看数据表结构</h3><p><strong>SHOW COLUMNS FROM table_name;</strong><br><strong>DESC table_name;</strong></p>
<h3 id="6-查看数据表列表"><a href="#6-查看数据表列表" class="headerlink" title="6.查看数据表列表"></a>6.查看数据表列表</h3><p><strong>SHOW TABLES [FROM db_name] [LIKE ‘pattern’|WHERE expr];</strong><br>示例：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SHOW</span> <span class="keyword">TABLES</span> <span class="keyword">FROM</span> mysql;    <span class="comment">--查看mysql数据库的所有表</span></div></pre></td></tr></table></figure></p>
<h3 id="7-查看数据库创建时的指令"><a href="#7-查看数据库创建时的指令" class="headerlink" title="7.查看数据库创建时的指令"></a>7.查看数据库创建时的指令</h3><p><strong>SHOW CREATE TABLE tb_name;</strong></p>
<hr>
<h2 id="字段的修改"><a href="#字段的修改" class="headerlink" title="字段的修改"></a>字段的修改</h2><h3 id="1-修改列定义"><a href="#1-修改列定义" class="headerlink" title="1.修改列定义"></a>1.修改列定义</h3><p><strong>ALTER TABLE tbl_name MODIFY [COLUMN] col_name column_definition [FIRST|AFTER col_name];</strong><br>示例：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> tb1 <span class="keyword">MODIFY</span> age <span class="built_in">SMALLINT</span> <span class="keyword">UNSIGNED</span> <span class="keyword">FIRST</span>;</div></pre></td></tr></table></figure></p>
<h3 id="2-修改列名称和定义"><a href="#2-修改列名称和定义" class="headerlink" title="2.修改列名称和定义"></a>2.修改列名称和定义</h3><p><strong>ALTER TABLE tbl_name CHANGE [COLUMN] old_col_name new_col_name column_definition [FIRST|AFTER col_name];</strong><br>示例：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> tb1 <span class="keyword">CHANGE</span> age user_age <span class="built_in">SMALLINT</span> <span class="keyword">UNSIGNED</span> <span class="keyword">FIRST</span>;</div></pre></td></tr></table></figure></p>
<h3 id="3-数据表更名"><a href="#3-数据表更名" class="headerlink" title="3.数据表更名"></a>3.数据表更名</h3><p>方法1：<strong>ALTER TABLE tbl_name RENAME [TO|AS] new_tbl_name;</strong><br>方法2：<strong>RENAME TABLE tbl_name TO new_tbl_name[,tbl_name2 TO new_tbl_name2]…;</strong><br>示例：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">RENAME</span> <span class="keyword">TABLE</span> tb1 <span class="keyword">TO</span> <span class="keyword">users</span>;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;数据表操作&quot;&gt;&lt;a href=&quot;#数据表操作&quot; class=&quot;headerlink&quot; title=&quot;数据表操作&quot;&gt;&lt;/a&gt;数据表操作&lt;/h2&gt;&lt;p&gt;NULL，字段值可以为空&lt;br&gt;NOT NULL，字段值禁止为空&lt;br&gt;AUTO_INCREMENT，自动编号，必须
    
    </summary>
    
      <category term="MySql" scheme="http://yoursite.com/categories/MySql/"/>
    
    
      <category term="MySql" scheme="http://yoursite.com/tags/MySql/"/>
    
      <category term="语法" scheme="http://yoursite.com/tags/%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>MySql零接触(2)</title>
    <link href="http://yoursite.com/2017/02/06/MySql/MySql%E9%9B%B6%E6%8E%A5%E8%A7%A6(2)/"/>
    <id>http://yoursite.com/2017/02/06/MySql/MySql零接触(2)/</id>
    <published>2017-02-06T09:24:54.000Z</published>
    <updated>2017-02-06T10:45:50.043Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>数据类型是指列、存储过程参数、表达式和局部变量的数据特征，它决定了数据的存储格式，代表了不同的信息类型</p>
<h3 id="整形"><a href="#整形" class="headerlink" title="整形"></a>整形</h3><table>
<thead>
<tr>
<th style="text-align:left">数据类型</th>
<th style="text-align:left">存储范围</th>
<th style="text-align:center">字节</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">TINYINT</td>
<td style="text-align:left">有符号：-128到127(-2<sup>7</sup>到2<sup>7</sup>-1) <br> 无符号：0到255(0到2<sup>8</sup>-1)</td>
<td style="text-align:center">1</td>
</tr>
<tr>
<td style="text-align:left">SMALLINT</td>
<td style="text-align:left">有符号：-32768到32767(-2<sup>15</sup>到2<sup>15</sup>-1) <br> 无符号：0到65535(0到2<sup>16</sup>-1)</td>
<td style="text-align:center">2</td>
</tr>
<tr>
<td style="text-align:left">MEDIUMINT</td>
<td style="text-align:left">有符号：-8388608到8388607(-2<sup>23</sup>到2<sup>23</sup>-1) <br> 无符号：0到16777215(0到2<sup>24</sup>-1)</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:left">INT</td>
<td style="text-align:left">有符号：-2147483648到2147483647(-2<sup>31</sup>到2<sup>31</sup>-1) <br> 无符号：0到3294967295(0到2<sup>32</sup>-1)</td>
<td style="text-align:center">4</td>
</tr>
<tr>
<td style="text-align:left">BIGINT</td>
<td style="text-align:left">有符号：-9223372036854775808到9223372036854775807(-2<sup>63</sup>到2<sup>63</sup>-1) <br> 无符号 ：0到18446744073709551615(0到2<sup>64</sup>-1)</td>
<td style="text-align:center">8</td>
</tr>
</tbody>
</table>
<h3 id="浮点型"><a href="#浮点型" class="headerlink" title="浮点型"></a>浮点型</h3><table>
<thead>
<tr>
<th style="text-align:left">数据类型</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">FLOAT[(M,D)]</td>
<td style="text-align:left">M是数字总位数，D是小数点后面的位数。如果M和D被省略，根据硬件允许的限制来保存值。单精度浮点数精确到大约7位小数</td>
</tr>
<tr>
<td style="text-align:left">DOUBLE[(M,D)]</td>
<td style="text-align:left">M是数字总位数，D是小数点后面的位数。</td>
</tr>
</tbody>
</table>
<h3 id="字符型"><a href="#字符型" class="headerlink" title="字符型"></a>字符型</h3><table>
<thead>
<tr>
<th style="text-align:left">列类型</th>
<th style="text-align:left">储存需求</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">CHAR(M)</td>
<td style="text-align:left">M个字节 0&lt;=M&lt;=255 定长 M是5就5个字节 abc会算成abc00;</td>
</tr>
<tr>
<td style="text-align:left">VARCHAR(M)</td>
<td style="text-align:left">L+1个字节 L&lt;=M,0&lt;=M&lt;=65535; 变长 abc就是abc;</td>
</tr>
<tr>
<td style="text-align:left">TINYTEXT</td>
<td style="text-align:left">L+1个字节，L&lt;2的8次方;</td>
</tr>
<tr>
<td style="text-align:left">TEXT</td>
<td style="text-align:left">L+2个字节，L&lt;2的16次方;</td>
</tr>
<tr>
<td style="text-align:left">MEDIUMTEXT</td>
<td style="text-align:left">L+3个字节，L&lt;2的24次方;</td>
</tr>
<tr>
<td style="text-align:left">LONGTEXT</td>
<td style="text-align:left">L+4个字节，L&lt;2的32次方;</td>
</tr>
<tr>
<td style="text-align:left">ENUM(‘value1’,’value2’,…)</td>
<td style="text-align:left">1或2字节，取决于枚举值的个数（最多65535个值）;</td>
</tr>
<tr>
<td style="text-align:left">SET(‘value1’,’value2’,…)</td>
<td style="text-align:left">1、2、3、4、8字节，取决于set成员个数（最多64个成员）;</td>
</tr>
</tbody>
</table>
<p>CHAR 定长:固定长度 即显示的字符没有达到指定长度的时候,显示字符后面自动加空格补齐长度<br>VARCHAR 变长:变化长度 存储的字符是什么,就显示什么,不会自动给空格补齐<br>举例:L+3个字节 其中L&lt;2的24次方 因为计算机是以2进制进行存储 1个字节=8byte 最大的数就是111111,也就是255 所以可以理解为这里的3个字节其实就是2的24次方<br>ENUM 枚举 例如性别 三种选项:男,女,保密<br>SET 集合类型 比如里面有存储有a,b,c 那么可以选择a,b,c,ab,bc,ac,abc</p>
<style>
table th:first-of-type {
    width: 120px;
}
table:nth-of-type(1) th:last-of-type {
    width: 120px;
}
table:nth-of-type(3) th:first-of-type {
    width: 240px;
}
</style>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;数据类型&quot;&gt;&lt;a href=&quot;#数据类型&quot; class=&quot;headerlink&quot; title=&quot;数据类型&quot;&gt;&lt;/a&gt;数据类型&lt;/h2&gt;&lt;p&gt;数据类型是指列、存储过程参数、表达式和局部变量的数据特征，它决定了数据的存储格式，代表了不同的信息类型&lt;/p&gt;
&lt;h3 id
    
    </summary>
    
      <category term="MySql" scheme="http://yoursite.com/categories/MySql/"/>
    
    
      <category term="MySql" scheme="http://yoursite.com/tags/MySql/"/>
    
      <category term="语法" scheme="http://yoursite.com/tags/%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>MySql零接触(1)</title>
    <link href="http://yoursite.com/2017/02/06/MySql/MySql%E9%9B%B6%E6%8E%A5%E8%A7%A6(1)/"/>
    <id>http://yoursite.com/2017/02/06/MySql/MySql零接触(1)/</id>
    <published>2017-02-06T08:56:54.000Z</published>
    <updated>2017-02-06T10:57:11.360Z</updated>
    
    <content type="html"><![CDATA[<p>最近学习了<strong><a href="http://www.imooc.com/learn/122" target="_blank" rel="external">与MySQL的零距离接触</a></strong>发现适合初学者，讲得不错，做些笔记方便自己学习</p>
<h2 id="MySQL登录"><a href="#MySQL登录" class="headerlink" title="MySQL登录"></a>MySQL登录</h2><p><strong>mysql [-u username] [-h host] [-p[password]] [-P port]</strong></p>
<table>
<thead>
<tr>
<th style="text-align:left">mysql参数</th>
<th style="text-align:center">参数-描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">-D，–database=name</td>
<td style="text-align:center">打开指定数据库</td>
</tr>
<tr>
<td style="text-align:left">-h, –host=name</td>
<td style="text-align:center">服务器名称（默认本地服务器127.0.0.1）</td>
</tr>
<tr>
<td style="text-align:left">-p，–password[=name]</td>
<td style="text-align:center">密码</td>
</tr>
<tr>
<td style="text-align:left">-P, –port=#</td>
<td style="text-align:center">端口号（默认3306）</td>
</tr>
<tr>
<td style="text-align:left">-u, –user=name</td>
<td style="text-align:center">用户名</td>
</tr>
<tr>
<td style="text-align:left">-V, –version</td>
<td style="text-align:center">输出版本信息并且退出</td>
</tr>
<tr>
<td style="text-align:left">–delimiter=name</td>
<td style="text-align:center">指定分隔符</td>
</tr>
<tr>
<td style="text-align:left">–prompt=name</td>
<td style="text-align:center">设置提示符</td>
</tr>
</tbody>
</table>
<p>示例：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mysql -uroot -proot -P3306 -h127.0.0.1</div><div class="line"><span class="comment">--表示超级用户名root,密码root，端口号3306（不输入P默认为3306），主机地址127.0.0.1（若使用本机作为主机，h默认127.0.0.1）</span></div></pre></td></tr></table></figure></p>
<h2 id="MySQL-语句的规范"><a href="#MySQL-语句的规范" class="headerlink" title="MySQL 语句的规范"></a>MySQL 语句的规范</h2><ol>
<li>关键字，函数名称大写</li>
<li>数据库名称，表的名称，字段名称小写</li>
<li>SQL语句以；结尾</li>
</ol>
<hr>
<h2 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h2><h3 id="1-创建数据库"><a href="#1-创建数据库" class="headerlink" title="1.创建数据库"></a>1.创建数据库</h3><p>创建数据库,并设置其编码方式(如果不设置编码方式,系统将按照默认方式设置编码方式)<br><strong>CREATE ｛DATABASE | SCHEMA｝ [IF NOT EXITSTS] db_name [DEFAULT] CHARACTER SET [=] charset_name;</strong><br>示例：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> db1 <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> gbk;</div></pre></td></tr></table></figure></p>
<h3 id="2-查看所有数据库"><a href="#2-查看所有数据库" class="headerlink" title="2.查看所有数据库"></a>2.查看所有数据库</h3><p><strong>SHOW {DATABASES | SCHEMAS};</strong></p>
<h3 id="3-查看数据库创建时的指令"><a href="#3-查看数据库创建时的指令" class="headerlink" title="3.查看数据库创建时的指令"></a>3.查看数据库创建时的指令</h3><p><strong>SHOW CREATE DATABASE db_name;</strong></p>
<h3 id="4-修改数据库编码方式"><a href="#4-修改数据库编码方式" class="headerlink" title="4.修改数据库编码方式"></a>4.修改数据库编码方式</h3><p><strong>ALTER {DATABASE | SCHEMA} db_name [DEFAULT] CHARACTER SET [=] charset_name;</strong><br>示例：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">ALTER</span> <span class="keyword">DATABASE</span> db1 <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> utf8;</div></pre></td></tr></table></figure></p>
<h3 id="5-删除数据库"><a href="#5-删除数据库" class="headerlink" title="5.删除数据库"></a>5.删除数据库</h3><p><strong>DROP {DATABASE | SCHEMA} [IF EXISTS] db_name;</strong><br>示例：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">DROP</span> <span class="keyword">DATABASE</span> db1;</div></pre></td></tr></table></figure></p>
<hr>
<h2 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h2><h3 id="1-显示当前服务版本号"><a href="#1-显示当前服务版本号" class="headerlink" title="1.显示当前服务版本号"></a>1.显示当前服务版本号</h3><p><strong>SELECT VERSION();</strong></p>
<h3 id="2-显示当前用户"><a href="#2-显示当前用户" class="headerlink" title="2.显示当前用户"></a>2.显示当前用户</h3><p><strong>SELECT USER();</strong></p>
<h3 id="3-显示当前日期时间"><a href="#3-显示当前日期时间" class="headerlink" title="3.显示当前日期时间"></a>3.显示当前日期时间</h3><p><strong>SELECT NOW();</strong></p>
<h3 id="4-显示当前所在数据库"><a href="#4-显示当前所在数据库" class="headerlink" title="4.显示当前所在数据库"></a>4.显示当前所在数据库</h3><p><strong>SELECT DATABASE();</strong></p>
<hr>
<h2 id="MySql的配置选项"><a href="#MySql的配置选项" class="headerlink" title="MySql的配置选项"></a>MySql的配置选项</h2><h3 id="1-修改编码"><a href="#1-修改编码" class="headerlink" title="1.修改编码"></a>1.修改编码</h3><p>打开my.ini添加\修改<br>[mysql]<br>default-character-set=utf8</p>
<p>[mysqld]<br>character-set-server=utf8</p>
<h3 id="2-修改数据表的默认存储引擎"><a href="#2-修改数据表的默认存储引擎" class="headerlink" title="2.修改数据表的默认存储引擎"></a>2.修改数据表的默认存储引擎</h3><p>打开my.ini修改</p>
<p>default-storage-engine=INNODB</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近学习了&lt;strong&gt;&lt;a href=&quot;http://www.imooc.com/learn/122&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;与MySQL的零距离接触&lt;/a&gt;&lt;/strong&gt;发现适合初学者，讲得不错，做些笔记方便自己学习&lt;/p&gt;
    
    </summary>
    
      <category term="MySql" scheme="http://yoursite.com/categories/MySql/"/>
    
    
      <category term="MySql" scheme="http://yoursite.com/tags/MySql/"/>
    
      <category term="语法" scheme="http://yoursite.com/tags/%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>正则表达式</title>
    <link href="http://yoursite.com/2017/01/28/%E6%AD%A3%E5%88%99/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>http://yoursite.com/2017/01/28/正则/正则表达式/</id>
    <published>2017-01-28T07:17:12.000Z</published>
    <updated>2017-02-06T10:26:50.904Z</updated>
    
    <content type="html"><![CDATA[<p>本文以javascript来演示正则表达式</p>
<h2 id="REGEXP对象"><a href="#REGEXP对象" class="headerlink" title="REGEXP对象"></a>REGEXP对象</h2><p>在javascript中通过对象regexp来使用正则表达式，regexp有两种方法实例化</p>
<h3 id="字面量"><a href="#字面量" class="headerlink" title="字面量"></a>字面量</h3><p>/表达式/修饰符<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> reg = <span class="regexp">/[A-Za-z]/g</span>;</div></pre></td></tr></table></figure></p>
<h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><p>RegExp(‘表达式’,修饰符);<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">'[A-Za-z]'</span>,g);</div></pre></td></tr></table></figure></p>
<p>修饰符：<br>g:全文搜索<br>i:忽略大小写<br>m:多行搜索</p>
<hr>
<h2 id="字符类型"><a href="#字符类型" class="headerlink" title="字符类型"></a>字符类型</h2><h3 id="普通字符"><a href="#普通字符" class="headerlink" title="普通字符"></a>普通字符</h3><p>由所有那些未显式指定为元字符的打印和非打印字符组成。这包括所有的大写和小写字母字符，所有数字，所有标点符号以及一些符号。 例如：abc、123</p>
<h3 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h3><p>在正则表达式中有特殊意义的非字母字符 例如：\d匹配一个数字字符，而非\d<br>在正则表达式中具体特殊含义的字符：<strong>* + ? $ ^ . \ () {} []</strong></p>
<hr>
<h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><h3 id="字符类"><a href="#字符类" class="headerlink" title="字符类"></a>字符类</h3><p>使用元字符[]和字符来构建的字符类，是泛指，而不是特定的某个字符，表达式可以匹配这类的字符<br>例如:<code>[abc]</code>用来匹配<strong>a或b或c</strong>，<code>[^abc]</code>用来匹配<strong>不是a或b或c</strong>的内容</p>
<h3 id="范围类"><a href="#范围类" class="headerlink" title="范围类"></a>范围类</h3><p>使用-来连接两个字符表示范围类，例如：<code>[a-zA-Z]</code>匹配<strong>a到z或A到Z</strong>之间的任意字符包涵a,z,A,Z</p>
<h3 id="预定义类"><a href="#预定义类" class="headerlink" title="预定义类"></a>预定义类</h3><p>正则表达式提供预定义类来匹配常见的字符类<br>预定义类有：.,\d,\D,\s,\S,\w,\W等，见下<a href="#正则表达式全符号解释">表</a><br>例如：<code>ab\d.</code>匹配一个<strong>ab+数字+任意字符</strong>组成的字符串，等同于<code>ab[0-9][^\n]</code></p>
<h3 id="边界"><a href="#边界" class="headerlink" title="边界"></a>边界</h3><p>正则表达式提供了几个常用的边界匹配字符，有：^,$,\b,\B<br>例如：<code>^abc\d</code>匹配<strong>以abc开头一个数字结尾的字符串</strong>，^在[]内表示取反</p>
<h3 id="量词"><a href="#量词" class="headerlink" title="量词"></a>量词</h3><p>量词用来表示匹配多少次，有：?,+,*,{n},{n,m},{n,}<br>例如：<code>abc\d{3,5}</code>匹配一个<strong>abc+3~5个数字</strong>组成的字符串</p>
<h4 id="1-贪婪模式"><a href="#1-贪婪模式" class="headerlink" title="1.贪婪模式"></a>1.贪婪模式</h4><p>让正则表达式尽可能多的匹配<br>例：如果字符串<code>1234567</code>,则<code>\d{2,5}</code>会匹配字符串<code>12345</code>,他会尽可能多的匹配而不会只匹配<code>12</code></p>
<h4 id="2-非贪婪模式"><a href="#2-非贪婪模式" class="headerlink" title="2.非贪婪模式"></a>2.非贪婪模式</h4><p>让正则表达式尽可能少的匹配，在量词后加?即可<br>例：如果字符串<code>1234567</code>,则<code>\d{2,5}?</code>会匹配字符串<code>12</code>、<code>34</code>、<code>56</code><br>ps:不是很清楚\d{2,3}?与\d{2}有什么区别</p>
<h3 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h3><p>使用()可以达到分组的功能，使量词作用于分组<br>使用 | 可以达到或的效果<br>例如：<code>(abc\d){2}</code>则会匹配<strong>abc+1个数字+abc+1个数字</strong></p>
<h3 id="反向引用"><a href="#反向引用" class="headerlink" title="反向引用"></a>反向引用</h3><p>正则表达式一个最重要的特性就是将匹配成功的模式的某部分进行存储供以后使用这一能力。对一个正则表达式模式或部分模式两边添加圆括号将导致这部分表达式存储到一个临时缓冲区中。可以使用非捕获元字符<strong>‘?:’</strong>来忽略对这部分正则表达式的保存。<br>所捕获的每个子匹配都按照在正则表达式模式中从左至右所遇到的内容存储。存储子匹配的缓冲区编号从 1 开始，连续编号直至最大 99 个子表达式。每个缓冲区都可以使用 ‘$n’ 访问，其中 n 为一个标识特定缓冲区的一位或两位十进制数。<br>例如：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="string">'world-hello'</span>.replace(<span class="regexp">/(\w+)-(\w+)/g</span>,<span class="string">'$2-$1'</span>);</div><div class="line"><span class="comment">//'hello-world'</span></div><div class="line"><span class="comment">//第一个分组匹配到world存储到一个临时缓冲区，第二个分组匹配到的hello存储到另一个临时缓冲区,使用$1访问第一个临时缓冲区，$2访问第二个临时缓冲区</span></div><div class="line"></div><div class="line"><span class="string">'world-hello'</span>.replace(<span class="regexp">/(?:\w+)-(\w+)/g</span>,<span class="string">'$1'</span>);</div><div class="line"><span class="comment">//'hello'</span></div><div class="line"><span class="comment">//使用?:来忽略对这部分正则表达式的保存，第一个分组匹配到的world被忽略，第二个分组匹配到的hello存储到第一个临时缓冲区</span></div></pre></td></tr></table></figure></p>
<h3 id="前瞻后顾"><a href="#前瞻后顾" class="headerlink" title="前瞻后顾"></a>前瞻后顾</h3><p>正则表达式从文本头部向尾部开始解析，<strong>文本尾部方向为“前”</strong><br>前瞻就是在正则表达式匹配到规则的时候，向前检查是否符合断言，后顾相反<br>JavaScript不支持后顾<br>符合不符合特点的断言称为正向匹配和负向匹配</p>
<table>
<thead>
<tr>
<th style="text-align:center">名称</th>
<th style="text-align:left">正则</th>
<th style="text-align:left">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">正向前瞻</td>
<td style="text-align:left">exp1(?=exp2)</td>
<td style="text-align:left">匹配前面是exp2的exp1</td>
</tr>
<tr>
<td style="text-align:center">负向前瞻</td>
<td style="text-align:left">exp1(?!exp2)</td>
<td style="text-align:left">匹配前面不是exp2的exp1</td>
</tr>
<tr>
<td style="text-align:center">正向后顾</td>
<td style="text-align:left">exp1(?&lt;=exp2)</td>
<td style="text-align:left">匹配后面是exp2的exp1，JavaScript不支持</td>
</tr>
<tr>
<td style="text-align:center">负向后顾</td>
<td style="text-align:left">exp1(?&lt;!exp2)</td>
<td style="text-align:left">匹配后面不是exp2的exp1，JavaScript不支持</td>
</tr>
</tbody>
</table>
<p>ps:文本尾部方向为“前”</p>
<p>例如：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="string">'a2b3c4'</span>.replace(<span class="regexp">/[a-zA-Z](?=3)/g</span>,<span class="string">'X'</span>);</div><div class="line"><span class="comment">//a2X3c4</span></div><div class="line"><span class="comment">//匹配前面是数字3的字母，并替换为'X'</span></div><div class="line"></div><div class="line"><span class="string">'ab2c3de'</span>.replace(<span class="regexp">/[a-zA-Z](?!\d)/g</span>,<span class="string">'X'</span>);</div><div class="line"><span class="comment">//Xb2c3XX</span></div><div class="line"><span class="comment">//匹配前面不是数字的字母，并替换为'X'</span></div></pre></td></tr></table></figure></p>
<hr>
<h2 id="正则表达式全符号解释"><a href="#正则表达式全符号解释" class="headerlink" title="正则表达式全符号解释"></a>正则表达式全符号解释</h2><table>
<thead>
<tr>
<th style="text-align:center">字符</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">\</td>
<td style="text-align:left">将下一个字符标记为一个特殊字符、或一个原义字符、或一个 后向引用、或一个八进制转义符。例如，’n’ 匹配字符 “n”。’\n’ 匹配一个换行符。序列 ‘\\‘ 匹配 “\“ 而 “\(“ 则匹配 “(“。</td>
</tr>
<tr>
<td style="text-align:center">^</td>
<td style="text-align:left">匹配输入字符串的开始位置。如果设置了 RegExp 对象的 Multiline 属性，^ 也匹配 ‘\n’ 或 ‘\r’ 之后的位置。</td>
</tr>
<tr>
<td style="text-align:center">$</td>
<td style="text-align:left">匹配输入字符串的结束位置。如果设置了RegExp 对象的 Multiline 属性，$ 也匹配 ‘\n’ 或 ‘\r’ 之前的位置。</td>
</tr>
<tr>
<td style="text-align:center">*</td>
<td style="text-align:left">匹配前面的子表达式零次或多次。例如，zo* 能匹配 “z” 以及 “zoo”。 * 等价于{0,}。</td>
</tr>
<tr>
<td style="text-align:center">+</td>
<td style="text-align:left">匹配前面的子表达式一次或多次。例如，’zo+’ 能匹配 “zo” 以及 “zoo”，但不能匹配 “z”。+ 等价于 {1,}。</td>
</tr>
<tr>
<td style="text-align:center">?</td>
<td style="text-align:left">匹配前面的子表达式零次或一次。例如，”do(es)?” 可以匹配 “do” 或 “does” 中的”do” 。? 等价于 {0,1}。</td>
</tr>
<tr>
<td style="text-align:center">{n}</td>
<td style="text-align:left">n 是一个非负整数。匹配确定的 n 次。例如，’o{2}’ 不能匹配 “Bob” 中的 ‘o’，但是能匹配 “food” 中的两个 o。</td>
</tr>
<tr>
<td style="text-align:center">{n,}</td>
<td style="text-align:left">n 是一个非负整数。至少匹配n 次。例如，’o{2,}’ 不能匹配 “Bob” 中的 ‘o’，但能匹配 “foooood” 中的所有 o。’o{1,}’ 等价于 ‘o+’。’o{0,}’ 则等价于 ‘o*’。</td>
</tr>
<tr>
<td style="text-align:center">{n,m}</td>
<td style="text-align:left">m 和 n 均为非负整数，其中n &lt;= m。最少匹配 n 次且最多匹配 m 次。刘， “o{1,3}” 将匹配 “fooooood” 中的前三个 o。’o{0,1}’ 等价于 ‘o?’。请注意在逗号和两个数之间不能有空格。</td>
</tr>
<tr>
<td style="text-align:center">?</td>
<td style="text-align:left">当该字符紧跟在任何一个其他限制符 (*, +, ?, {n}, {n,}, {n,m}) 后面时，匹配模式是非贪婪的。非贪婪模式尽可能少的匹配所搜索的字符串，而默认的贪婪模式则尽可能多的匹配所搜索的字符串。例如，对于字符串 “oooo”，’o+?’ 将匹配单个 “o”，而 ‘o+’ 将匹配所有 ‘o’。</td>
</tr>
<tr>
<td style="text-align:center">.</td>
<td style="text-align:left">匹配除 “\n” 之外的任何单个字符。要匹配包括 ‘\n’ 在内的任何字符，请使用象 ‘[.\n]’ 的模式。</td>
</tr>
<tr>
<td style="text-align:center">(pattern)</td>
<td style="text-align:left">匹配pattern 并获取这一匹配。所获取的匹配可以从产生的 Matches 集合得到，在VBScript 中使用 SubMatches 集合，在JScript 中则使用 $0…$9 属性。要匹配圆括号字符，请使用 ‘(‘ 或 ‘)‘。</td>
</tr>
<tr>
<td style="text-align:center">(?:pattern)</td>
<td style="text-align:left">匹配 pattern 但不获取匹配结果，也就是说这是一个非获取匹配，不进行存储供以后使用。这在使用 “或” 字符 (&#124;) 来组合一个模式的各个部分是很有用。例如， ‘industr(?:y&#124;ies) 就是一个比 ‘industry&#124;industries’ 更简略的表达式。</td>
</tr>
<tr>
<td style="text-align:center">(?=pattern)</td>
<td style="text-align:left">正向预查，在任何匹配 pattern 的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如， ‘Windows (?=95&#124;98&#124;NT&#124;2000)’ 能匹配 “Windows 2000” 中的 “Windows” ，但不能匹配 “Windows 3.1” 中的 “Windows”。预查不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始。</td>
</tr>
<tr>
<td style="text-align:center">(?!pattern)</td>
<td style="text-align:left">负向预查，在任何不匹配Negative lookahead matches the search string at any point where a string not matching pattern 的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如’Windows (?!95&#124;98&#124;NT&#124;2000)’ 能匹配 “Windows 3.1” 中的 “Windows”，但不能匹配 “Windows 2000” 中的 “Windows”。预查不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始。</td>
</tr>
<tr>
<td style="text-align:center">x&#124;y</td>
<td style="text-align:left">匹配 x 或 y。例如，’z&#124;food’ 能匹配 “z” 或 “food”。’(z&#124;f)ood’ 则匹配 “zood” 或 “food”。</td>
</tr>
<tr>
<td style="text-align:center">[xyz]</td>
<td style="text-align:left">字符集合。匹配所包含的任意一个字符。例如， ‘[abc]’ 可以匹配 “plain” 中的 ‘a’。</td>
</tr>
<tr>
<td style="text-align:center">[^xyz]</td>
<td style="text-align:left">负值字符集合。匹配未包含的任意字符。例如， ‘[^abc]’ 可以匹配 “plain” 中的’p’。</td>
</tr>
<tr>
<td style="text-align:center">[a-z]</td>
<td style="text-align:left">字符范围。匹配指定范围内的任意字符。例如，’[a-z]’ 可以匹配 ‘a’ 到 ‘z’ 范围内的任意小写字母字符。</td>
</tr>
<tr>
<td style="text-align:center">[^a-z]</td>
<td style="text-align:left">负值字符范围。匹配任何不在指定范围内的任意字符。例如，’[^a-z]’ 可以匹配任何不在 ‘a’ 到 ‘z’ 范围内的任意字符。</td>
</tr>
<tr>
<td style="text-align:center">\b</td>
<td style="text-align:left">匹配一个单词边界，也就是指单词和空格间的位置。例如， ‘er\b’ 可以匹配”never” 中的 ‘er’，但不能匹配 “verb” 中的 ‘er’。</td>
</tr>
<tr>
<td style="text-align:center">\B</td>
<td style="text-align:left">匹配非单词边界。’er\B’ 能匹配 “verb” 中的 ‘er’，但不能匹配 “never” 中的 ‘er’。</td>
</tr>
<tr>
<td style="text-align:center">\cx</td>
<td style="text-align:left">匹配由x指明的控制字符。例如， \cM 匹配一个 Control-M 或回车符。 x 的值必须为 A-Z 或 a-z 之一。否则，将 c 视为一个原义的 ‘c’ 字符。</td>
</tr>
<tr>
<td style="text-align:center">\d</td>
<td style="text-align:left">匹配一个数字字符。等价于 [0-9]。</td>
</tr>
<tr>
<td style="text-align:center">\D</td>
<td style="text-align:left">匹配一个非数字字符。等价于 [^0-9]。</td>
</tr>
<tr>
<td style="text-align:center">\f</td>
<td style="text-align:left">匹配一个换页符。等价于 \x0c 和 \cL。</td>
</tr>
<tr>
<td style="text-align:center">\n</td>
<td style="text-align:left">匹配一个换行符。等价于 \x0a 和 \cJ。</td>
</tr>
<tr>
<td style="text-align:center">\r</td>
<td style="text-align:left">匹配一个回车符。等价于 \x0d 和 \cM。</td>
</tr>
<tr>
<td style="text-align:center">\s</td>
<td style="text-align:left">匹配任何空白字符，包括空格、制表符、换页符等等。等价于 [ \f\n\r\t\v]。</td>
</tr>
<tr>
<td style="text-align:center">\S</td>
<td style="text-align:left">匹配任何非空白字符。等价于 [^ \f\n\r\t\v]。</td>
</tr>
<tr>
<td style="text-align:center">\t</td>
<td style="text-align:left">匹配一个制表符。等价于 \x09 和 \cI。</td>
</tr>
<tr>
<td style="text-align:center">\v</td>
<td style="text-align:left">匹配一个垂直制表符。等价于 \x0b 和 \cK。</td>
</tr>
<tr>
<td style="text-align:center">\w</td>
<td style="text-align:left">匹配包括下划线的任何单词字符。等价于’[A-Za-z0-9_]’。</td>
</tr>
<tr>
<td style="text-align:center">\W</td>
<td style="text-align:left">匹配任何非单词字符。等价于 ‘[^A-Za-z0-9_]’。</td>
</tr>
<tr>
<td style="text-align:center">\xn</td>
<td style="text-align:left">匹配 n，其中 n 为十六进制转义值。十六进制转义值必须为确定的两个数字长。例如， ‘\x41’ 匹配 “A”。’\x041’ 则等价于 ‘\x04’ &amp; “1”。正则表达式中可以使用 ASCII 编码。</td>
</tr>
<tr>
<td style="text-align:center">\num</td>
<td style="text-align:left">匹配 num，其中 num 是一个正整数。对所获取的匹配的引用。例如，’(.)\1’ 匹配两个连续的相同字符。</td>
</tr>
<tr>
<td style="text-align:center">\n</td>
<td style="text-align:left">标识一个八进制转义值或一个后向引用。如果 \n 之前至少 n 个获取的子表达式，则 n 为后向引用。否则，如果 n 为八进制数字 (0-7)，则 n 为一个八进制转义值。</td>
</tr>
<tr>
<td style="text-align:center">\nm</td>
<td style="text-align:left">标识一个八进制转义值或一个后向引用。如果 \nm 之前至少有is preceded by at least nm 个获取得子表达式，则 nm 为后向引用。如果 \nm 之前至少有 n 个获取，则 n 为一个后跟文字 m 的后向引用。如果前面的条件都不满足，若  n 和 m 均为八进制数字 (0-7)，则 \nm 将匹配八进制转义值 nm。</td>
</tr>
<tr>
<td style="text-align:center">\nml</td>
<td style="text-align:left">如果 n 为八进制数字 (0-3)，且 m 和 l 均为八进制数字 (0-7)，则匹配八进制转义值 nml。</td>
</tr>
<tr>
<td style="text-align:center">\un</td>
<td style="text-align:left">匹配 n，其中 n 是一个用四个十六进制数字表示的 Unicode 字符。例如， \u00A9 匹配版权符号 (?)。</td>
</tr>
</tbody>
</table>
<style>
table th:first-of-type {
    width: 80px;
}
table:nth-of-type(1) th:nth-of-type(2) {
    width: 120px;
}
table:nth-of-type(2) td:first-of-type {
    font-weight: 900;
}
</style>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文以javascript来演示正则表达式&lt;/p&gt;
&lt;h2 id=&quot;REGEXP对象&quot;&gt;&lt;a href=&quot;#REGEXP对象&quot; class=&quot;headerlink&quot; title=&quot;REGEXP对象&quot;&gt;&lt;/a&gt;REGEXP对象&lt;/h2&gt;&lt;p&gt;在javascript中通过对象r
    
    </summary>
    
      <category term="正则表达式" scheme="http://yoursite.com/categories/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="正则表达式" scheme="http://yoursite.com/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>MarkDown代码块支持的语言</title>
    <link href="http://yoursite.com/2017/01/20/MarkDown/MarkDown%E4%BB%A3%E7%A0%81%E5%9D%97%E6%94%AF%E6%8C%81%E7%9A%84%E8%AF%AD%E8%A8%80/"/>
    <id>http://yoursite.com/2017/01/20/MarkDown/MarkDown代码块支持的语言/</id>
    <published>2017-01-20T11:21:01.000Z</published>
    <updated>2017-01-20T11:25:26.462Z</updated>
    
    <content type="html"><![CDATA[<table>
<thead>
<tr>
<th>名称</th>
<th>关键字</th>
</tr>
</thead>
<tbody>
<tr>
<td>AppleScript</td>
<td>applescript</td>
</tr>
<tr>
<td>ActionScript 3.0</td>
<td>actionscript3 , as3</td>
</tr>
<tr>
<td>Shell</td>
<td>bash , shell</td>
</tr>
<tr>
<td>ColdFusion</td>
<td>coldfusion , cf</td>
</tr>
<tr>
<td>C</td>
<td>cpp , c</td>
</tr>
<tr>
<td>C#</td>
<td>c# , c-sharp , csharp</td>
</tr>
<tr>
<td>CSS</td>
<td>css</td>
</tr>
<tr>
<td>Delphi</td>
<td>delphi , pascal , pas</td>
</tr>
<tr>
<td>diff&amp;patch</td>
<td>diff patch</td>
</tr>
<tr>
<td>Erlang</td>
<td>erl , erlang</td>
</tr>
<tr>
<td>Groovy</td>
<td>groovy</td>
</tr>
<tr>
<td>Java</td>
<td>java</td>
</tr>
<tr>
<td>JavaFX</td>
<td>jfx , javafx</td>
</tr>
<tr>
<td>JavaScript</td>
<td>js , jscript , javascript</td>
</tr>
<tr>
<td>Perl</td>
<td>perl , pl , Perl</td>
</tr>
<tr>
<td>PHP</td>
<td>php</td>
</tr>
<tr>
<td>text</td>
<td>text , plain</td>
</tr>
<tr>
<td>Python</td>
<td>py , python</td>
</tr>
<tr>
<td>Ruby</td>
<td>ruby , rails , ror , rb</td>
</tr>
<tr>
<td>SASS&amp;SCSS</td>
<td>sass , scss</td>
</tr>
<tr>
<td>Scala</td>
<td>scala</td>
</tr>
<tr>
<td>SQL</td>
<td>sql</td>
</tr>
<tr>
<td>Visual Basic</td>
<td>vb , vbnet</td>
</tr>
<tr>
<td>XML</td>
<td>xml , xhtml , xslt , html</td>
</tr>
<tr>
<td>Objective C</td>
<td>objc , obj-c</td>
</tr>
<tr>
<td>F#  f#</td>
<td>f-sharp , fsharp</td>
</tr>
<tr>
<td>R</td>
<td>r , s , splus</td>
</tr>
<tr>
<td>matlab</td>
<td>matlab</td>
</tr>
<tr>
<td>swift</td>
<td>swift</td>
</tr>
<tr>
<td>GO</td>
<td>go , golang</td>
</tr>
</tbody>
</table>
]]></content>
    
    <summary type="html">
    
      &lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名称&lt;/th&gt;
&lt;th&gt;关键字&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;AppleScript&lt;/td&gt;
&lt;td&gt;applescript&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ActionScr
    
    </summary>
    
      <category term="MarkDown" scheme="http://yoursite.com/categories/MarkDown/"/>
    
    
      <category term="MarkDown" scheme="http://yoursite.com/tags/MarkDown/"/>
    
  </entry>
  
  <entry>
    <title>typeof和instanceof</title>
    <link href="http://yoursite.com/2017/01/14/JavaScript/typeof%E5%92%8Cinstanceof/"/>
    <id>http://yoursite.com/2017/01/14/JavaScript/typeof和instanceof/</id>
    <published>2017-01-14T08:40:56.000Z</published>
    <updated>2017-01-14T15:14:22.239Z</updated>
    
    <content type="html"><![CDATA[<h2 id="typeof和instanceof"><a href="#typeof和instanceof" class="headerlink" title="typeof和instanceof"></a>typeof和instanceof</h2><p>如果要对一个值进行分类，你就不得不区分JavaScript中的原始值和对象</p>
<ul>
<li>typeof运算符能区分原始值和对象，并检测出原始值的类型</li>
<li>instanceof运算符可以检测一个对象是否是特定构造函数的一个实例</li>
</ul>
<h3 id="typeof"><a href="#typeof" class="headerlink" title="typeof"></a>typeof</h3><p>typeof运算符用法：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typeof</span> <span class="literal">undefined</span>;    <span class="comment">//'undefined'</span></div><div class="line"><span class="keyword">typeof</span> <span class="string">'abc'</span>;    <span class="comment">//'string'</span></div><div class="line"><span class="keyword">typeof</span> &#123;&#125;;    <span class="comment">//'object'</span></div><div class="line"><span class="keyword">typeof</span> [];    <span class="comment">//'object'</span></div></pre></td></tr></table></figure></p>
<p>返回一个字符串，会描述值的类型是什么</p>
<table>
<thead>
<tr>
<th style="text-align:center">运算数</th>
<th style="text-align:center">结果</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">undefined</td>
<td style="text-align:center">‘undefined’</td>
</tr>
<tr>
<td style="text-align:center">null</td>
<td style="text-align:center">‘null’</td>
</tr>
<tr>
<td style="text-align:center">布尔值</td>
<td style="text-align:center">‘boolean’</td>
</tr>
<tr>
<td style="text-align:center">数字</td>
<td style="text-align:center">‘number’</td>
</tr>
<tr>
<td style="text-align:center">字符串</td>
<td style="text-align:center">‘string’</td>
</tr>
<tr>
<td style="text-align:center">函数</td>
<td style="text-align:center">‘function’</td>
</tr>
<tr>
<td style="text-align:center">所有其他常规属性</td>
<td style="text-align:center">‘object’</td>
</tr>
</tbody>
</table>
<p>注意：typeof null返回object是一个不能去修正的bug，因为这会破坏现有的代码。判断一个值是否是对象可以用下面这个函数：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">isObject</span>(<span class="params">value</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> (value !== <span class="literal">null</span></div><div class="line">        &amp;&amp; (<span class="keyword">typeof</span> value === <span class="string">'object'</span></div><div class="line">            || <span class="keyword">typeof</span> value === <span class="string">'function'</span>));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="instanceof"><a href="#instanceof" class="headerlink" title="instanceof"></a>instanceof</h3><p>判断value是由构造函数Constr还是子构造函数创建的，所以它是检测Constr.prototype是否在value的原型链上。因此，下两个表达式是等价的：<br><code>value instanceof Constr</code><br><code>Constr.prototype.isPrototypeOf(value)</code></p>
<p>instanceof运算符用法：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&#123;&#125; <span class="keyword">instanceof</span> <span class="built_in">Object</span>;    <span class="comment">//true</span></div><div class="line">[] <span class="keyword">instanceof</span> <span class="built_in">Array</span>;    <span class="comment">//true</span></div><div class="line">[] <span class="keyword">instanceof</span> <span class="built_in">Object</span>;    <span class="comment">//true</span></div><div class="line"></div><div class="line"><span class="literal">undefined</span> <span class="keyword">instanceof</span> <span class="built_in">Object</span>;    <span class="comment">//false</span></div><div class="line"><span class="literal">null</span> <span class="keyword">instanceof</span> <span class="built_in">Object</span>;    <span class="comment">//false</span></div><div class="line"></div><div class="line"><span class="keyword">new</span> <span class="built_in">Date</span>() <span class="keyword">instanceof</span> <span class="built_in">Date</span>;    <span class="comment">//true</span></div><div class="line"><span class="keyword">new</span> <span class="built_in">Date</span>() <span class="keyword">instanceof</span> <span class="built_in">Object</span>;    <span class="comment">//true</span></div><div class="line"></div><div class="line"><span class="string">'abc'</span> <span class="keyword">instanceof</span> <span class="built_in">String</span>;    <span class="comment">//false</span></div><div class="line"><span class="number">123</span> <span class="keyword">instanceof</span> <span class="built_in">Number</span>;    <span class="comment">//false</span></div></pre></td></tr></table></figure></p>
<p>instanceof对原始值总是false<br>如果instanceof的右边不是函数，则会抛出异常<br><code>[] instanceof 123;    //TypeError: Expecting a function in instanceof check</code></p>
<p>注意：几乎所有的对象都是Object的实例，因为Object.prototype在这些对象的原型链上。但也有个别对象不属于这种情况，如：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Object</span>.create(<span class="literal">null</span>) <span class="keyword">instanceof</span> <span class="built_in">Object</span>;    <span class="comment">//false</span></div><div class="line"><span class="built_in">Object</span>.prototype <span class="keyword">instanceof</span> <span class="built_in">Object</span>;    <span class="comment">//false</span></div></pre></td></tr></table></figure></p>
<p>是因为这些是没有原型的对象：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Object</span>.getPrototypeOf(<span class="built_in">Object</span>.create(<span class="literal">null</span>));    <span class="comment">//null</span></div><div class="line"><span class="built_in">Object</span>.getPrototypeOf(<span class="built_in">Object</span>.prototype);    <span class="comment">//null</span></div></pre></td></tr></table></figure></p>
<p>但typeof可以正确的把这些归类为对象：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typeof</span> <span class="built_in">Object</span>.create(<span class="literal">null</span>);    <span class="comment">//'Object'</span></div><div class="line"><span class="keyword">typeof</span> <span class="built_in">Object</span>.prototype;    <span class="comment">//'Object'</span></div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;typeof和instanceof&quot;&gt;&lt;a href=&quot;#typeof和instanceof&quot; class=&quot;headerlink&quot; title=&quot;typeof和instanceof&quot;&gt;&lt;/a&gt;typeof和instanceof&lt;/h2&gt;&lt;p&gt;如果要对一个值进行分
    
    </summary>
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>原始值和对象</title>
    <link href="http://yoursite.com/2017/01/13/JavaScript/%E5%8E%9F%E5%A7%8B%E5%80%BC%E5%92%8C%E5%AF%B9%E8%B1%A1/"/>
    <id>http://yoursite.com/2017/01/13/JavaScript/原始值和对象/</id>
    <published>2017-01-13T07:52:00.000Z</published>
    <updated>2017-01-14T08:00:22.580Z</updated>
    
    <content type="html"><![CDATA[<h2 id="原始值和对象"><a href="#原始值和对象" class="headerlink" title="原始值和对象"></a>原始值和对象</h2><p>在阅读深入理解JavaScript中发现值可以分为两类：<strong>原始值</strong>和<strong>对象</strong></p>
<ul>
<li>原始值包括布尔值、数字、字符串、null和undefined</li>
<li>其他的值都是对象</li>
</ul>
<p>两者之间最主要的区别在于它们的比较方式：每个对象都有唯一的标识且（严格的）等于自己：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj1 = &#123;&#125;;</div><div class="line"><span class="keyword">var</span> obj2 = &#123;&#125;;</div><div class="line">obj1 === obj2;    <span class="comment">//false</span></div><div class="line">obj1 === obj1;    <span class="comment">//true</span></div></pre></td></tr></table></figure></p>
<p>相反，所有原始值只要编码值相同，则被认为相等：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> prim1 = <span class="number">123</span>;</div><div class="line"><span class="keyword">var</span> prim2 = <span class="number">123</span>;</div><div class="line">prim1 === prim2;    <span class="comment">//true</span></div></pre></td></tr></table></figure></p>
<h3 id="原始值"><a href="#原始值" class="headerlink" title="原始值"></a>原始值</h3><p>原始值包括布尔值、数字、字符串、null和undefined<br>原始值具有以下特点：</p>
<ol>
<li><p>按值比较</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="number">3</span> === <span class="number">3</span>;    <span class="comment">//true</span></div><div class="line"><span class="string">'abc'</span> === <span class="string">'abc'</span>;    <span class="comment">//true</span></div></pre></td></tr></table></figure>
</li>
<li><p>不可改变<br>其属性不能被改变、添加和删除</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str = <span class="string">'abc'</span>;</div><div class="line">str.length = <span class="number">1</span>;</div><div class="line">str.length;    <span class="comment">//3</span></div><div class="line"></div><div class="line">str.foo = <span class="number">3</span>;</div><div class="line">str.foo;    <span class="comment">//undefined</span></div><div class="line"><span class="comment">//读取未知属性时，总会返回undefined</span></div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><p>所有非原始值都是对象<br>对象具有以下特点：</p>
<ol>
<li><p>按引用进行比较<br>比较身份标识：每个值都有各自的身份标识</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123;&#125; === &#123;&#125;;    <span class="comment">//false</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> obj1 = &#123;&#125;;</div><div class="line"><span class="keyword">var</span> obj2 = obj1;</div><div class="line">obj1 === obj2;    <span class="comment">//true</span></div></pre></td></tr></table></figure>
</li>
<li><p>默认可变<br>对象属性可以被改变、添加和删除</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj = &#123;&#125;;</div><div class="line">obj.foo = <span class="number">123</span>;</div><div class="line">obj.foo;    <span class="comment">//123</span></div></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;原始值和对象&quot;&gt;&lt;a href=&quot;#原始值和对象&quot; class=&quot;headerlink&quot; title=&quot;原始值和对象&quot;&gt;&lt;/a&gt;原始值和对象&lt;/h2&gt;&lt;p&gt;在阅读深入理解JavaScript中发现值可以分为两类：&lt;strong&gt;原始值&lt;/strong&gt;和&lt;stro
    
    </summary>
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2016/11/04/essay/Hello%20World/"/>
    <id>http://yoursite.com/2016/11/04/essay/Hello World/</id>
    <published>2016-11-04T11:31:48.000Z</published>
    <updated>2017-02-28T02:23:02.688Z</updated>
    
    <content type="html"><![CDATA[<p>在2016年11月4日，我终于开通了博客，用来记录自己学习的点点滴滴和监督自己，会更新一些自己学习到的内容和总结。总之开始了我的博客之路。<br><img src="/images/75FEC0E76AE1E8652C17C93BD1DFF802.jpg" style="height: 200px;"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在2016年11月4日，我终于开通了博客，用来记录自己学习的点点滴滴和监督自己，会更新一些自己学习到的内容和总结。总之开始了我的博客之路。&lt;br&gt;&lt;img src=&quot;/images/75FEC0E76AE1E8652C17C93BD1DFF802.jpg&quot; style=&quot;h
    
    </summary>
    
      <category term="随笔" scheme="http://yoursite.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="随笔" scheme="http://yoursite.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
</feed>
