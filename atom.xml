<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lexokid的博客</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-01-14T15:14:22.239Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Lexokid</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>typeof和instanceof</title>
    <link href="http://yoursite.com/2017/01/14/typeof%E5%92%8Cinstanceof/"/>
    <id>http://yoursite.com/2017/01/14/typeof和instanceof/</id>
    <published>2017-01-14T08:40:56.000Z</published>
    <updated>2017-01-14T15:14:22.239Z</updated>
    
    <content type="html"><![CDATA[<h2 id="typeof和instanceof"><a href="#typeof和instanceof" class="headerlink" title="typeof和instanceof"></a>typeof和instanceof</h2><p>如果要对一个值进行分类，你就不得不区分JavaScript中的原始值和对象</p>
<ul>
<li>typeof运算符能区分原始值和对象，并检测出原始值的类型</li>
<li>instanceof运算符可以检测一个对象是否是特定构造函数的一个实例</li>
</ul>
<h3 id="typeof"><a href="#typeof" class="headerlink" title="typeof"></a>typeof</h3><p>typeof运算符用法：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typeof</span> <span class="literal">undefined</span>;    <span class="comment">//'undefined'</span></div><div class="line"><span class="keyword">typeof</span> <span class="string">'abc'</span>;    <span class="comment">//'string'</span></div><div class="line"><span class="keyword">typeof</span> &#123;&#125;;    <span class="comment">//'object'</span></div><div class="line"><span class="keyword">typeof</span> [];    <span class="comment">//'object'</span></div></pre></td></tr></table></figure></p>
<p>返回一个字符串，会描述值的类型是什么</p>
<table>
<thead>
<tr>
<th style="text-align:center">运算数</th>
<th style="text-align:center">结果</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">undefined</td>
<td style="text-align:center">‘undefined’</td>
</tr>
<tr>
<td style="text-align:center">null</td>
<td style="text-align:center">‘null’</td>
</tr>
<tr>
<td style="text-align:center">布尔值</td>
<td style="text-align:center">‘boolean’</td>
</tr>
<tr>
<td style="text-align:center">数字</td>
<td style="text-align:center">‘number’</td>
</tr>
<tr>
<td style="text-align:center">字符串</td>
<td style="text-align:center">‘string’</td>
</tr>
<tr>
<td style="text-align:center">函数</td>
<td style="text-align:center">‘function’</td>
</tr>
<tr>
<td style="text-align:center">所有其他常规属性</td>
<td style="text-align:center">‘object’</td>
</tr>
</tbody>
</table>
<p>注意：typeof null返回object是一个不能去修正的bug，因为这会破坏现有的代码。判断一个值是否是对象可以用下面这个函数：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">isObject</span>(<span class="params">value</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> (value !== <span class="literal">null</span></div><div class="line">        &amp;&amp; (<span class="keyword">typeof</span> value === <span class="string">'object'</span></div><div class="line">            || <span class="keyword">typeof</span> value === <span class="string">'function'</span>));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="instanceof"><a href="#instanceof" class="headerlink" title="instanceof"></a>instanceof</h3><p>判断value是由构造函数Constr还是子构造函数创建的，所以它是检测Constr.prototype是否在value的原型链上。因此，下两个表达式是等价的：<br><code>value instanceof Constr</code><br><code>Constr.prototype.isPrototypeOf(value)</code></p>
<p>instanceof运算符用法：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&#123;&#125; <span class="keyword">instanceof</span> <span class="built_in">Object</span>;    <span class="comment">//true</span></div><div class="line">[] <span class="keyword">instanceof</span> <span class="built_in">Array</span>;    <span class="comment">//true</span></div><div class="line">[] <span class="keyword">instanceof</span> <span class="built_in">Object</span>;    <span class="comment">//true</span></div><div class="line"></div><div class="line"><span class="literal">undefined</span> <span class="keyword">instanceof</span> <span class="built_in">Object</span>;    <span class="comment">//false</span></div><div class="line"><span class="literal">null</span> <span class="keyword">instanceof</span> <span class="built_in">Object</span>;    <span class="comment">//false</span></div><div class="line"></div><div class="line"><span class="keyword">new</span> <span class="built_in">Date</span>() <span class="keyword">instanceof</span> <span class="built_in">Date</span>;    <span class="comment">//true</span></div><div class="line"><span class="keyword">new</span> <span class="built_in">Date</span>() <span class="keyword">instanceof</span> <span class="built_in">Object</span>;    <span class="comment">//true</span></div><div class="line"></div><div class="line"><span class="string">'abc'</span> <span class="keyword">instanceof</span> <span class="built_in">String</span>;    <span class="comment">//false</span></div><div class="line"><span class="number">123</span> <span class="keyword">instanceof</span> <span class="built_in">Number</span>;    <span class="comment">//false</span></div></pre></td></tr></table></figure></p>
<p>instanceof对原始值总是false<br>如果instanceof的右边不是函数，则会抛出异常<br><code>[] instanceof 123;    //TypeError: Expecting a function in instanceof check</code></p>
<p>注意：几乎所有的对象都是Object的实例，因为Object.prototype在这些对象的原型链上。但也有个别对象不属于这种情况，如：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Object</span>.create(<span class="literal">null</span>) <span class="keyword">instanceof</span> <span class="built_in">Object</span>;    <span class="comment">//false</span></div><div class="line"><span class="built_in">Object</span>.prototype <span class="keyword">instanceof</span> <span class="built_in">Object</span>;    <span class="comment">//false</span></div></pre></td></tr></table></figure></p>
<p>是因为这些是没有原型的对象：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Object</span>.getPrototypeOf(<span class="built_in">Object</span>.create(<span class="literal">null</span>));    <span class="comment">//null</span></div><div class="line"><span class="built_in">Object</span>.getPrototypeOf(<span class="built_in">Object</span>.prototype);    <span class="comment">//null</span></div></pre></td></tr></table></figure></p>
<p>但typeof可以正确的把这些归类为对象：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typeof</span> <span class="built_in">Object</span>.create(<span class="literal">null</span>);    <span class="comment">//'Object'</span></div><div class="line"><span class="keyword">typeof</span> <span class="built_in">Object</span>.prototype;    <span class="comment">//'Object'</span></div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;typeof和instanceof&quot;&gt;&lt;a href=&quot;#typeof和instanceof&quot; class=&quot;headerlink&quot; title=&quot;typeof和instanceof&quot;&gt;&lt;/a&gt;typeof和instanceof&lt;/h2&gt;&lt;p&gt;如果要对一个值进行分
    
    </summary>
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>原始值和对象</title>
    <link href="http://yoursite.com/2017/01/13/%E5%8E%9F%E5%A7%8B%E5%80%BC%E5%92%8C%E5%AF%B9%E8%B1%A1/"/>
    <id>http://yoursite.com/2017/01/13/原始值和对象/</id>
    <published>2017-01-13T07:52:00.000Z</published>
    <updated>2017-01-14T08:00:22.580Z</updated>
    
    <content type="html"><![CDATA[<h2 id="原始值和对象"><a href="#原始值和对象" class="headerlink" title="原始值和对象"></a>原始值和对象</h2><p>在阅读深入理解JavaScript中发现值可以分为两类：<strong>原始值</strong>和<strong>对象</strong></p>
<ul>
<li>原始值包括布尔值、数字、字符串、null和undefined</li>
<li>其他的值都是对象</li>
</ul>
<p>两者之间最主要的区别在于它们的比较方式：每个对象都有唯一的标识且（严格的）等于自己：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj1 = &#123;&#125;;</div><div class="line"><span class="keyword">var</span> obj2 = &#123;&#125;;</div><div class="line">obj1 === obj2;    <span class="comment">//false</span></div><div class="line">obj1 === obj1;    <span class="comment">//true</span></div></pre></td></tr></table></figure></p>
<p>相反，所有原始值只要编码值相同，则被认为相等：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> prim1 = <span class="number">123</span>;</div><div class="line"><span class="keyword">var</span> prim2 = <span class="number">123</span>;</div><div class="line">prim1 === prim2;    <span class="comment">//true</span></div></pre></td></tr></table></figure></p>
<h3 id="原始值"><a href="#原始值" class="headerlink" title="原始值"></a>原始值</h3><p>原始值包括布尔值、数字、字符串、null和undefined<br>原始值具有以下特点：</p>
<ol>
<li><p>按值比较</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="number">3</span> === <span class="number">3</span>;    <span class="comment">//true</span></div><div class="line"><span class="string">'abc'</span> === <span class="string">'abc'</span>;    <span class="comment">//true</span></div></pre></td></tr></table></figure>
</li>
<li><p>不可改变<br>其属性不能被改变、添加和删除</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str = <span class="string">'abc'</span>;</div><div class="line">str.length = <span class="number">1</span>;</div><div class="line">str.length;    <span class="comment">//3</span></div><div class="line"></div><div class="line">str.foo = <span class="number">3</span>;</div><div class="line">str.foo;    <span class="comment">//undefined</span></div><div class="line"><span class="comment">//读取未知属性时，总会返回undefined</span></div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><p>所有非原始值都是对象<br>对象具有以下特点：</p>
<ol>
<li><p>按引用进行比较<br>比较身份标识：每个值都有各自的身份标识</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123;&#125; === &#123;&#125;;    <span class="comment">//false</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> obj1 = &#123;&#125;;</div><div class="line"><span class="keyword">var</span> obj2 = obj1;</div><div class="line">obj1 === obj2;    <span class="comment">//true</span></div></pre></td></tr></table></figure>
</li>
<li><p>默认可变<br>对象属性可以被改变、添加和删除</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj = &#123;&#125;;</div><div class="line">obj.foo = <span class="number">123</span>;</div><div class="line">obj.foo;    <span class="comment">//123</span></div></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;原始值和对象&quot;&gt;&lt;a href=&quot;#原始值和对象&quot; class=&quot;headerlink&quot; title=&quot;原始值和对象&quot;&gt;&lt;/a&gt;原始值和对象&lt;/h2&gt;&lt;p&gt;在阅读深入理解JavaScript中发现值可以分为两类：&lt;strong&gt;原始值&lt;/strong&gt;和&lt;stro
    
    </summary>
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2016/11/04/Hello%20World/"/>
    <id>http://yoursite.com/2016/11/04/Hello World/</id>
    <published>2016-11-04T11:31:48.000Z</published>
    <updated>2017-01-13T07:37:34.900Z</updated>
    
    <content type="html"><![CDATA[<p>在2016年11月4日，我终于开通了博客，用来记录自己学习的点点滴滴和监督自己，会更新一些自己学习到的内容和总结。总之开始了我的博客之路。<br><img src="/images/75FEC0E76AE1E8652C17C93BD1DFF802.jpg" style="height: 200px;"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在2016年11月4日，我终于开通了博客，用来记录自己学习的点点滴滴和监督自己，会更新一些自己学习到的内容和总结。总之开始了我的博客之路。&lt;br&gt;&lt;img src=&quot;/images/75FEC0E76AE1E8652C17C93BD1DFF802.jpg&quot; style=&quot;h
    
    </summary>
    
      <category term="随笔" scheme="http://yoursite.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="随笔" scheme="http://yoursite.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
</feed>
