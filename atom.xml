<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lexokid的博客</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-04-29T08:38:42.596Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Lexokid</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>canvas基础</title>
    <link href="http://yoursite.com/2017/04/24/canvas/canvas%E5%9F%BA%E7%A1%80/"/>
    <id>http://yoursite.com/2017/04/24/canvas/canvas基础/</id>
    <published>2017-04-24T09:53:00.000Z</published>
    <updated>2017-04-29T08:38:42.596Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-canvas"><a href="#1-canvas" class="headerlink" title="1.canvas"></a>1.canvas</h1><p>Canvas API（画布）是在HTML5中新增的标签用于在网页实时生成图像，并且可以操作图像内容，基本上它是一个可以用JavaScript操作的位图（bitmap）。</p>
<h2 id="1-1SVG-以及VML之间的差异编辑"><a href="#1-1SVG-以及VML之间的差异编辑" class="headerlink" title="1.1SVG 以及VML之间的差异编辑:"></a>1.1SVG 以及VML之间的差异编辑:</h2><p><code>&lt;canvas&gt;</code> 标记和 SVG以及 VML 之间的一个重要的不同是，<code>&lt;canvas&gt;</code> 有一个基于 JavaScript 的绘图 API，而 SVG 和 VML 使用一个 XML 文档来描述绘图。<br>这两种方式在功能上是等同的，任何一种都可以用另一种来模拟。从表面上看，它们很不相同，可是，每一种都有强项和弱点。例如，SVG 绘图很容易编辑，只要从其描述中移除元素就行。<br>要从同一图形的一个 <code>&lt;canvas&gt;</code> 标记中移除元素，往往需要擦掉绘图重新绘制它。</p>
<h2 id=""><a href="#" class="headerlink" title=""></a><a id="more"></a></h2><h1 id="2-创建-Canvas-元素"><a href="#2-创建-Canvas-元素" class="headerlink" title="2.创建 Canvas 元素"></a>2.创建 Canvas 元素</h1><p>向 HTML5 页面添加 canvas 元素。<br>规定元素的 id：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">"canvas"</span>&gt;</span>当前浏览器不支持canvas<span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></div></pre></td></tr></table></figure>
<p>canvas 元素本身是没有绘图能力的。所有的绘制工作必须在 JavaScript 内部完成：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">"canvas"</span>);</div><div class="line">canvas.width = <span class="number">1024</span>;</div><div class="line">canvas.height = <span class="number">768</span>;</div><div class="line"><span class="keyword">var</span> ctx = canvas.getContext(<span class="string">'2d'</span>);</div></pre></td></tr></table></figure>
<p>当没有设置宽度和高度的时候，canvas会初始化宽度为300像素和高度为150像素。该元素可以使用CSS来定义大小，但在绘制时图像会伸缩以适应它的框架尺寸：如果CSS的尺寸与初始画布的比例不一致，它会出现扭曲。</p>
<h1 id="3-基本绘制"><a href="#3-基本绘制" class="headerlink" title="3.基本绘制"></a>3.基本绘制</h1><h2 id="3-1-beginPath"><a href="#3-1-beginPath" class="headerlink" title="3.1 beginPath"></a>3.1 beginPath</h2><p>1.beginPath()开始新的绘制路径。在beginPath()之后改变的状态，不会影响到beginPath()之前定义的状态。如果某个状态一直没有改变，就会一直延续的使用下去，而不会再beginPath()之后恢复为默认。<br>2.beginPath()的调用相当于清除之前的绘制状态（包括线条颜色，绘制点的位置等等），所以beginPath()之后的moveTo可以改为lineTo，因为调用的beginPath()，所以之前的绘制点相当于不存在。</p>
<p><canvas id="canvas1" style="border: 1px solid #bbb;">当前浏览器不支持canvas！</canvas></p>
<script type="text/javascript">
    var canvas1 = document.getElementById("canvas1");
    canvas1.width = 320;
    canvas1.height = 180;
    var ctx = canvas1.getContext('2d');
    ctx.lineWidth = 5;
    ctx.beginPath();
    ctx.lineTo(10,10);
    ctx.lineTo(100,90);
    ctx.lineTo(10,170);
    ctx.strokeStyle = "red";
    ctx.stroke();
    ctx.beginPath();
    ctx.lineTo(110,10);
    ctx.lineTo(200,90);
    ctx.lineTo(110,170);
    ctx.stroke();
    ctx.beginPath();
    ctx.lineTo(210,10);
    ctx.lineTo(300,90);
    ctx.lineTo(210,170);
    ctx.strokeStyle = "blue";
    ctx.stroke();
</script>

<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">ctx.lineWidth = <span class="number">5</span>;</div><div class="line"></div><div class="line">ctx.beginPath();</div><div class="line">ctx.lineTo(<span class="number">10</span>,<span class="number">10</span>);</div><div class="line">ctx.lineTo(<span class="number">100</span>,<span class="number">90</span>);</div><div class="line">ctx.lineTo(<span class="number">10</span>,<span class="number">170</span>);</div><div class="line">ctx.strokeStyle = <span class="string">"red"</span>;  <span class="comment">// 如果某个状态一直没有改变，就会一直延续的使用下去，而不会再beginPath()之后恢复为默认</span></div><div class="line">ctx.stroke();</div><div class="line"></div><div class="line">ctx.beginPath();</div><div class="line">ctx.lineTo(<span class="number">110</span>,<span class="number">10</span>);</div><div class="line">ctx.lineTo(<span class="number">200</span>,<span class="number">90</span>);</div><div class="line">ctx.lineTo(<span class="number">110</span>,<span class="number">170</span>);</div><div class="line">ctx.stroke();</div><div class="line"></div><div class="line">ctx.beginPath();</div><div class="line">ctx.lineTo(<span class="number">210</span>,<span class="number">10</span>);</div><div class="line">ctx.lineTo(<span class="number">300</span>,<span class="number">90</span>);</div><div class="line">ctx.lineTo(<span class="number">210</span>,<span class="number">170</span>);</div><div class="line">ctx.strokeStyle = <span class="string">"blue"</span>;  <span class="comment">// 在beginPath()之后改变的状态，不会影响到beginPath()之前定义的状态</span></div><div class="line">ctx.stroke();</div></pre></td></tr></table></figure>
<h2 id="3-2-closePath"><a href="#3-2-closePath" class="headerlink" title="3.2 closePath"></a>3.2 closePath</h2><p>1.closePath()会自动将未封闭的图形用一条直线连接起来<br>2.当我们不想让图形封闭起来只需要用beginPath()就行了<br>3.beginPath()和closePath()不一定要同时出现<br>4.closePath()对fill()没用</p>
<p><canvas id="canvas2" style="border: 1px solid #bbb;">当前浏览器不支持canvas！</canvas></p>
<script type="text/javascript">
    var canvas2 = document.getElementById("canvas2");
    canvas2.width = 320;
    canvas2.height = 180;
    var ctx = canvas2.getContext('2d');
    ctx.lineWidth = 15;
    ctx.beginPath();
    ctx.lineTo(30,30);
    ctx.lineTo(100,30);
    ctx.lineTo(100,150);
    ctx.lineTo(30,150);
    ctx.lineTo(30,30);
    ctx.strokeStyle = "red";
    ctx.stroke();
    ctx.beginPath();
    ctx.lineTo(130,30);
    ctx.lineTo(200,30);
    ctx.lineTo(200,150);
    ctx.lineTo(130,150);
    ctx.lineTo(130,30);
    ctx.strokeStyle = "blue";
    ctx.closePath();
    ctx.stroke();
    ctx.beginPath();
    ctx.lineTo(230,30);
    ctx.lineTo(300,30);
    ctx.lineTo(300,150);
    ctx.lineTo(230,150);
    ctx.strokeStyle = "green";
    ctx.closePath();
    ctx.stroke();
</script>

<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">ctx.lineWidth = <span class="number">15</span>;</div><div class="line"></div><div class="line">ctx.beginPath();</div><div class="line">ctx.lineTo(<span class="number">30</span>,<span class="number">30</span>);</div><div class="line">ctx.lineTo(<span class="number">100</span>,<span class="number">30</span>);</div><div class="line">ctx.lineTo(<span class="number">100</span>,<span class="number">150</span>);</div><div class="line">ctx.lineTo(<span class="number">30</span>,<span class="number">150</span>);</div><div class="line">ctx.lineTo(<span class="number">30</span>,<span class="number">30</span>);</div><div class="line">ctx.strokeStyle = <span class="string">"red"</span>;</div><div class="line">ctx.stroke();</div><div class="line"></div><div class="line">ctx.beginPath();</div><div class="line">ctx.lineTo(<span class="number">130</span>,<span class="number">30</span>);</div><div class="line">ctx.lineTo(<span class="number">200</span>,<span class="number">30</span>);</div><div class="line">ctx.lineTo(<span class="number">200</span>,<span class="number">150</span>);</div><div class="line">ctx.lineTo(<span class="number">130</span>,<span class="number">150</span>);</div><div class="line">ctx.lineTo(<span class="number">130</span>,<span class="number">30</span>);</div><div class="line">ctx.strokeStyle = <span class="string">"blue"</span>;</div><div class="line">ctx.closePath();</div><div class="line">ctx.stroke();</div><div class="line"></div><div class="line">ctx.beginPath();</div><div class="line">ctx.lineTo(<span class="number">230</span>,<span class="number">30</span>);</div><div class="line">ctx.lineTo(<span class="number">300</span>,<span class="number">30</span>);</div><div class="line">ctx.lineTo(<span class="number">300</span>,<span class="number">150</span>);</div><div class="line">ctx.lineTo(<span class="number">230</span>,<span class="number">150</span>);</div><div class="line">ctx.strokeStyle = <span class="string">"blue"</span>;</div><div class="line">ctx.closePath();</div><div class="line">ctx.stroke();</div></pre></td></tr></table></figure>
<p>我们看到第一个图形未写closePath()，所以线条连接处没有完全闭合<br>第二个用了closePath()使线条连接处完全闭合<br>因为closePath()会自动将未封闭的图形用一条直线连接起来，所以使用closePath时，最后一个连接到起始点的lineTo()是可以省略的，会自动连接到起始点</p>
<h2 id="3-3-绘制直线"><a href="#3-3-绘制直线" class="headerlink" title="3.3 绘制直线"></a>3.3 绘制直线</h2><p>canvas 是基于状态绘制的，即先定义状态，后绘制</p>
<p><canvas id="canvas3" style="border: 1px solid #bbb;">当前浏览器不支持canvas！</canvas></p>
<script type="text/javascript">
    var canvas3 = document.getElementById("canvas3");
    canvas3.width = 320;
    canvas3.height = 180;
    var ctx = canvas3.getContext('2d');
    ctx.beginPath();
    ctx.moveTo(10,10);
    ctx.lineTo(310,170);
    ctx.lineWidth = 2;
    ctx.strokeStyle = "orange";
    ctx.closePath();
    ctx.stroke();
</script>

<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">ctx.beginPath();  <span class="comment">// 路径绘制开始</span></div><div class="line">ctx.moveTo(<span class="number">10</span>,<span class="number">10</span>);  <span class="comment">// 起始</span></div><div class="line">ctx.lineTo(<span class="number">310</span>,<span class="number">170</span>);  <span class="comment">// 终止</span></div><div class="line">ctx.lineWidth = <span class="number">2</span>;  <span class="comment">// 线宽</span></div><div class="line">ctx.strokeStyle = <span class="string">"orange"</span>;  <span class="comment">// 颜色</span></div><div class="line">ctx.closePath();  <span class="comment">// 路径绘制结束</span></div><div class="line">ctx.stroke();  <span class="comment">// 线条</span></div></pre></td></tr></table></figure>
<h2 id="3-4-绘制图形"><a href="#3-4-绘制图形" class="headerlink" title="3.4 绘制图形"></a>3.4 绘制图形</h2><p><canvas id="canvas4" style="border: 1px solid #bbb;">当前浏览器不支持canvas！</canvas></p>
<script type="text/javascript">
    var canvas4 = document.getElementById("canvas4");
    canvas4.width = 320;
    canvas4.height = 180;
    var ctx = canvas4.getContext('2d');
    ctx.beginPath();
    ctx.moveTo(10,10);
    ctx.lineTo(310,170);
    ctx.lineTo(10,170);
    ctx.lineTo(10,10);
    ctx.closePath();
    ctx.lineWidth = 5;
    ctx.strokeStyle = "red";
    ctx.stroke();
    ctx.fillStyle = "green";
    ctx.fill();
</script>

<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">ctx.beginPath();  <span class="comment">// 路径绘制开始</span></div><div class="line">ctx.moveTo(<span class="number">100</span>,<span class="number">100</span>);  <span class="comment">// 起始</span></div><div class="line">ctx.lineTo(<span class="number">700</span>,<span class="number">700</span>);  <span class="comment">// 终止</span></div><div class="line">ctx.lineTo(<span class="number">100</span>,<span class="number">700</span>);  <span class="comment">// 终止</span></div><div class="line">ctx.closePath();  <span class="comment">// 路径绘制结束</span></div><div class="line"></div><div class="line">ctx.lineWidth = <span class="number">5</span>;  <span class="comment">// 线宽</span></div><div class="line">ctx.strokeStyle = <span class="string">"orange"</span>;  <span class="comment">// 线条颜色</span></div><div class="line">ctx.stroke();  <span class="comment">// 绘制线条</span></div><div class="line"></div><div class="line">ctx.fillStyle = <span class="string">"green"</span>;  <span class="comment">// 填充颜色</span></div><div class="line">ctx.fill();  <span class="comment">// 填充</span></div></pre></td></tr></table></figure>
<h2 id="3-5-绘制弧"><a href="#3-5-绘制弧" class="headerlink" title="3.5 绘制弧"></a>3.5 绘制弧</h2><h3 id="3-5-1-arc"><a href="#3-5-1-arc" class="headerlink" title="3.5.1 arc()"></a>3.5.1 arc()</h3><p>context.arc(<br>  centerx,centery,radius,<br>  startingAngle,endingAngle,<br>  anticlockwise = false<br>);<br>centerx:原点x坐标<br>centery:原点y坐标<br>radius:半径<br>startingAngle:起始弧度(固定位置)<br>endingAngle:结束弧度(固定位置)<br>anticlockwise:绘制方向(默认false 顺时针)</p>
<p><canvas id="canvas5" style="border: 1px solid #bbb;">当前浏览器不支持canvas！</canvas></p>
<script type="text/javascript">
    var canvas5 = document.getElementById("canvas5");
    canvas5.width = 640;
    canvas5.height = 180;
    var ctx = canvas5.getContext('2d');
    ctx.beginPath();
    ctx.arc(80,90,50,0,1.5*Math.PI);
    ctx.lineWidth = 5;
    ctx.strokeStyle = "red";
    ctx.closePath();
    ctx.stroke();
    ctx.beginPath();
    ctx.arc(240,90,50,0,1.5*Math.PI,true);
    ctx.lineWidth = 5;
    ctx.strokeStyle = "blue";
    ctx.stroke();
    ctx.beginPath();
    ctx.arc(400,90,50,0,1.5*Math.PI);
    ctx.fillStyle = "yellow";
    ctx.closePath();
    ctx.fill();
    ctx.beginPath();
    ctx.arc(560,90,50,0,1.5*Math.PI);
    ctx.fillStyle = "yellow";
    ctx.fill();
</script>

<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">ctx.beginPath();</div><div class="line">ctx.arc(<span class="number">80</span>,<span class="number">90</span>,<span class="number">50</span>,<span class="number">0</span>,<span class="number">1.5</span>*<span class="built_in">Math</span>.PI);  <span class="comment">// 顺时针</span></div><div class="line">ctx.lineWidth = <span class="number">5</span>;</div><div class="line">ctx.strokeStyle = <span class="string">"red"</span>;</div><div class="line">ctx.closePath();</div><div class="line">ctx.stroke();</div><div class="line"></div><div class="line">ctx.beginPath();</div><div class="line">ctx.arc(<span class="number">240</span>,<span class="number">90</span>,<span class="number">50</span>,<span class="number">0</span>,<span class="number">1.5</span>*<span class="built_in">Math</span>.PI,<span class="literal">true</span>);  <span class="comment">// 逆时针</span></div><div class="line">ctx.lineWidth = <span class="number">5</span>;</div><div class="line">ctx.strokeStyle = <span class="string">"blue"</span>;</div><div class="line">ctx.stroke();</div><div class="line"></div><div class="line"><span class="comment">//closePath()对fill()没用</span></div><div class="line"></div><div class="line">ctx.beginPath();</div><div class="line">ctx.arc(<span class="number">400</span>,<span class="number">90</span>,<span class="number">50</span>,<span class="number">0</span>,<span class="number">1.5</span>*<span class="built_in">Math</span>.PI);  <span class="comment">// 顺时针</span></div><div class="line">ctx.fillStyle = <span class="string">"yellow"</span>;</div><div class="line">ctx.closePath();</div><div class="line">ctx.fill();</div><div class="line"></div><div class="line">ctx.beginPath();</div><div class="line">ctx.arc(<span class="number">560</span>,<span class="number">90</span>,<span class="number">50</span>,<span class="number">0</span>,<span class="number">1.5</span>*<span class="built_in">Math</span>.PI);  <span class="comment">// 顺时针</span></div><div class="line">ctx.fillStyle = <span class="string">"yellow"</span>;</div><div class="line">ctx.fill();</div></pre></td></tr></table></figure>
<h3 id="3-5-2-arcTo"><a href="#3-5-2-arcTo" class="headerlink" title="3.5.2 arcTo()"></a>3.5.2 arcTo()</h3><p>context.arcTo( x1 , y1 , x2 , y2 ,radius );<br><img src="/images/17424(2).png" style="width: 500px;"><br>绘制起点是( x0, y0 )，但是( x0, y0 )不一定是切点，arcTo 方法在( x0, y0 )( x1, y1 )和( x1, y1 )( x2, y2 )两条线段上寻找切点，绘制圆弧（圆弧终止于( x1, y1 )( x2, y2 )这条线段的切点），而且，( x2, y2 )不一定是所绘制圆弧的终点，只是作为辅助线的结束位置，其中( x0, y0 )是上一个点的位置。</p>
<h3 id="3-5-3-二次贝塞尔曲线quadraticCurveTo"><a href="#3-5-3-二次贝塞尔曲线quadraticCurveTo" class="headerlink" title="3.5.3 二次贝塞尔曲线quadraticCurveTo()"></a>3.5.3 二次贝塞尔曲线quadraticCurveTo()</h3><p>context.moveTo( x0 , y0 );<br>context.quadraticCurveTo( x1, y1, x2, y2 );</p>
<p>(x0,y0)起始点<br>(x1,y1)控制点<br>(x2,y2)终止点<br>圆弧起于起始点，终于终止点，与起始点、终止点与控制点的连线相切<br>参考以下demo便于理解<br><a href="https://www.rgraph.net/blog/an-example-of-the-html5-canvas-quadraticcurveto-function.html" target="_blank" rel="external">quadraticCurveTo demo</a></p>
<h3 id="3-5-4-三次贝塞尔曲线bezierCurveTo"><a href="#3-5-4-三次贝塞尔曲线bezierCurveTo" class="headerlink" title="3.5.4 三次贝塞尔曲线bezierCurveTo()"></a>3.5.4 三次贝塞尔曲线bezierCurveTo()</h3><p>context.moveTo( x0 , y0 );<br>context.bezierCurveTo( x1, y1, x2, y2, x3, y3  );</p>
<p>(x0,y0)起始点<br>(x1,y1)控制点1<br>(x1,y1)控制点2<br>(x3,y3)终止点</p>
<p>三次贝塞尔曲线比二次贝塞尔曲线多了一个控制点，所有更加灵活<br>参考以下demo便于理解<br><a href="http://blogs.sitepointstatic.com/examples/tech/canvas-curves/bezier-curve.html" target="_blank" rel="external">bezierCurveTo demo</a><br><a href="http://www.j--d.com/bezier" target="_blank" rel="external">quadraticCurveTo or bezierCurveTo</a></p>
<h2 id="3-6-绘制矩形"><a href="#3-6-绘制矩形" class="headerlink" title="3.6 绘制矩形"></a>3.6 绘制矩形</h2><p>ctx.rect(x,y,width,,height);  // 绘制矩形路径<br>ctx.fillRect(x,y,width,height);  //  绘制填充矩形<br>ctx.strokeRect(x,y,width,height);  // 绘制边框矩形</p>
<p><canvas id="canvas6" style="border: 1px solid #bbb;">当前浏览器不支持canvas！</canvas></p>
<script type="text/javascript">
    var canvas6 = document.getElementById("canvas6");
    canvas6.width = 320;
    canvas6.height = 180;
    var ctx = canvas6.getContext('2d');
    ctx.beginPath();
    ctx.rect(20,20,80,140);
    ctx.stroke();
    ctx.beginPath();
    ctx.fillRect(120,20,80,140);
    ctx.beginPath();
    ctx.strokeRect(220,20,80,140);
</script>

<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">ctx.beginPath();</div><div class="line">ctx.rect(<span class="number">20</span>,<span class="number">20</span>,<span class="number">80</span>,<span class="number">140</span>);</div><div class="line">ctx.stroke();</div><div class="line"></div><div class="line">ctx.beginPath();</div><div class="line">ctx.fillRect(<span class="number">120</span>,<span class="number">20</span>,<span class="number">80</span>,<span class="number">140</span>);</div><div class="line"></div><div class="line">ctx.beginPath();</div><div class="line">ctx.strokeRect(<span class="number">220</span>,<span class="number">20</span>,<span class="number">80</span>,<span class="number">140</span>);</div></pre></td></tr></table></figure>
<h2 id="3-7-绘制文字"><a href="#3-7-绘制文字" class="headerlink" title="3.7 绘制文字"></a>3.7 绘制文字</h2><h3 id="3-7-1-font"><a href="#3-7-1-font" class="headerlink" title="3.7.1 font"></a>3.7.1 font</h3><p>ctx.font = font-style font-variant font-weight font-size font-family</p>
<p>font-style: normal  ( Default ), italic  ( 斜体字 ), oblique ( 倾斜字体 )</p>
<p>font-variant: normal ( Default ), small-caps (应用于小写字母，显示小型的大写字母)</p>
<p>font-weight: lighter, normal ( Default ), bold, bolder,<br>100 , 200 , 300 , 400 (normal) ,<br>500 , 600 , 700 (bold) ,<br>800 , 900</p>
<p>font-size: 20px ( Default ), 2em, 150%,<br>xx-small, x-small,<br>medium, large,<br>x-large, xx-large</p>
<p>font-family: 设置多种字体备选, 支持 @font-face, Web安全字体</p>
<h3 id="3-7-2-textAlign"><a href="#3-7-2-textAlign" class="headerlink" title="3.7.2 textAlign"></a>3.7.2 textAlign</h3><p>ctx.textAlign = left, center, right</p>
<h3 id="3-7-3-textBaseline"><a href="#3-7-3-textBaseline" class="headerlink" title="3.7.3 textBaseline"></a>3.7.3 textBaseline</h3><p>ctx.textBaseline =  top, middle, bottom,<br>alphabetic (Default), ideographic, hanging<br>后面三个分别表示拉丁文的垂直方向基准线、日语中文等方块字的垂直方向基准线、印度文的垂直方向基准线</p>
<h3 id="3-7-4-fillText"><a href="#3-7-4-fillText" class="headerlink" title="3.7.4 fillText()"></a>3.7.4 fillText()</h3><p>ctx.fillText( string , x , y , [maxlen] );<br>string:需要显示的文字<br>x,y:位置<br>maxlen:文字渲染的最大宽度</p>
<h3 id="3-7-5-strokeText"><a href="#3-7-5-strokeText" class="headerlink" title="3.7.5 strokeText()"></a>3.7.5 strokeText()</h3><p>ctx.strokeText( string , x , y  , [maxlen] );<br>同上</p>
<h3 id="3-7-6-measureText-width"><a href="#3-7-6-measureText-width" class="headerlink" title="3.7.6 measureText().width"></a>3.7.6 measureText().width</h3><p>文本的度量<br>ctx.measureText( string ).width</p>
<h3 id="3-7-7-demo"><a href="#3-7-7-demo" class="headerlink" title="3.7.7 demo"></a>3.7.7 demo</h3><p><canvas id="canvas7" style="border: 1px solid #bbb;">当前浏览器不支持canvas！</canvas></p>
<script type="text/javascript">
    var canvas7 = document.getElementById("canvas7");
    canvas7.width = 640;
    canvas7.height = 360;
    var ctx = canvas7.getContext('2d');
    ctx.fillStyle = "#f00";
    ctx.font = "30px bold Arial";
    ctx.fillText("CANVAS!",30,30);
    var w = ctx.measureText("CANVAS!").width;
    ctx.fillText("以上字符宽度为" + w + "px",30,60);
    ctx.strokeText("CANVAS!",30,90,100);
    ctx.textAlign = "left";
    ctx.fillText("textAlign:left",320,120);
    ctx.textAlign = "center";
    ctx.fillText("textAlign:center",320,150);
    ctx.textAlign = "right";
    ctx.fillText("textAlign:right",320,180);
    ctx.strokeStyle = "#bbb";
    ctx.moveTo(320,90);
    ctx.lineTo(320,180);
    ctx.stroke();
    ctx.textAlign = "center";
    ctx.textBaseline = "top";
    ctx.fillText("你好！textBaseline:top",320,210);
    ctx.moveTo(0,210);
    ctx.lineTo(640,210);
    ctx.stroke();
    ctx.textBaseline = "middle";
    ctx.fillText("你好！textBaseline:middle",320,270);
    ctx.moveTo(0,270);
    ctx.lineTo(640,270);
    ctx.stroke();
    ctx.textBaseline = "bottom";
    ctx.fillText("你好！textBaseline:bottom",320,330);
    ctx.moveTo(0,330);
    ctx.lineTo(640,330);
    ctx.stroke();
</script>

<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">ctx.fillStyle = <span class="string">"#f00"</span>;</div><div class="line">ctx.font = <span class="string">"30px bold Arial"</span>;</div><div class="line"></div><div class="line">ctx.fillText(<span class="string">"CANVAS!"</span>,<span class="number">30</span>,<span class="number">30</span>);</div><div class="line"><span class="keyword">var</span> w = ctx.measureText(<span class="string">"CANVAS!"</span>).width;</div><div class="line">ctx.fillText(<span class="string">"以上字符宽度为"</span> + w + <span class="string">"px"</span>,<span class="number">30</span>,<span class="number">60</span>);</div><div class="line">ctx.strokeText(<span class="string">"CANVAS!"</span>,<span class="number">30</span>,<span class="number">90</span>,<span class="number">100</span>);</div><div class="line"></div><div class="line">ctx.textAlign = <span class="string">"left"</span>;</div><div class="line">ctx.fillText(<span class="string">"textAlign:left"</span>,<span class="number">320</span>,<span class="number">120</span>);</div><div class="line"></div><div class="line">ctx.textAlign = <span class="string">"center"</span>;</div><div class="line">ctx.fillText(<span class="string">"textAlign:center"</span>,<span class="number">320</span>,<span class="number">150</span>);</div><div class="line"></div><div class="line">ctx.textAlign = <span class="string">"right"</span>;</div><div class="line">ctx.fillText(<span class="string">"textAlign:right"</span>,<span class="number">320</span>,<span class="number">180</span>);</div><div class="line"></div><div class="line"><span class="comment">// 辅助线</span></div><div class="line">ctx.strokeStyle = <span class="string">"#bbb"</span>;</div><div class="line">ctx.moveTo(<span class="number">320</span>,<span class="number">90</span>);</div><div class="line">ctx.lineTo(<span class="number">320</span>,<span class="number">180</span>);</div><div class="line">ctx.stroke();</div><div class="line"></div><div class="line"></div><div class="line">ctx.textAlign = <span class="string">"center"</span>;</div><div class="line">ctx.textBaseline = <span class="string">"top"</span>;</div><div class="line">ctx.fillText(<span class="string">"你好！textBaseline:top"</span>,<span class="number">320</span>,<span class="number">210</span>);</div><div class="line">ctx.moveTo(<span class="number">0</span>,<span class="number">210</span>);</div><div class="line">ctx.lineTo(<span class="number">640</span>,<span class="number">210</span>);</div><div class="line">ctx.stroke();</div><div class="line"></div><div class="line">ctx.textBaseline = <span class="string">"middle"</span>;</div><div class="line">ctx.fillText(<span class="string">"你好！textBaseline:middle"</span>,<span class="number">320</span>,<span class="number">270</span>);</div><div class="line">ctx.moveTo(<span class="number">0</span>,<span class="number">270</span>);</div><div class="line">ctx.lineTo(<span class="number">640</span>,<span class="number">270</span>);</div><div class="line">ctx.stroke();</div><div class="line"></div><div class="line">ctx.textBaseline = <span class="string">"bottom"</span>;</div><div class="line">ctx.fillText(<span class="string">"你好！textBaseline:bottom"</span>,<span class="number">320</span>,<span class="number">330</span>);</div><div class="line">ctx.moveTo(<span class="number">0</span>,<span class="number">330</span>);</div><div class="line">ctx.lineTo(<span class="number">640</span>,<span class="number">330</span>);</div><div class="line">ctx.stroke();</div></pre></td></tr></table></figure>
<hr>
<h1 id="4-样式"><a href="#4-样式" class="headerlink" title="4.样式"></a>4.样式</h1><h2 id="4-1-lineCap"><a href="#4-1-lineCap" class="headerlink" title="4.1 lineCap"></a>4.1 lineCap</h2><p>lineCap = “butt”(defalut)|”round”|”square” 标准型，圆形，方形<br>lineCap只在线段的两端处有作用，在线段的连接处没用</p>
<p><canvas id="canvas8" style="border: 1px solid #bbb;">当前浏览器不支持canvas！</canvas></p>
<script type="text/javascript">
    var canvas8 = document.getElementById("canvas8");
    canvas8.width = 320;
    canvas8.height = 180;
    var ctx = canvas8.getContext('2d');
    ctx.lineWidth = 25;
    ctx.strokeStyle = "rgba(255,0,0,.5)";
    ctx.beginPath();
    ctx.moveTo(20,30);
    ctx.lineTo(300,30);
    ctx.lineCap = "butt";
    ctx.stroke();
    ctx.beginPath();
    ctx.moveTo(20,90);
    ctx.lineTo(300,90);
    ctx.lineCap = "round";
    ctx.stroke();
    ctx.beginPath();
    ctx.moveTo(20,150);
    ctx.lineTo(300,150);
    ctx.lineCap = "square";
    ctx.stroke();
    ctx.beginPath();
    ctx.lineWidth = 1;
    ctx.moveTo(20,10);
    ctx.lineTo(20,170);
    ctx.moveTo(300,10);
    ctx.lineTo(300,170);
    ctx.stroke();
</script>

<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">ctx.lineWidth = <span class="number">25</span>;</div><div class="line">ctx.strokeStyle = <span class="string">"rgba(255,0,0,.5)"</span>;</div><div class="line"></div><div class="line"><span class="comment">// butt(defalut)</span></div><div class="line">ctx.beginPath();</div><div class="line">ctx.moveTo(<span class="number">20</span>,<span class="number">30</span>);</div><div class="line">ctx.lineTo(<span class="number">300</span>,<span class="number">30</span>);</div><div class="line">ctx.lineCap = <span class="string">"butt"</span>;</div><div class="line">ctx.stroke();</div><div class="line"></div><div class="line"><span class="comment">// round</span></div><div class="line">ctx.beginPath();</div><div class="line">ctx.moveTo(<span class="number">20</span>,<span class="number">90</span>);</div><div class="line">ctx.lineTo(<span class="number">300</span>,<span class="number">90</span>);</div><div class="line">ctx.lineCap = <span class="string">"round"</span>;</div><div class="line">ctx.stroke();</div><div class="line"></div><div class="line"><span class="comment">// square</span></div><div class="line">ctx.beginPath();</div><div class="line">ctx.moveTo(<span class="number">20</span>,<span class="number">150</span>);</div><div class="line">ctx.lineTo(<span class="number">300</span>,<span class="number">150</span>);</div><div class="line">ctx.lineCap = <span class="string">"square"</span>;</div><div class="line">ctx.stroke();</div><div class="line"></div><div class="line"><span class="comment">// 基线</span></div><div class="line">ctx.beginPath();</div><div class="line">ctx.lineWidth = <span class="number">1</span>;</div><div class="line">ctx.moveTo(<span class="number">20</span>,<span class="number">10</span>);</div><div class="line">ctx.lineTo(<span class="number">20</span>,<span class="number">170</span>);</div><div class="line">ctx.moveTo(<span class="number">300</span>,<span class="number">10</span>);</div><div class="line">ctx.lineTo(<span class="number">300</span>,<span class="number">170</span>);</div><div class="line">ctx.stroke();</div></pre></td></tr></table></figure>
<h2 id="4-2-lineJoin"><a href="#4-2-lineJoin" class="headerlink" title="4.2 lineJoin"></a>4.2 lineJoin</h2><p>lineJoin是线条相交时呈现出来的效果<br>lineJoin = “miter”(defalut)|”bevel”|”round”</p>
<p><canvas id="canvas9" style="border: 1px solid #bbb;">当前浏览器不支持canvas！</canvas></p>
<script type="text/javascript">
    var canvas9 = document.getElementById("canvas9");
    canvas9.width = 320;
    canvas9.height = 180;
    var ctx = canvas9.getContext('2d');
    ctx.lineWidth = 10;
    ctx.beginPath();
    ctx.moveTo(10,20);
    ctx.lineTo(50,160);
    ctx.lineTo(90,20);
    ctx.lineJoin = "miter";
    ctx.stroke();
    ctx.beginPath();
    ctx.moveTo(110,20);
    ctx.lineTo(150,160);
    ctx.lineTo(190,20);
    ctx.lineJoin = "bevel";
    ctx.stroke();
    ctx.beginPath();
    ctx.moveTo(210,20);
    ctx.lineTo(250,160);
    ctx.lineTo(290,20);
    ctx.lineJoin = "round";
    ctx.stroke();
</script>

<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">ctx.lineWidth = <span class="number">10</span>;</div><div class="line"></div><div class="line">ctx.beginPath();</div><div class="line">ctx.moveTo(<span class="number">10</span>,<span class="number">20</span>);</div><div class="line">ctx.lineTo(<span class="number">50</span>,<span class="number">160</span>);</div><div class="line">ctx.lineTo(<span class="number">90</span>,<span class="number">20</span>);</div><div class="line">ctx.lineJoin = <span class="string">"miter"</span>;</div><div class="line">ctx.stroke();</div><div class="line"></div><div class="line">ctx.beginPath();</div><div class="line">ctx.moveTo(<span class="number">110</span>,<span class="number">20</span>);</div><div class="line">ctx.lineTo(<span class="number">150</span>,<span class="number">160</span>);</div><div class="line">ctx.lineTo(<span class="number">190</span>,<span class="number">20</span>);</div><div class="line">ctx.lineJoin = <span class="string">"bevel"</span>;</div><div class="line">ctx.stroke();</div><div class="line"></div><div class="line">ctx.beginPath();</div><div class="line">ctx.moveTo(<span class="number">210</span>,<span class="number">20</span>);</div><div class="line">ctx.lineTo(<span class="number">250</span>,<span class="number">160</span>);</div><div class="line">ctx.lineTo(<span class="number">290</span>,<span class="number">20</span>);</div><div class="line">ctx.lineJoin = <span class="string">"round"</span>;</div><div class="line">ctx.stroke();</div></pre></td></tr></table></figure>
<p>miterLimit<br>miterLimit = 10(默认值);//只有当linejoin的值为miter时才有效，值越大，允许角度越尖锐<br><img src="/images/17424(1).png" style="width: 500px;"></p>
<p><canvas id="canvas10" style="border: 1px solid #bbb;">当前浏览器不支持canvas！</canvas></p>
<script type="text/javascript">
    var canvas10 = document.getElementById("canvas10");
    canvas10.width = 320;
    canvas10.height = 180;
    var ctx = canvas10.getContext('2d');
    ctx.lineWidth = 10;
    ctx.beginPath();
    ctx.moveTo(10,30);
    ctx.lineTo(250,50);
    ctx.lineTo(10,70);
    ctx.lineJoin = "miter";
    ctx.stroke();
    ctx.beginPath();
    ctx.moveTo(10,120);
    ctx.lineTo(250,140);
    ctx.lineTo(10,160);
    ctx.lineJoin = "miter";
    ctx.miterLimit = 30;
    ctx.stroke();
</script>

<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">ctx.lineWidth = <span class="number">10</span>;</div><div class="line"></div><div class="line">ctx.beginPath();</div><div class="line">ctx.moveTo(<span class="number">10</span>,<span class="number">30</span>);</div><div class="line">ctx.lineTo(<span class="number">250</span>,<span class="number">50</span>);</div><div class="line">ctx.lineTo(<span class="number">10</span>,<span class="number">70</span>);</div><div class="line">ctx.lineJoin = <span class="string">"miter"</span>;</div><div class="line">ctx.stroke();</div><div class="line"></div><div class="line">ctx.beginPath();</div><div class="line">ctx.moveTo(<span class="number">10</span>,<span class="number">120</span>);</div><div class="line">ctx.lineTo(<span class="number">250</span>,<span class="number">140</span>);</div><div class="line">ctx.lineTo(<span class="number">10</span>,<span class="number">160</span>);</div><div class="line">ctx.lineJoin = <span class="string">"miter"</span>;</div><div class="line">ctx.miterLimit = <span class="number">30</span>;</div><div class="line">ctx.stroke();</div></pre></td></tr></table></figure>
<h2 id="4-3-图形变换"><a href="#4-3-图形变换" class="headerlink" title="4.3 图形变换"></a>4.3 图形变换</h2><p>位移 translate( x , y )<br>x 是左右偏移量，y 是上下偏移量</p>
<p>旋转 rotate( rot )<br>rot = deg/180*Math.PI<br>它是顺时针方向的，以弧度为单位的值</p>
<p>缩放 scale( sx , sy )<br>sx,sy 分别是横轴和纵轴的缩放因子，它们都必须是正值<br>注：变换是叠加的</p>
<p>变形 setTransform(m11, m12, m21, m22, dx, dy)<br>类似css matirx<br>setTransform可忽略之前的变换（translate、rotate、scale）<br>m11：水平方向的缩放(1)<br>m12：水平方向的倾斜(0)<br>m21：竖直方向的倾斜(0)<br>m22：竖直方向的缩放(1)<br>dx：水平方向的移动(0)<br>dy：竖直方向的移动(0)</p>
<p>可以用save()和restore()储存、还原canvas环境<br>类似css transform 属性应用先后不同，效果不同</p>
<p><canvas id="canvas11" style="border: 1px solid #bbb;">当前浏览器不支持canvas！</canvas></p>
<script type="text/javascript">
    var canvas11 = document.getElementById("canvas11");
    canvas11.width = 320;
    canvas11.height = 180;
    var ctx = canvas11.getContext('2d');
    ctx.save();
    ctx.fillStyle = "red";
    ctx.translate(20,20);
    ctx.fillRect(0,0,100,100);
    ctx.fillStyle = "green";
    ctx.translate(40,40);
    ctx.fillRect(0,0,100,100);
    ctx.restore();
    ctx.save();
    ctx.fillStyle = "red";
    ctx.translate(180,20);
    ctx.fillRect(0,0,100,100);
    ctx.restore();
    ctx.save();
    ctx.fillStyle = "green";
    ctx.translate(200,40);
    ctx.fillRect(0,0,100,100);
    ctx.restore();
</script>

<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 第一个环境</span></div><div class="line">ctx.save();</div><div class="line">ctx.fillStyle = <span class="string">"red"</span>;</div><div class="line">ctx.translate(<span class="number">20</span>,<span class="number">20</span>);</div><div class="line">ctx.fillRect(<span class="number">0</span>,<span class="number">0</span>,<span class="number">100</span>,<span class="number">100</span>);</div><div class="line">ctx.fillStyle = <span class="string">"green"</span>;</div><div class="line">ctx.translate(<span class="number">40</span>,<span class="number">40</span>);</div><div class="line">ctx.fillRect(<span class="number">0</span>,<span class="number">0</span>,<span class="number">100</span>,<span class="number">100</span>);</div><div class="line">ctx.restore();</div><div class="line"></div><div class="line"><span class="comment">// 第二个环境</span></div><div class="line">ctx.save();</div><div class="line">ctx.fillStyle = <span class="string">"red"</span>;</div><div class="line">ctx.translate(<span class="number">180</span>,<span class="number">20</span>);</div><div class="line">ctx.fillRect(<span class="number">0</span>,<span class="number">0</span>,<span class="number">100</span>,<span class="number">100</span>);</div><div class="line">ctx.restore();</div><div class="line"></div><div class="line"><span class="comment">// 第三个环境</span></div><div class="line">ctx.save();</div><div class="line">ctx.fillStyle = <span class="string">"green"</span>;</div><div class="line">ctx.translate(<span class="number">200</span>,<span class="number">40</span>);</div><div class="line">ctx.fillRect(<span class="number">0</span>,<span class="number">0</span>,<span class="number">100</span>,<span class="number">100</span>);</div><div class="line">ctx.restore();</div></pre></td></tr></table></figure>
<h2 id="4-4-渐变"><a href="#4-4-渐变" class="headerlink" title="4.4 渐变"></a>4.4 渐变</h2><h3 id="4-4-1-线性渐变-createLinearGradient"><a href="#4-4-1-线性渐变-createLinearGradient" class="headerlink" title="4.4.1 线性渐变 createLinearGradient()"></a>4.4.1 线性渐变 createLinearGradient()</h3><p>createLinearGradient( x1 , y1, x2 , y2 );<br>渐变的起点 (x1,y1) 与终点 (x2,y2)</p>
<p><canvas id="canvas12" style="border: 1px solid #bbb;">当前浏览器不支持canvas！</canvas></p>
<script type="text/javascript">
    var canvas12 = document.getElementById("canvas12");
    canvas12.width = 320;
    canvas12.height = 180;
    var ctx = canvas12.getContext('2d');
    var grd = ctx.createLinearGradient(0,0,320,180);
    grd.addColorStop(0.0,"red");
    grd.addColorStop(0.25,"green");
    grd.addColorStop(0.5,"blue");
    grd.addColorStop(0.75,"white");
    grd.addColorStop(1.0,"black");
    ctx.fillStyle = grd;
    ctx.fillRect(0,0,320,180);
</script>

<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> grd = ctx.createLinearGradient(<span class="number">0</span>,<span class="number">0</span>,<span class="number">320</span>,<span class="number">180</span>);</div><div class="line">grd.addColorStop(<span class="number">0.0</span>,<span class="string">"red"</span>);</div><div class="line">grd.addColorStop(<span class="number">0.25</span>,<span class="string">"green"</span>);</div><div class="line">grd.addColorStop(<span class="number">0.5</span>,<span class="string">"blue"</span>);</div><div class="line">grd.addColorStop(<span class="number">0.75</span>,<span class="string">"white"</span>);</div><div class="line">grd.addColorStop(<span class="number">1.0</span>,<span class="string">"black"</span>);</div><div class="line">ctx.fillStyle = grd;</div><div class="line">ctx.fillRect(<span class="number">0</span>,<span class="number">0</span>,<span class="number">320</span>,<span class="number">180</span>);</div></pre></td></tr></table></figure>
<h3 id="4-4-2-径向渐变-createRadialGradient"><a href="#4-4-2-径向渐变-createRadialGradient" class="headerlink" title="4.4.2 径向渐变 createRadialGradient()"></a>4.4.2 径向渐变 createRadialGradient()</h3><p>createRadialGradient(x1, y1, r1, x2, y2, r2)<br>前三个定义一个以 (x1,y1) 为原点，半径为 r1 的圆，后三个参数则定义另一个以 (x2,y2) 为原点，半径为 r2 的圆</p>
<p><canvas id="canvas13" style="border: 1px solid #bbb;">当前浏览器不支持canvas！</canvas></p>
<script type="text/javascript">
    var canvas13 = document.getElementById("canvas13");
    canvas13.width = 320;
    canvas13.height = 180;
    var ctx = canvas13.getContext('2d');
    var grd = ctx.createRadialGradient(160,90,0,160,90,160);
    grd.addColorStop(0.0,"black");
    grd.addColorStop(0.25,"red");
    grd.addColorStop(0.5,"yellow");
    grd.addColorStop(0.75,"blue");
    grd.addColorStop(1.0,"white");
    ctx.fillStyle = grd;
    ctx.fillRect(0,0,320,180);
</script>

<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> grd = ctx.createRadialGradient(<span class="number">160</span>,<span class="number">90</span>,<span class="number">0</span>,<span class="number">160</span>,<span class="number">90</span>,<span class="number">160</span>);</div><div class="line">grd.addColorStop(<span class="number">0.0</span>,<span class="string">"black"</span>);</div><div class="line">grd.addColorStop(<span class="number">0.25</span>,<span class="string">"red"</span>);</div><div class="line">grd.addColorStop(<span class="number">0.5</span>,<span class="string">"yellow"</span>);</div><div class="line">grd.addColorStop(<span class="number">0.75</span>,<span class="string">"blue"</span>);</div><div class="line">grd.addColorStop(<span class="number">1.0</span>,<span class="string">"white"</span>);</div><div class="line">ctx.fillStyle = grd;</div><div class="line">ctx.fillRect(<span class="number">0</span>,<span class="number">0</span>,<span class="number">320</span>,<span class="number">180</span>);</div></pre></td></tr></table></figure>
<h2 id="4-5-图案样式"><a href="#4-5-图案样式" class="headerlink" title="4.5 图案样式"></a>4.5 图案样式</h2><p>createPattern(img/canvas/video, repeat-style)<br>repeat-style:<br>no-repeat 不重复<br>repeat-x：X轴方向重复<br>repeat-y：Y轴方向重复<br>repeat：X，Y轴方向都重复</p>
<p><canvas id="canvas14" style="border: 1px solid #bbb;">当前浏览器不支持canvas！</canvas></p>
<script type="text/javascript">
    var canvas14 = document.getElementById("canvas14");
    canvas14.width = 320;
    canvas14.height = 180;
    var ctx = canvas14.getContext('2d');
    var img = new Image();
    img.src = "/images/avatar.png";
    img.onload = function(){
        var ptrn = ctx.createPattern(img,'no-repeat');
        ctx.fillStyle = ptrn;
        ctx.fillRect(0,0,320,180);
    };
</script>

<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> img = <span class="keyword">new</span> Image();</div><div class="line">    img.src = <span class="string">"/images/avatar.png"</span>;</div><div class="line">    img.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">var</span> ptrn = ctx.createPattern(img,<span class="string">'no-repeat'</span>);</div><div class="line">        ctx.fillStyle = ptrn;</div><div class="line">        ctx.fillRect(<span class="number">0</span>,<span class="number">0</span>,<span class="number">320</span>,<span class="number">180</span>);</div><div class="line">    &#125;;</div></pre></td></tr></table></figure>
<h2 id="4-6-阴影"><a href="#4-6-阴影" class="headerlink" title="4.6 阴影"></a>4.6 阴影</h2><p>ctx.shadowColor  // 阴影颜色<br>ctx.shadowOffsetX  // X偏移值<br>ctx.shadowOffsetY  // Y偏移值<br>ctx.shadowBlur  // 模糊度</p>
<p><canvas id="canvas15" style="border: 1px solid #bbb;">当前浏览器不支持canvas！</canvas></p>
<script type="text/javascript">
    var canvas15 = document.getElementById("canvas15");
    canvas15.width = 320;
    canvas15.height = 180;
    var ctx = canvas15.getContext('2d');
    ctx.shadowColor = "#bbb";
    ctx.shadowOffsetX = 10;
    ctx.shadowOffsetY = 10;
    ctx.shadowBlur = 5;
    ctx.fillRect(30,30,100,120);
    ctx.shadowOffsetX = -5;
    ctx.shadowOffsetY = -5;
    ctx.shadowBlur = 10;
    ctx.fillRect(190,30,100,120);
</script>

<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">ctx.shadowColor = <span class="string">"#bbb"</span>;</div><div class="line">ctx.shadowOffsetX = <span class="number">10</span>;</div><div class="line">ctx.shadowOffsetY = <span class="number">10</span>;</div><div class="line">ctx.shadowBlur = <span class="number">5</span>;</div><div class="line">ctx.fillRect(<span class="number">30</span>,<span class="number">30</span>,<span class="number">100</span>,<span class="number">120</span>);</div><div class="line"></div><div class="line">ctx.shadowOffsetX = <span class="number">-5</span>;</div><div class="line">ctx.shadowOffsetY = <span class="number">-5</span>;</div><div class="line">ctx.shadowBlur = <span class="number">10</span>;</div><div class="line">ctx.fillRect(<span class="number">190</span>,<span class="number">30</span>,<span class="number">100</span>,<span class="number">120</span>);</div></pre></td></tr></table></figure>
<h2 id="4-7-globalAlpha（透明度）"><a href="#4-7-globalAlpha（透明度）" class="headerlink" title="4.7 globalAlpha（透明度）"></a>4.7 globalAlpha（透明度）</h2><p>ctx.globalAlpha = 1; (Default)</p>
<h2 id="4-8-globalCompositeOperation（图形重叠效果）"><a href="#4-8-globalCompositeOperation（图形重叠效果）" class="headerlink" title="4.8 globalCompositeOperation（图形重叠效果）"></a>4.8 globalCompositeOperation（图形重叠效果）</h2><p><img src="/images/17424(3).png" style="width: 690px;"><br>图片来自MDN</p>
<p><canvas id="canvas16" style="border: 1px solid #bbb;">当前浏览器不支持canvas！</canvas></p>
<p></p><p id="canvas16-composition"><br>    <a href="javascript:void(0)" target="_blank" rel="external">source-over</a><br>    <a href="javascript:void(0)" target="_blank" rel="external">source-in</a><br>    <a href="javascript:void(0)" target="_blank" rel="external">source-out</a><br>    <a href="javascript:void(0)" target="_blank" rel="external">source-atop</a><br>    <a href="javascript:void(0)" target="_blank" rel="external">destination-over</a><br>    <a href="javascript:void(0)" target="_blank" rel="external">destination-in</a><br>    <a href="javascript:void(0)" target="_blank" rel="external">destination-out</a><br>    <a href="javascript:void(0)" target="_blank" rel="external">destination-atop</a><br>    <a href="javascript:void(0)" target="_blank" rel="external">lighter</a><br>    <a href="javascript:void(0)" target="_blank" rel="external">copy</a><br>    <a href="javascript:void(0)" target="_blank" rel="external">xor</a><br></p><p></p>
<script>
    window.onload = function () {
        var a = document.getElementById('canvas16-composition').getElementsByTagName('a');
        for (let i = 0; i < a.length; i++) {
            a[i].addEventListener("click",function () {
                drawComposition(this.text);
                return false;
            });
        }
        drawComposition("source-over");
    }

    function drawComposition(composition) {
        var canvas16 = document.getElementById('canvas16');
        canvas16.width = 1024;
        canvas16.height = 400;
        var ctx = canvas16.getContext('2d');
        ctx.clearRect(0, 0, canvas16.width, canvas16.height);
        ctx.save();
        ctx.font = "30px bold Arial";
        ctx.textAlign = "center";
        ctx.textBaseline = "middle";
        ctx.fillStyle = "#058";
        ctx.fillText("globalCompositionOperation:" + composition, canvas16.width/2, 20);
        ctx.restore();
        ctx.beginPath();
        ctx.moveTo(0, 50);
        ctx.lineTo(canvas16.width, 50);
        ctx.lineTo(canvas16.width, canvas16.height);
        ctx.lineTo(0, canvas16.height);
        ctx.closePath();
        ctx.clip();
        ctx.fillStyle = "blue";
        ctx.fillRect(500, 175, 200, 200);
        ctx.globalCompositeOperation = composition;
        ctx.beginPath();
        ctx.moveTo(500, 100);
        ctx.lineTo(350, 250);
        ctx.lineTo(650, 250);
        ctx.closePath();
        ctx.fillStyle = "red";
        ctx.fill();
    }
</script>

<h2 id="4-9-clip-剪切区域"><a href="#4-9-clip-剪切区域" class="headerlink" title="4.9 clip() 剪切区域"></a>4.9 clip() 剪切区域</h2><p>使用 clip() 方法来创建一个新的裁切路径。默认情况下，canvas 有一个与它自身一样大的裁切路径（也就是没有裁切效果）<br>它的作用是遮罩，用来隐藏不需要的部分然后将上面路径剪切作为当前绘制环境</p>
<p><canvas id="canvas17" style="border: 1px solid #bbb;">当前浏览器不支持canvas！</canvas></p>
<script type="text/javascript">
    var canvas17 = document.getElementById("canvas17");
    canvas17.width = 320;
    canvas17.height = 320;
    var ctx = canvas17.getContext('2d');
    ctx.beginPath();
    ctx.fillStyle = "#000";
    ctx.fillRect(0,0,canvas17.width,canvas17.height);
    ctx.beginPath();
    ctx.arc(canvas17.width/2,canvas17.height/2,canvas17.height/2,0,2*Math.PI);
    var grd = ctx.createLinearGradient(canvas17.width/2,0,canvas17.width/2,canvas17.height*2);
    grd.addColorStop(0.0,"#058");
    grd.addColorStop(1.0,"#fff");
    ctx.fillStyle = grd;
    ctx.fill();
    ctx.clip();
    for (let i=0;i<50;i++){
        ctx.save();
        ctx.fillStyle = "#fff";
        ctx.translate(Math.floor(Math.random()*canvas17.width),Math.floor(Math.random()*canvas17.height));
        drawStar(ctx,Math.floor(Math.random()*6)+2);
        ctx.restore();
    }
    function drawStar(ctx,r){
        ctx.save();
        ctx.beginPath()
        ctx.moveTo(r,0);
        for (var i=0;i<9;i++){
            ctx.rotate(Math.PI/5);
            if(i%2 == 0) {
              ctx.lineTo((r/0.525731)*0.200811,0);
            } else {
              ctx.lineTo(r,0);
            }
        }
        ctx.closePath();
        ctx.fill();
        ctx.restore();
    }
</script>

<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 遮罩</span></div><div class="line">ctx.beginPath();</div><div class="line">ctx.fillStyle = <span class="string">"#000"</span>;</div><div class="line">ctx.fillRect(<span class="number">0</span>,<span class="number">0</span>,canvas17.width,canvas17.height);</div><div class="line"></div><div class="line"><span class="comment">// 背景</span></div><div class="line">ctx.beginPath();</div><div class="line">ctx.arc(canvas17.width/<span class="number">2</span>,canvas17.height/<span class="number">2</span>,canvas17.height/<span class="number">2</span>,<span class="number">0</span>,<span class="number">2</span>*<span class="built_in">Math</span>.PI);</div><div class="line"><span class="keyword">var</span> grd = ctx.createLinearGradient(canvas17.width/<span class="number">2</span>,<span class="number">0</span>,canvas17.width/<span class="number">2</span>,canvas17.height*<span class="number">2</span>);</div><div class="line">grd.addColorStop(<span class="number">0.0</span>,<span class="string">"#058"</span>);</div><div class="line">grd.addColorStop(<span class="number">1.0</span>,<span class="string">"#fff"</span>);</div><div class="line">ctx.fillStyle = grd;</div><div class="line">ctx.fill();</div><div class="line">ctx.clip();</div><div class="line"></div><div class="line"><span class="comment">// 星星</span></div><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;<span class="number">50</span>;i++)&#123;</div><div class="line">    ctx.save();</div><div class="line">    ctx.fillStyle = <span class="string">"#fff"</span>;</div><div class="line">    ctx.translate(<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random()*canvas17.width),<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random()*canvas17.height));</div><div class="line">    drawStar(ctx,<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random()*<span class="number">6</span>)+<span class="number">2</span>);</div><div class="line">    ctx.restore();</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">drawStar</span>(<span class="params">ctx,r</span>)</span>&#123;</div><div class="line">    ctx.save();</div><div class="line">    ctx.beginPath()</div><div class="line">    ctx.moveTo(r,<span class="number">0</span>);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">9</span>;i++)&#123;</div><div class="line">        ctx.rotate(<span class="built_in">Math</span>.PI/<span class="number">5</span>);</div><div class="line">        <span class="keyword">if</span>(i%<span class="number">2</span> == <span class="number">0</span>) &#123;</div><div class="line">          ctx.lineTo((r/<span class="number">0.525731</span>)*<span class="number">0.200811</span>,<span class="number">0</span>);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">          ctx.lineTo(r,<span class="number">0</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    ctx.closePath();</div><div class="line">    ctx.fill();</div><div class="line">    ctx.restore();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="4-10-剪纸效果（非零环绕原则）"><a href="#4-10-剪纸效果（非零环绕原则）" class="headerlink" title="4.10 剪纸效果（非零环绕原则）"></a>4.10 剪纸效果（非零环绕原则）</h2><p>对于一个复杂的路径调用fill()，浏览器怎么分辨哪些区域填充颜色，哪些区域不填充颜色<br>这时候就要靠canvas采用的非零环绕原则<br>非零环绕原则：从平面中任意区域内引出一条射线（不穿过交点），使射线穿过区域范围外，然后将多边形的边矢量化，规定多边形的边如果从射线的左边穿过则加1，如果从射线的右边穿过则减1，最终结果累加，如果为0，则点P在多边的外面；如果非0则点P在多边形的内部<br><img src="/images/17424(4).png" style="width: 600px;"><br>对于上边那条射线，路径从射线右边穿过，记-1，计数和为非零，所以该区域在多边形内部<br>对于左下边那条射线，路径先是从射线右边穿过，记-1，然后路径从射线左边穿过，记+1，-1+1=0，计数和为零，所以该区域在多边形外部<br>对于右下边那条射线，路径先是从射线右边穿过，记-1，然后路径从射线右边穿过，记-1，-1-1=-2，计数和为非零，所以该区域在多边形内部</p>
<p>所以我们可以用这个特性画出剪纸效果</p>
<p><canvas id="canvas18" style="border: 1px solid #bbb;">当前浏览器不支持canvas！</canvas></p>
<script type="text/javascript">
    var canvas18 = document.getElementById("canvas18");
    canvas18.width = 320;
    canvas18.height = 320;
    var ctx = canvas18.getContext('2d');
    ctx.save();
    ctx.beginPath();
    ctx.arc(160,160,120,0,Math.PI*2,false);
    ctx.arc(160,160,60,0,Math.PI*2,true);
    ctx.fillStyle = "#058";
    ctx.shadowColor = "#bbb";
    ctx.shadowOffsetX = 10;
    ctx.shadowOffsetY = 10;
    ctx.shadowBlur = 5;
    ctx.fill();
    ctx.restore();
    ctx.beginPath();
    ctx.moveTo(30,190);
    ctx.lineTo(30,130);
    ctx.lineTo(25,135);
    ctx.lineTo(35,135);
    ctx.lineTo(30,130);
    ctx.stroke();
    ctx.beginPath();
    ctx.moveTo(120,130);
    ctx.lineTo(120,190);
    ctx.lineTo(115,185);
    ctx.lineTo(125,185);
    ctx.lineTo(120,190);
    ctx.stroke();
</script>

<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">ctx.save();</div><div class="line">ctx.beginPath();</div><div class="line">ctx.arc(<span class="number">160</span>,<span class="number">160</span>,<span class="number">120</span>,<span class="number">0</span>,<span class="built_in">Math</span>.PI*<span class="number">2</span>,<span class="literal">false</span>);</div><div class="line">ctx.arc(<span class="number">160</span>,<span class="number">160</span>,<span class="number">60</span>,<span class="number">0</span>,<span class="built_in">Math</span>.PI*<span class="number">2</span>,<span class="literal">true</span>);</div><div class="line">ctx.fillStyle = <span class="string">"#058"</span>;</div><div class="line">ctx.shadowColor = <span class="string">"#bbb"</span>;</div><div class="line">ctx.shadowOffsetX = <span class="number">10</span>;</div><div class="line">ctx.shadowOffsetY = <span class="number">10</span>;</div><div class="line">ctx.shadowBlur = <span class="number">5</span>;</div><div class="line">ctx.fill();</div><div class="line">ctx.restore();</div><div class="line"></div><div class="line">ctx.beginPath();</div><div class="line">ctx.moveTo(<span class="number">30</span>,<span class="number">190</span>);</div><div class="line">ctx.lineTo(<span class="number">30</span>,<span class="number">130</span>);</div><div class="line">ctx.lineTo(<span class="number">25</span>,<span class="number">135</span>);</div><div class="line">ctx.lineTo(<span class="number">35</span>,<span class="number">135</span>);</div><div class="line">ctx.lineTo(<span class="number">30</span>,<span class="number">130</span>);</div><div class="line">ctx.stroke();</div><div class="line"></div><div class="line">ctx.beginPath();</div><div class="line">ctx.moveTo(<span class="number">120</span>,<span class="number">130</span>);</div><div class="line">ctx.lineTo(<span class="number">120</span>,<span class="number">190</span>);</div><div class="line">ctx.lineTo(<span class="number">115</span>,<span class="number">185</span>);</div><div class="line">ctx.lineTo(<span class="number">125</span>,<span class="number">185</span>);</div><div class="line">ctx.lineTo(<span class="number">120</span>,<span class="number">190</span>);</div><div class="line">ctx.stroke();</div></pre></td></tr></table></figure>
<h2 id="4-11-clearRect-清空画布"><a href="#4-11-clearRect-清空画布" class="headerlink" title="4.11 clearRect() 清空画布"></a>4.11 clearRect() 清空画布</h2><p>ctx.clearRect( x , y , width , height )<br>一般用于动画、游戏制作</p>
<hr>
<p>以上就是Canvas中一些基础的api（当然还有很多），canvas也一直在更新，更多更新的api请参考Canvas标准</p>
<h1 id="Canvas-标准"><a href="#Canvas-标准" class="headerlink" title="Canvas 标准"></a>Canvas 标准</h1><p><a href="http://www.w3c.org/TR/2dcontext/" target="_blank" rel="external">w3c canvas标准</a><br><a href="https://html.spec.whatwg.org/" target="_blank" rel="external">WHATWG</a></p>
<h1 id="Canvas-图形库"><a href="#Canvas-图形库" class="headerlink" title="Canvas 图形库"></a>Canvas 图形库</h1><p><a href="https://code.google.com/p/canvasplus/" target="_blank" rel="external">canvasplus</a><br><a href="http://artisanjs.com/" target="_blank" rel="external">Artisan JS</a><br><a href="https://roopons.com.au/wp-content/plugins/viral-optins/js/rgraph/" target="_blank" rel="external">Rgraph</a></p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="http://www.imooc.com/learn/185" target="_blank" rel="external">Canvas绘图详解</a><br><a href="http://baike.baidu.com/link?url=OwId2oNkz7LSxwJhL4lq39HAH7BquExCye9d4FSBKSoxlsQaJh56Poz8aYHwUA9M1p333dwgafk0AhmqQAFJUK" target="_blank" rel="external">canvas百度百科</a><br><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Canvas_API/Tutorial" target="_blank" rel="external">MDN Canvas</a><br><a href="https://www.rgraph.net/blog/an-example-of-the-html5-canvas-quadraticcurveto-function.html" target="_blank" rel="external">quadraticCurveTo demo</a><br><a href="http://blogs.sitepointstatic.com/examples/tech/canvas-curves/bezier-curve.html" target="_blank" rel="external">bezierCurveTo demo</a><br><a href="http://www.j--d.com/bezier" target="_blank" rel="external">quadraticCurveTo or bezierCurveTo</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-canvas&quot;&gt;&lt;a href=&quot;#1-canvas&quot; class=&quot;headerlink&quot; title=&quot;1.canvas&quot;&gt;&lt;/a&gt;1.canvas&lt;/h1&gt;&lt;p&gt;Canvas API（画布）是在HTML5中新增的标签用于在网页实时生成图像，并且可以操作图像内容，基本上它是一个可以用JavaScript操作的位图（bitmap）。&lt;/p&gt;
&lt;h2 id=&quot;1-1SVG-以及VML之间的差异编辑&quot;&gt;&lt;a href=&quot;#1-1SVG-以及VML之间的差异编辑&quot; class=&quot;headerlink&quot; title=&quot;1.1SVG 以及VML之间的差异编辑:&quot;&gt;&lt;/a&gt;1.1SVG 以及VML之间的差异编辑:&lt;/h2&gt;&lt;p&gt;&lt;code&gt;&amp;lt;canvas&amp;gt;&lt;/code&gt; 标记和 SVG以及 VML 之间的一个重要的不同是，&lt;code&gt;&amp;lt;canvas&amp;gt;&lt;/code&gt; 有一个基于 JavaScript 的绘图 API，而 SVG 和 VML 使用一个 XML 文档来描述绘图。&lt;br&gt;这两种方式在功能上是等同的，任何一种都可以用另一种来模拟。从表面上看，它们很不相同，可是，每一种都有强项和弱点。例如，SVG 绘图很容易编辑，只要从其描述中移除元素就行。&lt;br&gt;要从同一图形的一个 &lt;code&gt;&amp;lt;canvas&amp;gt;&lt;/code&gt; 标记中移除元素，往往需要擦掉绘图重新绘制它。&lt;/p&gt;
&lt;h2 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;
    
    </summary>
    
      <category term="canvas" scheme="http://yoursite.com/categories/canvas/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="canvas" scheme="http://yoursite.com/tags/canvas/"/>
    
  </entry>
  
  <entry>
    <title>CSS3实现3D轮播图</title>
    <link href="http://yoursite.com/2017/04/22/ife2017/CSS3%E5%AE%9E%E7%8E%B03D%E8%BD%AE%E6%92%AD%E5%9B%BE/"/>
    <id>http://yoursite.com/2017/04/22/ife2017/CSS3实现3D轮播图/</id>
    <published>2017-04-22T15:19:00.000Z</published>
    <updated>2017-04-23T07:09:25.609Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CSS3实现3D轮播图"><a href="#CSS3实现3D轮播图" class="headerlink" title="CSS3实现3D轮播图"></a>CSS3实现3D轮播图</h1><p><a href="http://ife.baidu.com/course/detail/id/51" target="_blank" rel="external">题目地址</a></p>
<blockquote>
<p>任务描述</p>
</blockquote>
<ul>
<li>实现图示效果<a href="https://ww1.sinaimg.cn/large/006tNbRwly1fcr5jr0994g30w30gx4qz.gif" target="_blank" rel="external">点击查看</a></li>
<li>只需要完成HTML，CSS代码编写，需要写一点JavaScript</li>
<li>需要有一定的数学计算</li>
<li>可以尝试不同的逻辑处理：如点击切换，滑动切换等等</li>
<li>示例图仅为参考，不需要完全实现一致，其中的图片、文案均可自行设定</li>
<li>尽可能多地尝试不同的、更多的样式设定来实践各种CSS属性</li>
<li>HTML 及 CSS 代码结构清晰、规范</li>
</ul>
<p><a href="https://github.com/Lexokid/ife/blob/master/6-13/index.html" target="_blank" rel="external">source</a></p>
<p><a href="https://lexokid.github.io/ife/6-13/index.html" target="_blank" rel="external">demo</a></p>
<a id="more"></a>
<p>要完成这题需要两个css3属性：<br>1.transform-style: preserve-3d;<br>2.perspective;<br>下面有两个参考资料写的很详细，只要能认真看完，这题就没什么难度了<br>我讲一下我做题遇到的坑<br>那就是transfrom属性的translate、rotate、scale、skew执行起来貌似是有顺序<br><code>transform:translateX(100px) scale(2)</code>与<code>transform:scale(2) translateX(100px)</code>效果不一样<br>我在写这题的时候给每个img是这么赋值的<code>transform: translateZ(500px) rotateY(N*60deg);</code><br>结果img除了变大点跟<code>transform: rotateY(60deg);</code>没区别（前提父元素有perspective，且没有overflow:hidden）<br>个人认为简单来说原因是坐标轴变换了（详细参考参考资料）<br><code>transform: translateZ(500px) rotateY(60deg);</code>先向屏幕方向（Z轴）移动了500px在旋转<br><code>transform: rotateY(60deg)translateZ(500px);</code>先旋转，在向旋转过的方向向Z轴移动了500px<br>所以效果会不一样<br>总之简单点说就是<strong>transform属性的书写顺序会影响最终的变换效果</strong>切记切记</p>
<p>记一个元素大小与perspective（px）和translateZ（px）的放大关系：<br>元素的初始宽为X,初始高为Y<br><strong>放大后的X=X*(1+translateZ/(perspective-translateZ))</strong><br>X与Y可互换<br>可以看得出perspective趋于无穷大或translateZ趋于0 3d效果越不明显</p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="http://www.zhangxinxu.com/wordpress/2012/09/css3-3d-transform-perspective-animate-transition/" target="_blank" rel="external">好吧，CSS3 3D transform变换，不过如此！</a><br><a href="http://www.w3cplus.com/css3/transform-basic-property.html" target="_blank" rel="external">Transform-style和Perspective属性</a><br><a href="https://blog.yiminghe.me/2013/12/03/decomposing-css-2d-transform-matrix-into-simple-transformations/" target="_blank" rel="external">decomposing css 2d transform matrix into simple transformations</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;CSS3实现3D轮播图&quot;&gt;&lt;a href=&quot;#CSS3实现3D轮播图&quot; class=&quot;headerlink&quot; title=&quot;CSS3实现3D轮播图&quot;&gt;&lt;/a&gt;CSS3实现3D轮播图&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;http://ife.baidu.com/course/detail/id/51&quot;&gt;题目地址&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;任务描述&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;实现图示效果&lt;a href=&quot;https://ww1.sinaimg.cn/large/006tNbRwly1fcr5jr0994g30w30gx4qz.gif&quot;&gt;点击查看&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;只需要完成HTML，CSS代码编写，需要写一点JavaScript&lt;/li&gt;
&lt;li&gt;需要有一定的数学计算&lt;/li&gt;
&lt;li&gt;可以尝试不同的逻辑处理：如点击切换，滑动切换等等&lt;/li&gt;
&lt;li&gt;示例图仅为参考，不需要完全实现一致，其中的图片、文案均可自行设定&lt;/li&gt;
&lt;li&gt;尽可能多地尝试不同的、更多的样式设定来实践各种CSS属性&lt;/li&gt;
&lt;li&gt;HTML 及 CSS 代码结构清晰、规范&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/Lexokid/ife/blob/master/6-13/index.html&quot;&gt;source&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://lexokid.github.io/ife/6-13/index.html&quot;&gt;demo&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="ife" scheme="http://yoursite.com/categories/ife/"/>
    
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
      <category term="ife" scheme="http://yoursite.com/tags/ife/"/>
    
      <category term="css3d" scheme="http://yoursite.com/tags/css3d/"/>
    
  </entry>
  
  <entry>
    <title>CSS3饼状loading效果</title>
    <link href="http://yoursite.com/2017/04/21/ife2017/CSS3%E9%A5%BC%E7%8A%B6loading%E6%95%88%E6%9E%9C/"/>
    <id>http://yoursite.com/2017/04/21/ife2017/CSS3饼状loading效果/</id>
    <published>2017-04-21T09:36:00.000Z</published>
    <updated>2017-04-21T09:53:55.073Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CSS3饼状loading效果"><a href="#CSS3饼状loading效果" class="headerlink" title="CSS3饼状loading效果"></a>CSS3饼状loading效果</h1><p><a href="http://ife.baidu.com/course/detail/id/36" target="_blank" rel="external">题目地址</a></p>
<blockquote>
<p>任务描述</p>
</blockquote>
<ul>
<li>实现图示效果。<a href="https://ww2.sinaimg.cn/large/006tNbRwly1fcr4ycdb9cg30d80dm0tf.gif" target="_blank" rel="external">点击查看</a></li>
<li>需要使用HTML和CSS实现半圆和四分之三圆环</li>
<li>longding动画页面上下左右剧中</li>
<li>所有的动画元素采用HTML和CSS实现</li>
</ul>
<p><a href="https://github.com/Lexokid/ife/blob/master/6-12/index.html" target="_blank" rel="external">source</a></p>
<p><a href="https://lexokid.github.io/ife/6-12/index.html" target="_blank" rel="external">demo</a></p>
<a id="more"></a>
<p>这玩意比想象中的有难度啊<br>至于原理还是看看代码吧（不会作图(┬＿┬)）<br>css画图能力LEVEL+1！！</p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="http://www.zhangxinxu.com/wordpress/?p=4144" target="_blank" rel="external">CSS3实现鸡蛋饼饼状图loading等待转转转</a><br><a href="http://codepen.io/CreativeJuiz/pen/vFBIh" target="_blank" rel="external">CSS Loading</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;CSS3饼状loading效果&quot;&gt;&lt;a href=&quot;#CSS3饼状loading效果&quot; class=&quot;headerlink&quot; title=&quot;CSS3饼状loading效果&quot;&gt;&lt;/a&gt;CSS3饼状loading效果&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;http://ife.baidu.com/course/detail/id/36&quot;&gt;题目地址&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;任务描述&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;实现图示效果。&lt;a href=&quot;https://ww2.sinaimg.cn/large/006tNbRwly1fcr4ycdb9cg30d80dm0tf.gif&quot;&gt;点击查看&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;需要使用HTML和CSS实现半圆和四分之三圆环&lt;/li&gt;
&lt;li&gt;longding动画页面上下左右剧中&lt;/li&gt;
&lt;li&gt;所有的动画元素采用HTML和CSS实现&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/Lexokid/ife/blob/master/6-12/index.html&quot;&gt;source&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://lexokid.github.io/ife/6-12/index.html&quot;&gt;demo&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="ife" scheme="http://yoursite.com/categories/ife/"/>
    
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
      <category term="ife" scheme="http://yoursite.com/tags/ife/"/>
    
      <category term="loading" scheme="http://yoursite.com/tags/loading/"/>
    
  </entry>
  
  <entry>
    <title>正则表达式之入门</title>
    <link href="http://yoursite.com/2017/04/20/ife2017/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E4%B9%8B%E5%85%A5%E9%97%A8/"/>
    <id>http://yoursite.com/2017/04/20/ife2017/正则表达式之入门/</id>
    <published>2017-04-20T11:20:00.000Z</published>
    <updated>2017-04-20T11:34:33.082Z</updated>
    
    <content type="html"><![CDATA[<h1 id="正则表达式之入门"><a href="#正则表达式之入门" class="headerlink" title="正则表达式之入门"></a>正则表达式之入门</h1><p><a href="http://ife.baidu.com/course/detail/id/29" target="_blank" rel="external">题目地址</a></p>
<blockquote>
<p>任务描述</p>
</blockquote>
<ul>
<li>编写一个判断给定数字是否为手机号码的正则表达式，测试用例参照但不限于：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">18812011232  // 测试结果应该为 true</div><div class="line">18812312     // false</div><div class="line">12345678909  // false</div></pre></td></tr></table></figure>
<ul>
<li>编写一个判断输入的字符串是否有相邻重复单词的正则表达式，测试用例可以参考但不限于：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">foo foo bar       // true</div><div class="line">foo bar foo       // false  有重复单词但是不相邻</div><div class="line">foo  barbar bar   // false</div></pre></td></tr></table></figure>
<p><a href="https://github.com/Lexokid/ife/blob/master/6-10/index.html" target="_blank" rel="external">source</a></p>
<p><a href="https://lexokid.github.io/ife/6-10/index.html" target="_blank" rel="external">demo</a></p>
<a id="more"></a>
<p>手机号码正则表达式：\^1[3|4|5|7|8]\d{9}$\<br>相邻重复单词的正则表达式：\(\b[A-Za-z]+)\s+\1\  (不带连字符)<br>/((?:[^|\s])<em>([A-Za-z]+[A-Za-z-]</em>))\s+\1(?=[$|\s])/(带连字符，有BUG)<br>由于JavaScript不支持后顾，有点难目前还不知道怎么写</p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions" target="_blank" rel="external">MDN Regular Expressions</a><br><a href="http://deerchao.net/tutorials/regex/regex-1.htm" target="_blank" rel="external">正则表达式30分钟入门教程</a><br><a href="https://regexper.com/" target="_blank" rel="external">正则表达式可视化</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;正则表达式之入门&quot;&gt;&lt;a href=&quot;#正则表达式之入门&quot; class=&quot;headerlink&quot; title=&quot;正则表达式之入门&quot;&gt;&lt;/a&gt;正则表达式之入门&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;http://ife.baidu.com/course/detail/id/29&quot;&gt;题目地址&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;任务描述&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;编写一个判断给定数字是否为手机号码的正则表达式，测试用例参照但不限于：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;18812011232  // 测试结果应该为 true&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18812312     // false&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12345678909  // false&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;编写一个判断输入的字符串是否有相邻重复单词的正则表达式，测试用例可以参考但不限于：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;foo foo bar       // true&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;foo bar foo       // false  有重复单词但是不相邻&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;foo  barbar bar   // false&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/Lexokid/ife/blob/master/6-10/index.html&quot;&gt;source&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://lexokid.github.io/ife/6-10/index.html&quot;&gt;demo&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="ife" scheme="http://yoursite.com/categories/ife/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="ife" scheme="http://yoursite.com/tags/ife/"/>
    
      <category term="正则表达式" scheme="http://yoursite.com/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>使用CSS实现折叠面板</title>
    <link href="http://yoursite.com/2017/04/19/ife2017/%E4%BD%BF%E7%94%A8CSS%E5%AE%9E%E7%8E%B0%E6%8A%98%E5%8F%A0%E9%9D%A2%E6%9D%BF/"/>
    <id>http://yoursite.com/2017/04/19/ife2017/使用CSS实现折叠面板/</id>
    <published>2017-04-19T13:00:00.000Z</published>
    <updated>2017-04-19T13:16:08.668Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使用CSS实现折叠面板"><a href="#使用CSS实现折叠面板" class="headerlink" title="使用CSS实现折叠面板"></a>使用CSS实现折叠面板</h1><p><a href="http://ife.baidu.com/course/detail/id/27" target="_blank" rel="external">题目地址</a></p>
<blockquote>
<p>任务描述</p>
</blockquote>
<ul>
<li>深入理解html中radio的特性</li>
<li>深入理解CSS选择器以及伪元素的使用</li>
<li>使用input的radio单选框特性结合CSS中的伪元素实现bootstrap中折叠面板<a href="http://v3.bootcss.com/javascript/#collapse-example-accordion" target="_blank" rel="external">点击查看样例</a>，要求样式一致。</li>
<li>当其中一个面对折叠时，其他面板需要隐藏</li>
<li>只能使用HTML，CSS，不允许使用JavaScript</li>
<li>注意测试不同情况，尤其是极端情况下的效果</li>
<li>有能力的同学在面板折叠或者展开时添加动画效果*</li>
</ul>
<p><a href="https://github.com/Lexokid/ife/blob/master/6-9/index.html" target="_blank" rel="external">source</a></p>
<p><a href="https://lexokid.github.io/ife/6-9/index.html" target="_blank" rel="external">demo</a></p>
<a id="more"></a>
<p>讲真这题怎么写一开始真的没有头绪，但仔细阅读题目会发现<strong>深入理解html中radio的特性</strong>和底下参考资料<strong>MDN label</strong><br>现在马上就知道怎么写了，有木有；就像自定义radio的那题一样，无非就是radio+label、checkbox+label配合:checked伪类选择器的应用<br>感觉写css就要脑洞大开,信我<strong>:checked+label</strong>能实现很多效果</p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/label" target="_blank" rel="external">MDN label</a><br><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Adjacent_sibling_selectors" target="_blank" rel="external">MDN Adjacent sibling selectors</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;使用CSS实现折叠面板&quot;&gt;&lt;a href=&quot;#使用CSS实现折叠面板&quot; class=&quot;headerlink&quot; title=&quot;使用CSS实现折叠面板&quot;&gt;&lt;/a&gt;使用CSS实现折叠面板&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;http://ife.baidu.com/course/detail/id/27&quot;&gt;题目地址&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;任务描述&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;深入理解html中radio的特性&lt;/li&gt;
&lt;li&gt;深入理解CSS选择器以及伪元素的使用&lt;/li&gt;
&lt;li&gt;使用input的radio单选框特性结合CSS中的伪元素实现bootstrap中折叠面板&lt;a href=&quot;http://v3.bootcss.com/javascript/#collapse-example-accordion&quot;&gt;点击查看样例&lt;/a&gt;，要求样式一致。&lt;/li&gt;
&lt;li&gt;当其中一个面对折叠时，其他面板需要隐藏&lt;/li&gt;
&lt;li&gt;只能使用HTML，CSS，不允许使用JavaScript&lt;/li&gt;
&lt;li&gt;注意测试不同情况，尤其是极端情况下的效果&lt;/li&gt;
&lt;li&gt;有能力的同学在面板折叠或者展开时添加动画效果*&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/Lexokid/ife/blob/master/6-9/index.html&quot;&gt;source&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://lexokid.github.io/ife/6-9/index.html&quot;&gt;demo&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="ife" scheme="http://yoursite.com/categories/ife/"/>
    
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
      <category term="ife" scheme="http://yoursite.com/tags/ife/"/>
    
  </entry>
  
  <entry>
    <title>自定义网页右键菜单</title>
    <link href="http://yoursite.com/2017/04/18/ife2017/%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BD%91%E9%A1%B5%E5%8F%B3%E9%94%AE%E8%8F%9C%E5%8D%95/"/>
    <id>http://yoursite.com/2017/04/18/ife2017/自定义网页右键菜单/</id>
    <published>2017-04-18T13:26:00.000Z</published>
    <updated>2017-04-18T13:45:42.410Z</updated>
    
    <content type="html"><![CDATA[<h1 id="自定义网页右键菜单"><a href="#自定义网页右键菜单" class="headerlink" title="自定义网页右键菜单"></a>自定义网页右键菜单</h1><p><a href="http://ife.baidu.com/course/detail/id/26" target="_blank" rel="external">题目地址</a></p>
<blockquote>
<p>任务描述</p>
</blockquote>
<ul>
<li>实现鼠标右击时，出现自定义菜单。点击非自定义菜单区域时，隐藏自定义菜单。</li>
<li>点击自定义菜单条目时，弹出菜单条目名称。</li>
<li>自定义菜单出现在鼠标指针右下方，当右边区域不够大，展示在左下方，同理，当下方区域不够时，展示在鼠标指针上方</li>
<li>注意测试不同情况，尤其是极端情况下的效果</li>
</ul>
<p><a href="https://github.com/Lexokid/ife/blob/master/6-8/index.html" target="_blank" rel="external">source</a></p>
<p><a href="https://lexokid.github.io/ife/6-8/index.html" target="_blank" rel="external">demo</a></p>
<a id="more"></a>
<p>Event.page[X|Y]; //鼠标相对页面(html)的位置<br>Event.client[X|Y] //鼠标相对可视区的位置<br>Element.offset[Width|Height] //元素的宽高（包括边框）<br>document.documentElement（html).client[Width|Height] //窗口（html）可视宽高<br>window.inner[Width|Height] //窗口可视宽高</p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="http://www.runoob.com/jsref/event-oncontextmenu.html" target="_blank" rel="external">oncontextmenu事件</a><br><a href="http://xchb.work/2016/07/25/event%E9%82%A3%E4%BA%9B%E4%BA%8B/" target="_blank" rel="external">event那些事</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;自定义网页右键菜单&quot;&gt;&lt;a href=&quot;#自定义网页右键菜单&quot; class=&quot;headerlink&quot; title=&quot;自定义网页右键菜单&quot;&gt;&lt;/a&gt;自定义网页右键菜单&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;http://ife.baidu.com/course/detail/id/26&quot;&gt;题目地址&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;任务描述&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;实现鼠标右击时，出现自定义菜单。点击非自定义菜单区域时，隐藏自定义菜单。&lt;/li&gt;
&lt;li&gt;点击自定义菜单条目时，弹出菜单条目名称。&lt;/li&gt;
&lt;li&gt;自定义菜单出现在鼠标指针右下方，当右边区域不够大，展示在左下方，同理，当下方区域不够时，展示在鼠标指针上方&lt;/li&gt;
&lt;li&gt;注意测试不同情况，尤其是极端情况下的效果&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/Lexokid/ife/blob/master/6-8/index.html&quot;&gt;source&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://lexokid.github.io/ife/6-8/index.html&quot;&gt;demo&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="ife" scheme="http://yoursite.com/categories/ife/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="ife" scheme="http://yoursite.com/tags/ife/"/>
    
  </entry>
  
  <entry>
    <title>自定义checkbox、radio样式</title>
    <link href="http://yoursite.com/2017/04/17/ife2017/%E8%87%AA%E5%AE%9A%E4%B9%89checkbox%E3%80%81radio%E6%A0%B7%E5%BC%8F/"/>
    <id>http://yoursite.com/2017/04/17/ife2017/自定义checkbox、radio样式/</id>
    <published>2017-04-17T12:39:00.000Z</published>
    <updated>2017-04-17T14:35:39.018Z</updated>
    
    <content type="html"><![CDATA[<h1 id="自定义checkbox、radio样式"><a href="#自定义checkbox、radio样式" class="headerlink" title="自定义checkbox、radio样式"></a>自定义checkbox、radio样式</h1><p><a href="http://ife.baidu.com/course/detail/id/23" target="_blank" rel="external">题目地址</a></p>
<blockquote>
<p>任务描述</p>
</blockquote>
<ul>
<li>深入了解html label标签</li>
<li>了解CSS边框、背景、伪元素、伪类（注意和伪元素区分）等属性的设置</li>
<li>了解CSS中常见的雪碧图，并能自己制作使用雪碧图</li>
</ul>
<p><a href="https://github.com/Lexokid/ife/blob/master/6-6/index.html" target="_blank" rel="external">source</a></p>
<p><a href="https://lexokid.github.io/ife/6-6/index.html" target="_blank" rel="external">demo</a></p>
<a id="more"></a>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></div><div class="line">    #chkbox&#123;</div><div class="line">        display: none;</div><div class="line">    &#125;</div><div class="line">    #chkbox+label&#123;</div><div class="line">        //style</div><div class="line">    &#125;</div><div class="line">    #chkbox:checked+label&#123;</div><div class="line">        //checked style</div><div class="line">    &#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">id</span>=<span class="string">"chkbox"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"chkbox"</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></div></pre></td></tr></table></figure>
<p>使input为none<br>for属性关联input<br>设计label的样式</p>
<p>css3<br>优点：减少http请求数据提高网络性能<br>缺点：代码量大，编写复杂，复杂图形没办法（可引入Font Awesome缓解，其他fonticon也行）<br>sprite<br>优点：可使用任何图标<br>缺点：请求数据量较大，放大会模糊，调整位置麻烦</p>
<p>具体效果看demo！</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;自定义checkbox、radio样式&quot;&gt;&lt;a href=&quot;#自定义checkbox、radio样式&quot; class=&quot;headerlink&quot; title=&quot;自定义checkbox、radio样式&quot;&gt;&lt;/a&gt;自定义checkbox、radio样式&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;http://ife.baidu.com/course/detail/id/23&quot;&gt;题目地址&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;任务描述&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;深入了解html label标签&lt;/li&gt;
&lt;li&gt;了解CSS边框、背景、伪元素、伪类（注意和伪元素区分）等属性的设置&lt;/li&gt;
&lt;li&gt;了解CSS中常见的雪碧图，并能自己制作使用雪碧图&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/Lexokid/ife/blob/master/6-6/index.html&quot;&gt;source&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://lexokid.github.io/ife/6-6/index.html&quot;&gt;demo&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="ife" scheme="http://yoursite.com/categories/ife/"/>
    
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
      <category term="ife" scheme="http://yoursite.com/tags/ife/"/>
    
  </entry>
  
  <entry>
    <title>排序表格</title>
    <link href="http://yoursite.com/2017/04/16/ife2017/%E6%8E%92%E5%BA%8F%E8%A1%A8%E6%A0%BC/"/>
    <id>http://yoursite.com/2017/04/16/ife2017/排序表格/</id>
    <published>2017-04-16T13:52:00.000Z</published>
    <updated>2017-04-17T09:33:32.110Z</updated>
    
    <content type="html"><![CDATA[<h1 id="排序表格"><a href="#排序表格" class="headerlink" title="排序表格"></a>排序表格</h1><p><a href="http://ife.baidu.com/course/detail/id/118" target="_blank" rel="external">题目地址</a></p>
<blockquote>
<p>任务描述</p>
</blockquote>
<ul>
<li>实现一个支持列排序的表格组件</li>
<li>提供生成表格的接口，表格中的数据，表格样式尽量低耦合</li>
<li>可以配置对哪些列支持排序功能，并在表头进行排序按钮的显示，图中的样式为示意参考，可自行设定样式及交互方式</li>
<li>提供点击排序按钮后的响应接口，并提供默认的排序方法，当提供的接口没有具体实现时，按默认的排序方法进行排序操作，并更新表格中的数据显示。</li>
</ul>
<p><a href="https://github.com/Lexokid/ife/blob/master/3-7/index.html" target="_blank" rel="external">source</a></p>
<p><a href="https://lexokid.github.io/ife/3-7/index.html" target="_blank" rel="external">demo</a></p>
<a id="more"></a>
<p>关于这题讲讲两点</p>
<p>1.由于这题需要表格排序，每一次排序都会涉及到大量DOM的更新渲染（我不知道有没有更好的办法），所以我使用innerHTML拼接字符串的方式以提高性能</p>
<blockquote>
<p>对于小的DOM更改而言，两种方法（createElement()、innerHTML）效率都差不多。然而，对于大的DOM更改，使用innerHTML要比使用标准DOM方法创建同样的DOM结构快得多。————《JavaScript高级程序设计》24.2.4.2</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> list = <span class="built_in">document</span>.getElementById(<span class="string">"myList"</span>);</div><div class="line"><span class="keyword">var</span> html = <span class="string">""</span>;</div><div class="line"><span class="keyword">var</span> i;</div><div class="line"></div><div class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;</div><div class="line">    html += <span class="string">"&lt;li&gt;Item "</span> + i + <span class="string">"&lt;/li&gt;"</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">list.innerHTML = html;</div></pre></td></tr></table></figure>
<p>2.根据数组对象的某一个属性进行排序<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sortByProperty</span>(<span class="params">PropertyName, dir</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">obj1, obj2</span>) </span>&#123;</div><div class="line">        <span class="keyword">let</span> val1 = obj1[PropertyName];</div><div class="line">        <span class="keyword">let</span> val2 = obj2[PropertyName];</div><div class="line"></div><div class="line">        dir = dir || <span class="string">"stb"</span>;</div><div class="line">        <span class="keyword">if</span>(dir === <span class="string">"stb"</span>)&#123;</div><div class="line">            <span class="keyword">return</span> val1-val2;<span class="comment">// 小到大</span></div><div class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(dir === <span class="string">"bts"</span>)&#123;</div><div class="line">            <span class="keyword">return</span> val2-val1 ;<span class="comment">// 大到小</span></div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> data = [&#123;</div><div class="line">    <span class="string">"age"</span>: <span class="number">10</span></div><div class="line">    &#125;,&#123;</div><div class="line">    <span class="string">"age"</span>: <span class="number">20</span></div><div class="line">    &#125;,&#123;</div><div class="line">    <span class="string">"age"</span>: <span class="number">30</span></div><div class="line">&#125;];</div><div class="line"></div><div class="line">data.sort(sortByProperty(<span class="string">"age"</span>,<span class="string">"bts"</span>));</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;排序表格&quot;&gt;&lt;a href=&quot;#排序表格&quot; class=&quot;headerlink&quot; title=&quot;排序表格&quot;&gt;&lt;/a&gt;排序表格&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;http://ife.baidu.com/course/detail/id/118&quot;&gt;题目地址&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;任务描述&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;实现一个支持列排序的表格组件&lt;/li&gt;
&lt;li&gt;提供生成表格的接口，表格中的数据，表格样式尽量低耦合&lt;/li&gt;
&lt;li&gt;可以配置对哪些列支持排序功能，并在表头进行排序按钮的显示，图中的样式为示意参考，可自行设定样式及交互方式&lt;/li&gt;
&lt;li&gt;提供点击排序按钮后的响应接口，并提供默认的排序方法，当提供的接口没有具体实现时，按默认的排序方法进行排序操作，并更新表格中的数据显示。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/Lexokid/ife/blob/master/3-7/index.html&quot;&gt;source&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://lexokid.github.io/ife/3-7/index.html&quot;&gt;demo&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="ife" scheme="http://yoursite.com/categories/ife/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="ife" scheme="http://yoursite.com/tags/ife/"/>
    
      <category term="排序表格" scheme="http://yoursite.com/tags/%E6%8E%92%E5%BA%8F%E8%A1%A8%E6%A0%BC/"/>
    
  </entry>
  
  <entry>
    <title>浮出层</title>
    <link href="http://yoursite.com/2017/04/13/ife2017/%E6%B5%AE%E5%87%BA%E5%B1%82/"/>
    <id>http://yoursite.com/2017/04/13/ife2017/浮出层/</id>
    <published>2017-04-13T14:35:00.000Z</published>
    <updated>2017-04-14T12:37:12.983Z</updated>
    
    <content type="html"><![CDATA[<h1 id="浮出层"><a href="#浮出层" class="headerlink" title="浮出层"></a>浮出层</h1><p><a href="http://ife.baidu.com/course/detail/id/115" target="_blank" rel="external">题目地址</a></p>
<blockquote>
<p>任务描述</p>
</blockquote>
<ul>
<li>实现一个浮出层的UI组件实现</li>
<li>浮出层的中心默认在屏幕正中</li>
<li>当浮出层显示时，屏幕滚动时，浮出层始终保持位置固定在屏幕正中，不随屏幕滚动而变化位置。或者禁止页面在有浮出层出现时滚动</li>
<li>当浮出层显示时，点击浮出层以外的部分，默认为关闭浮出层。可以实现一个半透明的遮罩来挡住浮出层外的部分</li>
<li>浮出层的样式、内容和逻辑尽量解耦</li>
<li>提供使用JavaScript控制浮出层展现和关闭的接口</li>
<li>浮出层的窗口大小可以是一个默认固定值，也可以是随内容变化而自适应变化，也可以是通过接口参数进行调整，自行根据自己能力进行选择</li>
<li>有能力的同学可以实现浮出层的拖拽移动浮出窗口位置以及拖拽边缘来放大缩小浮出窗口的功能</li>
</ul>
<p><a href="https://github.com/Lexokid/ife/blob/master/3-6/index.html" target="_blank" rel="external">source</a></p>
<p><a href="https://lexokid.github.io/ife/3-6/index.html" target="_blank" rel="external">demo</a></p>
<a id="more"></a>
<p>好吧，功能性的要求我都完成了<br>就差如何做到尽量解耦和如何优化代码了<br>这题的难点就是怎么实现拖拽移动浮窗口和拖拽边缘来放大缩小浮出窗口的逻辑<br>没什么好讲的，看代码吧！</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;浮出层&quot;&gt;&lt;a href=&quot;#浮出层&quot; class=&quot;headerlink&quot; title=&quot;浮出层&quot;&gt;&lt;/a&gt;浮出层&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;http://ife.baidu.com/course/detail/id/115&quot;&gt;题目地址&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;任务描述&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;实现一个浮出层的UI组件实现&lt;/li&gt;
&lt;li&gt;浮出层的中心默认在屏幕正中&lt;/li&gt;
&lt;li&gt;当浮出层显示时，屏幕滚动时，浮出层始终保持位置固定在屏幕正中，不随屏幕滚动而变化位置。或者禁止页面在有浮出层出现时滚动&lt;/li&gt;
&lt;li&gt;当浮出层显示时，点击浮出层以外的部分，默认为关闭浮出层。可以实现一个半透明的遮罩来挡住浮出层外的部分&lt;/li&gt;
&lt;li&gt;浮出层的样式、内容和逻辑尽量解耦&lt;/li&gt;
&lt;li&gt;提供使用JavaScript控制浮出层展现和关闭的接口&lt;/li&gt;
&lt;li&gt;浮出层的窗口大小可以是一个默认固定值，也可以是随内容变化而自适应变化，也可以是通过接口参数进行调整，自行根据自己能力进行选择&lt;/li&gt;
&lt;li&gt;有能力的同学可以实现浮出层的拖拽移动浮出窗口位置以及拖拽边缘来放大缩小浮出窗口的功能&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/Lexokid/ife/blob/master/3-6/index.html&quot;&gt;source&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://lexokid.github.io/ife/3-6/index.html&quot;&gt;demo&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="ife" scheme="http://yoursite.com/categories/ife/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="ife" scheme="http://yoursite.com/tags/ife/"/>
    
      <category term="浮出层" scheme="http://yoursite.com/tags/%E6%B5%AE%E5%87%BA%E5%B1%82/"/>
    
  </entry>
  
  <entry>
    <title>js对象方法</title>
    <link href="http://yoursite.com/2017/04/10/JavaScript/js%E5%AF%B9%E8%B1%A1%E6%96%B9%E6%B3%95/"/>
    <id>http://yoursite.com/2017/04/10/JavaScript/js对象方法/</id>
    <published>2017-04-10T11:50:00.000Z</published>
    <updated>2017-04-13T14:39:20.628Z</updated>
    
    <content type="html"><![CDATA[<p>以下内容参考自《深入理解JavaScript》<br><a id="more"></a></p>
<h1 id="公有方法"><a href="#公有方法" class="headerlink" title="公有方法"></a>公有方法</h1><p>公有方法可以被此构造函数生成的所有实例化对象访问<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Constr</span>(<span class="params">...</span>)</span>&#123;</div><div class="line">    <span class="comment">// 公有属性</span></div><div class="line">    <span class="keyword">this</span>.publicData = ...;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 公有方法</span></div><div class="line">Constr.prototype.publicMethod = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;...&#125;;</div><div class="line"><span class="comment">// or</span></div><div class="line">Constr.prototype = &#123;</div><div class="line">    <span class="attr">constructor</span>: Constr,</div><div class="line">    <span class="attr">publicMethod</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;...&#125;,</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>demo</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">User</span>(<span class="params">name</span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.name = name;</div><div class="line">&#125;</div><div class="line">User.prototype.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">let</span> man = <span class="keyword">new</span> User(<span class="string">"jack"</span>);</div><div class="line">man.getName();  <span class="comment">// jack</span></div><div class="line"><span class="keyword">let</span> man1 = <span class="keyword">new</span> User(<span class="string">"jack"</span>);</div><div class="line"><span class="built_in">console</span>.log(man.getName === man1.getName);  <span class="comment">// true</span></div></pre></td></tr></table></figure>
<h1 id="私有方法"><a href="#私有方法" class="headerlink" title="私有方法"></a>私有方法</h1><p>只能从构造函数内部访问，原型方法也不能访问<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Constr</span>(<span class="params">...</span>)</span>&#123;</div><div class="line">    <span class="comment">// 私有属性</span></div><div class="line">    <span class="keyword">let</span> privateData = ...;</div><div class="line"></div><div class="line">    <span class="comment">// 私有方法</span></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">privateMethod</span>(<span class="params"></span>)</span>&#123;...&#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>demo</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">User</span>(<span class="params">name</span>)</span>&#123;</div><div class="line">    <span class="keyword">let</span> _name = name;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">getName</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(_name);</div><div class="line">    &#125;</div><div class="line">    getName();  <span class="comment">// jack</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> man = <span class="keyword">new</span> User(<span class="string">"jack"</span>);</div><div class="line">man.getName();  <span class="comment">//Uncaught TypeError: man.getName is not a function</span></div></pre></td></tr></table></figure>
<h1 id="特权方法"><a href="#特权方法" class="headerlink" title="特权方法"></a>特权方法</h1><p>函数在构造函数内部创建，并被添加作为实的方法。这意味着，一方面，这种函数可以访问私有数据，另一方面，它是公有的因此对原型方法可见。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Constr</span>(<span class="params">...</span>)</span>&#123;</div><div class="line">    <span class="comment">// 私有方法</span></div><div class="line">    <span class="keyword">this</span>.privilegedMethod = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;...&#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>demo</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">User</span>(<span class="params">name</span>)</span>&#123;</div><div class="line">    <span class="keyword">let</span> _name = name;</div><div class="line"></div><div class="line">    <span class="keyword">this</span>.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(_name);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> man = <span class="keyword">new</span> User(<span class="string">"jack"</span>);</div><div class="line">man.getName();  <span class="comment">// jack</span></div><div class="line"><span class="keyword">let</span> man1 = <span class="keyword">new</span> User(<span class="string">"jack"</span>);</div><div class="line"><span class="built_in">console</span>.log(man.getName === man1.getName);  <span class="comment">// false</span></div></pre></td></tr></table></figure>
<h1 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h1><p>静态方法和静态属性就是我们无需实例化就可以调用<br>静态方法既只允许构造函数调用，其他的实例均无法访问和调用的方法和属性。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">User</span>(<span class="params">name</span>) </span>&#123;</div><div class="line">    <span class="keyword">let</span> vname = name;</div><div class="line">    <span class="keyword">this</span>._name = name;</div><div class="line">&#125;</div><div class="line">User.cname = <span class="string">"tom"</span>;</div><div class="line">User.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// this === User</span></div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.cname);</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>._name);</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.vname);</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">let</span> man = <span class="keyword">new</span> User(<span class="string">"jack"</span>);</div><div class="line">User.getName(); <span class="comment">// tom undefined undefined</span></div><div class="line">man.getName(); <span class="comment">// Uncaught TypeError: man.getName is not a function</span></div></pre></td></tr></table></figure></p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://github.com/Wscats/Good-text-Share/issues/85" target="_blank" rel="external">前端程序员经常忽视的一个JavaScript面试题</a><br><a href="http://javascript.crockford.com/private.html" target="_blank" rel="external">Private Members in JavaScript</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;以下内容参考自《深入理解JavaScript》&lt;br&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="面向对象" scheme="http://yoursite.com/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>听指令的小方块</title>
    <link href="http://yoursite.com/2017/04/10/ife2017/%E5%90%AC%E6%8C%87%E4%BB%A4%E7%9A%84%E5%B0%8F%E6%96%B9%E5%9D%97/"/>
    <id>http://yoursite.com/2017/04/10/ife2017/听指令的小方块/</id>
    <published>2017-04-10T05:29:00.000Z</published>
    <updated>2017-04-10T11:19:52.154Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一"><a href="#一" class="headerlink" title="一"></a>一</h1><p><a href="http://ife.baidu.com/course/detail/id/109" target="_blank" rel="external">题目地址</a></p>
<blockquote>
<p>任务描述</p>
</blockquote>
<ul>
<li>实现一个类似棋盘的格子空间，每个格子用两个数字可以定位，一个红正方形的DOM在这个空间内，正方形中的蓝色边表示这是他的正面，有一个input输入框</li>
<li>在输入框中允许输入如下指令，按下按钮后，使得正方形做相应动作<ul>
<li>GO：向蓝色边所面向的方向前进一格（一格等同于正方形的边长）</li>
<li>TUN LEF：向左转（逆时针旋转90度）</li>
<li>TUN RIG：向右转（顺时针旋转90度）</li>
<li>TUN BAC：向右转（旋转180度）</li>
</ul>
</li>
<li>移动不能超出格子空间</li>
</ul>
<p><a href="https://github.com/Lexokid/ife/blob/master/3-4/index.html" target="_blank" rel="external">source</a></p>
<p><a href="https://lexokid.github.io/ife/3-4/index.html" target="_blank" rel="external">demo</a></p>
<a id="more"></a>
<p>第一次尝试用面向对象的方式去做题<br>这也算是一种进步吧<br>在做这题时，当我把棋盘画完时（100个div。。。）就觉得好蠢<br>应该把棋盘当作一个对象用js动态创建的，并能调整大小<br>鉴于已经写了就算了，如果下次遇到类似的题就应该动态创建地图</p>
<p>接下来来谈谈这题的小知识</p>
<p>1.当我们用<code>element.style.XXX</code>获取样式时获取的是行内样式<br>这时我们应该用<code>getComputedStyle()</code>来获取元素的样式</p>
<blockquote>
<p>在“DOM2 级样式”中提供了 <code>getComputedStyle()</code> 方法。这个方法接受两个参数：要取得计算样式的元素和一个伪元素字符串（例如”:after”）。如果不需要伪元素信息，第二个参数可以是 null。<code>getComputedStyle()</code> 方法返回一个 CSSStyleDeclaration 对象（与 style 属性的类型相同），其中包含当前元素的所有计算的样式。———— 以上来自《JavaScript 高级程序设计》</p>
</blockquote>
<p><strong>getComputedStyle与style的区别</strong></p>
<ul>
<li><code>getComputedStyle()</code>方法是只读的，只能获取样式，不能设置；而<code>element.style</code>能读能写</li>
<li><code>getComputedStyle()</code>方法获取的是最终应用在元素上的所有CSS属性对象；而<code>element.style</code>只能获取元素style属性中的CSS样式</li>
</ul>
<p>例如：我们获取元素的left属性可以这样<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> block = <span class="built_in">document</span>.getElementById(<span class="string">"block"</span>);</div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.getComputedStyle(block, <span class="literal">null</span>).left);</div><div class="line"></div><div class="line"><span class="comment">//如果元素有伪类</span></div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.getComputedStyle(block, <span class="string">":after"</span>).left);</div></pre></td></tr></table></figure></p>
<p>2.用<code>getComputedStyle()</code>来获取元素的transform样式时得到的是matrix<br>所以我们需要把matrix进行转换<br>从网上找到一个可以转换为scale和rotate和translate</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getAngle</span>(<span class="params">el</span>) </span>&#123;</div><div class="line">    <span class="comment">//var el = document.getElementById("divTransform");</span></div><div class="line">    <span class="keyword">var</span> st = <span class="built_in">window</span>.getComputedStyle(el, <span class="literal">null</span>);</div><div class="line">    <span class="keyword">var</span> tr = st.getPropertyValue(<span class="string">"-webkit-transform"</span>) ||</div><div class="line">        st.getPropertyValue(<span class="string">"-moz-transform"</span>) ||</div><div class="line">        st.getPropertyValue(<span class="string">"-ms-transform"</span>) ||</div><div class="line">        st.getPropertyValue(<span class="string">"-o-transform"</span>) ||</div><div class="line">        st.getPropertyValue(<span class="string">"transform"</span>) ||</div><div class="line">        <span class="string">"FAIL"</span>;</div><div class="line"></div><div class="line">    <span class="comment">// With rotate(30deg)...</span></div><div class="line">    <span class="comment">// matrix(0.866025, 0.5, -0.5, 0.866025, 0px, 0px)</span></div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'Matrix: '</span> + tr);</div><div class="line"></div><div class="line">    <span class="comment">// rotation matrix - http://en.wikipedia.org/wiki/Rotation_matrix</span></div><div class="line"></div><div class="line">    <span class="keyword">var</span> values = tr.split(<span class="string">'('</span>)[<span class="number">1</span>].split(<span class="string">')'</span>)[<span class="number">0</span>].split(<span class="string">','</span>);</div><div class="line">    <span class="keyword">var</span> a = values[<span class="number">0</span>];</div><div class="line">    <span class="keyword">var</span> b = values[<span class="number">1</span>];</div><div class="line">    <span class="keyword">var</span> c = values[<span class="number">2</span>];</div><div class="line">    <span class="keyword">var</span> d = values[<span class="number">3</span>];</div><div class="line"></div><div class="line">    <span class="keyword">var</span> scale = <span class="built_in">Math</span>.sqrt(a * a + b * b);</div><div class="line"></div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'Scale: '</span> + scale);</div><div class="line"></div><div class="line">    <span class="comment">// arc sin, convert from radians to degrees, round</span></div><div class="line">    <span class="keyword">var</span> sin = b / scale;</div><div class="line">    <span class="comment">// next line works for 30deg but not 130deg (returns 50);</span></div><div class="line">    <span class="keyword">var</span> angle = <span class="built_in">Math</span>.round(<span class="built_in">Math</span>.asin(sin) * (<span class="number">180</span> / <span class="built_in">Math</span>.PI));</div><div class="line">    <span class="comment">// var angle = Math.round(Math.atan2(b, a) * (180 / Math.PI));</span></div><div class="line"></div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'Rotate: '</span> + angle + <span class="string">'deg'</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这题我并没有用到这个方法<br>先记下方便日后参考</p>
<h1 id="二"><a href="#二" class="headerlink" title="二"></a>二</h1><p><a href="http://ife.baidu.com/course/detail/id/112" target="_blank" rel="external">题目地址</a></p>
<blockquote>
<p>任务描述</p>
</blockquote>
<ul>
<li>对于正方形的移动增加相应动画，包括移动和旋转</li>
<li>每个指令的执行时间是1s（可以自己调整）</li>
<li>增加新的指令如下：<ul>
<li>TRA LEF：向屏幕的左侧移动一格，方向不变</li>
<li>TRA TOP：向屏幕的上面移动一格，方向不变</li>
<li>TRA RIG：向屏幕的右侧移动一格，方向不变</li>
<li>TRA BOT：向屏幕的下面移动一格，方向不变</li>
<li>MOV LEF：方向转向屏幕左侧，并向屏幕的左侧移动一格</li>
<li>MOV TOP：方向转向屏幕上面，向屏幕的上面移动一格</li>
<li>MOV RIG：方向转向屏幕右侧，向屏幕的右侧移动一格</li>
<li>MOV BOT：方向转向屏幕下面，向屏幕的下面移动一格</li>
</ul>
</li>
</ul>
<p><a href="https://github.com/Lexokid/ife/blob/master/3-5/index.html" target="_blank" rel="external">source</a></p>
<p><a href="https://lexokid.github.io/ife/3-5/index.html" target="_blank" rel="external">demo</a></p>
<p>这题在上题的基础上新加入了几个命令<br>用上题的几个命令组合使用即可实现这题几个命令</p>
<p>js面向对象基础<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">User</span>(<span class="params">name</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> name = name; <span class="comment">//私有属性</span></div><div class="line">    <span class="keyword">this</span>.name = name; <span class="comment">//公有属性</span></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">getName</span>(<span class="params"></span>) </span>&#123; <span class="comment">//私有方法</span></div><div class="line">        <span class="keyword">return</span> name;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">User.prototype.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="comment">//公有方法</span></div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name;</div><div class="line">&#125;</div><div class="line">User.name = <span class="string">'Wscats'</span>; <span class="comment">//静态属性</span></div><div class="line">User.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="comment">//静态方法</span></div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> Wscat = <span class="keyword">new</span> User(<span class="string">'Wscats'</span>); <span class="comment">//实例化</span></div></pre></td></tr></table></figure></p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="http://www.zhangxinxu.com/wordpress/?p=2378" target="_blank" rel="external">获取元素CSS值之getComputedStyle方法熟悉</a><br><a href="http://www.zhangxinxu.com/wordpress/?p=2427" target="_blank" rel="external">理解CSS3 transform中的Matrix(矩阵)</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一&quot;&gt;&lt;a href=&quot;#一&quot; class=&quot;headerlink&quot; title=&quot;一&quot;&gt;&lt;/a&gt;一&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;http://ife.baidu.com/course/detail/id/109&quot;&gt;题目地址&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;任务描述&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;实现一个类似棋盘的格子空间，每个格子用两个数字可以定位，一个红正方形的DOM在这个空间内，正方形中的蓝色边表示这是他的正面，有一个input输入框&lt;/li&gt;
&lt;li&gt;在输入框中允许输入如下指令，按下按钮后，使得正方形做相应动作&lt;ul&gt;
&lt;li&gt;GO：向蓝色边所面向的方向前进一格（一格等同于正方形的边长）&lt;/li&gt;
&lt;li&gt;TUN LEF：向左转（逆时针旋转90度）&lt;/li&gt;
&lt;li&gt;TUN RIG：向右转（顺时针旋转90度）&lt;/li&gt;
&lt;li&gt;TUN BAC：向右转（旋转180度）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;移动不能超出格子空间&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/Lexokid/ife/blob/master/3-4/index.html&quot;&gt;source&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://lexokid.github.io/ife/3-4/index.html&quot;&gt;demo&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="ife" scheme="http://yoursite.com/categories/ife/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="ife" scheme="http://yoursite.com/tags/ife/"/>
    
  </entry>
  
  <entry>
    <title>表单</title>
    <link href="http://yoursite.com/2017/03/29/ife2017/%E8%A1%A8%E5%8D%95/"/>
    <id>http://yoursite.com/2017/03/29/ife2017/表单/</id>
    <published>2017-03-29T14:51:00.000Z</published>
    <updated>2017-04-05T12:36:33.911Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一"><a href="#一" class="headerlink" title="一"></a>一</h1><p><a href="http://ife.baidu.com/course/detail/id/97" target="_blank" rel="external">题目地址</a></p>
<blockquote>
<p>任务描述</p>
</blockquote>
<ul>
<li>在页面中实现一个输入框与按钮，要求点击验证按钮后，对输入框中内容进行格式校验，并在其下方显示校验结果</li>
<li>校验规则：<ul>
<li>1.字符数为4~16位</li>
<li>2.每个英文字母、数字、英文符号长度为1</li>
<li>3.每个汉字，中文符号长度为2</li>
</ul>
</li>
</ul>
<p><a href="https://github.com/Lexokid/ife/blob/master/3-1/index.html" target="_blank" rel="external">source</a></p>
<p><a href="https://lexokid.github.io/ife/3-1/index.html" target="_blank" rel="external">demo</a></p>
<a id="more"></a>
<p>计算字符串长度（英文1中文2）<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getStrLen</span>(<span class="params">str</span>) </span>&#123;</div><div class="line">    <span class="keyword">let</span> len = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">of</span> str) &#123;</div><div class="line">        i.codePointAt(<span class="number">0</span>) &lt;= <span class="number">0xFF</span> ? len++ : len += <span class="number">2</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> len;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="二"><a href="#二" class="headerlink" title="二"></a>二</h1><p><a href="http://ife.baidu.com/course/detail/id/101" target="_blank" rel="external">题目地址</a></p>
<blockquote>
<p>任务描述</p>
</blockquote>
<ul>
<li>基于上一个任务，在页面中添加多个表单</li>
<li>要求:<ul>
<li>表单获得焦点时，下方显示表单填写规则</li>
<li>表单失去焦点时校验表单内容</li>
<li>校验结果正确时，表单边框显示绿色，并在下方显示验证通过的描述文字</li>
<li>校验结果错误时，表单边框显示红色，并在下方显示验证错误的描述文字</li>
<li>点击提交按钮时，对页面中所有输入进行校验，校验结果显示方式同上。若所有表单校验通过，弹窗显示“提交成功”，否则显示“提交失败”</li>
</ul>
</li>
</ul>
<p><a href="https://github.com/Lexokid/ife/blob/master/3-2/index.html" target="_blank" rel="external">source</a></p>
<p><a href="https://lexokid.github.io/ife/3-2/index.html" target="_blank" rel="external">demo</a></p>
<p>很常规的验证表单的题，不难，有点繁琐<br>ps：命名真是一件痛苦的事</p>
<h1 id="三"><a href="#三" class="headerlink" title="三"></a>三</h1><p><a href="http://ife.baidu.com/course/detail/id/106" target="_blank" rel="external">题目地址</a></p>
<blockquote>
<p>任务描述</p>
</blockquote>
<ul>
<li>在页面中完成两个单选框，切换单选框的不同选项时下方显示的表单随之切换。</li>
<li>当选择在校生时，出现两个select下拉菜单，一个选择城市，一个选择学校，当选择非在校生时，出一个文本输入框</li>
<li>学校下拉菜单里的学校名单均为城市下拉菜单中所选的城市中的大学，当城市发生变化时，学校一起发生变化</li>
<li>城市及学校的数据随意编造即可，无需真实完整</li>
</ul>
<p><a href="https://github.com/Lexokid/ife/blob/master/3-3/index.html" target="_blank" rel="external">source</a></p>
<p><a href="https://lexokid.github.io/ife/3-3/index.html" target="_blank" rel="external">demo</a></p>
<p>感觉这题完成度不高，纯粹为了完成而完成，不方便日后的拓展ヽ(●-`Д´-)ノ</p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/Guide/HTML/Forms" target="_blank" rel="external">HTML表单指南</a><br><a href="http://ife.baidu.com/note/detail/id/583" target="_blank" rel="external">如何判断中文字符</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一&quot;&gt;&lt;a href=&quot;#一&quot; class=&quot;headerlink&quot; title=&quot;一&quot;&gt;&lt;/a&gt;一&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;http://ife.baidu.com/course/detail/id/97&quot;&gt;题目地址&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;任务描述&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;在页面中实现一个输入框与按钮，要求点击验证按钮后，对输入框中内容进行格式校验，并在其下方显示校验结果&lt;/li&gt;
&lt;li&gt;校验规则：&lt;ul&gt;
&lt;li&gt;1.字符数为4~16位&lt;/li&gt;
&lt;li&gt;2.每个英文字母、数字、英文符号长度为1&lt;/li&gt;
&lt;li&gt;3.每个汉字，中文符号长度为2&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/Lexokid/ife/blob/master/3-1/index.html&quot;&gt;source&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://lexokid.github.io/ife/3-1/index.html&quot;&gt;demo&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="ife" scheme="http://yoursite.com/categories/ife/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="ife" scheme="http://yoursite.com/tags/ife/"/>
    
      <category term="表单" scheme="http://yoursite.com/tags/%E8%A1%A8%E5%8D%95/"/>
    
  </entry>
  
  <entry>
    <title>悬浮模糊效果</title>
    <link href="http://yoursite.com/2017/03/27/ife2017/%E6%82%AC%E6%B5%AE%E6%A8%A1%E7%B3%8A%E6%95%88%E6%9E%9C/"/>
    <id>http://yoursite.com/2017/03/27/ife2017/悬浮模糊效果/</id>
    <published>2017-03-27T13:39:00.000Z</published>
    <updated>2017-03-28T15:25:03.112Z</updated>
    
    <content type="html"><![CDATA[<h1 id="悬浮模糊效果"><a href="#悬浮模糊效果" class="headerlink" title="悬浮模糊效果"></a>悬浮模糊效果</h1><p><a href="http://ife.baidu.com/course/detail/id/14" target="_blank" rel="external">题目地址</a></p>
<blockquote>
<p>任务描述</p>
</blockquote>
<ul>
<li>实现文字的流光渐变动画</li>
<li>背景图需要进行模糊处理</li>
<li>实现按钮边框的从中间到两边扩展开</li>
</ul>
<p><a href="https://github.com/Lexokid/ife/blob/master/6-1/index.html" target="_blank" rel="external">source</a></p>
<p><a href="https://lexokid.github.io/ife/6-1/index.html" target="_blank" rel="external">demo</a></p>
<a id="more"></a>
<p>这题主要的难点就是文字的流光渐变效果<br>主要跟这五个属性有关<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.demo</span>&#123;</div><div class="line">    <span class="comment">/*前50%颜色组要与后50%颜色组一样且最后100%的颜色要和开头0%的颜色相等*/</span></div><div class="line">    <span class="attribute">background-image</span>: <span class="built_in">-webkit-linear-gradient</span>(left, blue, red 25%, blue 50%, red 75%, blue 100%);</div><div class="line"></div><div class="line">    <span class="comment">/*背景裁剪至文字形状*/</span></div><div class="line">    <span class="attribute">-webkit-background-clip</span>: text;</div><div class="line"></div><div class="line">    <span class="comment">/*文字透明，使背景颜色显示出来*/</span></div><div class="line">    <span class="attribute">color</span>: transparent;</div><div class="line"></div><div class="line">    <span class="comment">/*将背景图宽度拉长至两倍，之前设置background-image的两份相同的颜色组，就是为了能在此拉长后只显示一份颜色组，另外超出的半截颜色组用来实现流光效果*/</span></div><div class="line">    <span class="attribute">background-size</span>: <span class="number">200%</span> <span class="number">100%</span>;</div><div class="line"></div><div class="line">    <span class="comment">/*将背景从0移动到-100%的位置，无限重复即可得到流光渐变效果*/</span></div><div class="line">    <span class="attribute">animation</span>: streamer <span class="number">3s</span> infinite linear;</div><div class="line">&#125;</div><div class="line">@<span class="keyword">keyframes</span> streamer&#123;</div><div class="line">    <span class="selector-tag">from</span>&#123;</div><div class="line">        <span class="attribute">background-size</span>: <span class="number">0</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="selector-tag">to</span>&#123;</div><div class="line">        <span class="attribute">background-size</span>: -<span class="number">100%</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>关于background-clip的text选项估计很多人都不知道，我也是遇到这题才知道有这个值<br>而且w3school上也没有这个值（估计是没更新吧，毕竟前端发展蛮快的）<br>关于这题，你仔细观察题目demo会发现有2个细节</p>
<ol>
<li>鼠标放上图片时文字有几十像素的向上移动</li>
<li>边框变长的贝塞尔曲线（一开始很快然后变得很慢，边框并不是匀速变长的）<br>主要看了一些同学的demo，发现有好多都没有注意细节<br>前端嘛，主要就是细心<br>边框的上下与左右的边框宽度不一样，我感觉不好看就没做了</li>
</ol>
<p>关于背景图我用的不是gif<br>而是用把几张图拼接成一张长图，通过改变background-position-x来形成类似gif的效果<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.gif</span>&#123;</div><div class="line">    <span class="attribute">background-image</span>: <span class="built_in">url</span>();</div><div class="line">    <span class="attribute">background-repeat</span>: no-repeat;</div><div class="line">    <span class="attribute">background-position</span>: <span class="number">0</span> <span class="number">0</span>;</div><div class="line">    <span class="attribute">animation</span>: gif <span class="number">8s</span> <span class="built_in">steps</span>(11) infinite;</div><div class="line">    <span class="comment">/*steps(n) n为图片数量*/</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">@<span class="keyword">keyframes</span> gif&#123;</div><div class="line">    <span class="selector-tag">to</span>&#123;</div><div class="line">        <span class="attribute">background-position</span>: -<span class="number">3665px</span> <span class="number">0</span>;</div><div class="line">        <span class="comment">/*图片的总长*/</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>下方这是张鑫旭大神的gif实现方法（底部有链接）<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.love</span> &#123;</div><div class="line">    <span class="attribute">display</span>: block;</div><div class="line">    <span class="attribute">width</span>: <span class="number">100px</span>; <span class="attribute">height</span>: <span class="number">100px</span>;</div><div class="line">    <span class="attribute">background</span>: <span class="built_in">url</span>(web_heart_animation.png) <span class="number">0</span> <span class="number">0</span> no-repeat;</div><div class="line">    <span class="attribute">background-size</span>: <span class="number">2900%</span>;</div><div class="line">    <span class="attribute">animation</span>: heart-burst <span class="built_in">steps</span>(28) <span class="number">0.8s</span> infinite both;</div><div class="line">&#125;</div><div class="line"></div><div class="line">@<span class="keyword">keyframes</span> heart-burst &#123;</div><div class="line">  0% &#123;</div><div class="line">    <span class="attribute">background-position</span>: <span class="number">0%</span>;</div><div class="line">  &#125;</div><div class="line">  100% &#123;</div><div class="line">    <span class="attribute">background-position</span>: <span class="number">100%</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>一开始用张大神的写法发现图片会少一帧<br>至于为什么少一帧，很好目前我也不懂</p>
<p>这个还是蛮需要想象力的，但这就是它的有趣之处<br>另外用这个方法还可以实现ktv歌词的滚动效果<br>也许还能做出更炫酷的效果，这就需要想象力了<br>总之这题挺有趣的<br>（PS：一开始为了找背景图就去贴吧下cg，7g多因为百度云限速下了一天多，结果cg都是H的，后面才知道这玩意叫sd，才几百m ORZ 白白浪费一天时间下载）</p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="http://www.w3cplus.com/" target="_blank" rel="external">w3cplus</a><br><a href="https://tympanus.net/codrops/category/playground/page/2/" target="_blank" rel="external">Codrops</a><br><a href="http://www.alloyteam.com/" target="_blank" rel="external">AlloyTeam</a><br><a href="http://www.zhangxinxu.com/wordpress/?p=5081" target="_blank" rel="external">CSS或JS实现gif动态图片的停止与播放</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;悬浮模糊效果&quot;&gt;&lt;a href=&quot;#悬浮模糊效果&quot; class=&quot;headerlink&quot; title=&quot;悬浮模糊效果&quot;&gt;&lt;/a&gt;悬浮模糊效果&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;http://ife.baidu.com/course/detail/id/14&quot;&gt;题目地址&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;任务描述&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;实现文字的流光渐变动画&lt;/li&gt;
&lt;li&gt;背景图需要进行模糊处理&lt;/li&gt;
&lt;li&gt;实现按钮边框的从中间到两边扩展开&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/Lexokid/ife/blob/master/6-1/index.html&quot;&gt;source&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://lexokid.github.io/ife/6-1/index.html&quot;&gt;demo&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="ife" scheme="http://yoursite.com/categories/ife/"/>
    
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
      <category term="ife" scheme="http://yoursite.com/tags/ife/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript和树</title>
    <link href="http://yoursite.com/2017/03/23/ife2017/JavaScript%E5%92%8C%E6%A0%91/"/>
    <id>http://yoursite.com/2017/03/23/ife2017/JavaScript和树/</id>
    <published>2017-03-23T15:16:00.000Z</published>
    <updated>2017-03-26T14:43:30.475Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一"><a href="#一" class="headerlink" title="一"></a>一</h1><p><a href="http://ife.baidu.com/course/detail/id/108" target="_blank" rel="external">题目地址</a></p>
<blockquote>
<p>任务描述</p>
</blockquote>
<ul>
<li>在页面中展现一颗二叉树的结构</li>
<li>提供一个按钮，显示开始遍历，点击后，以动画的形式呈现遍历的过程</li>
<li>二叉树的遍历算法和方式自定，前序中序后序皆可，但推荐可以提供多种算法的展示（增加多个按钮，每个按钮对应不同的算法）</li>
<li>当前被遍历到的节点做一个特殊显示（比如不同的颜色）</li>
<li>每隔一段时间（500ms，1s等时间自定）再遍历下一个节点</li>
</ul>
<h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><p><a href="https://github.com/Lexokid/ife/blob/master/2-7/index.html" target="_blank" rel="external">https://github.com/Lexokid/ife/blob/master/2-7/index.html</a></p>
<h2 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h2><p><a href="https://lexokid.github.io/ife/2-7/index.html" target="_blank" rel="external">https://lexokid.github.io/ife/2-7/index.html</a></p>
<a id="more"></a>
<p>这题考察二叉树的遍历<br>二叉树的三种递归遍历<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 前序遍历</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">preOrderTraverse</span>(<span class="params">node</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (!node) &#123;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    nodeArr.push(node);</div><div class="line">    preOrderTraverse(node.firstElementChild);</div><div class="line">    preOrderTraverse(node.lastElementChild);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 中序遍历</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">inOrderTraverse</span>(<span class="params">node</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (!node) &#123;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    inOrderTraverse(node.firstElementChild);</div><div class="line">    nodeArr.push(node);</div><div class="line">    inOrderTraverse(node.lastElementChild);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 后序遍历</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">postOrderTraverse</span>(<span class="params">node</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (!node) &#123;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    postOrderTraverse(node.firstElementChild);</div><div class="line">    postOrderTraverse(node.lastElementChild);</div><div class="line">    nodeArr.push(node);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>很好,这不算不难…</p>
<h1 id="二"><a href="#二" class="headerlink" title="二"></a>二</h1><p><a href="http://ife.baidu.com/course/detail/id/110" target="_blank" rel="external">题目地址</a></p>
<blockquote>
<p>任务描述</p>
</blockquote>
<ul>
<li>将二叉树变成了多叉树，并且每一个节点中带有内容</li>
<li>提供一个按钮，显示开始遍历，点击后，以动画的形式呈现遍历的过程</li>
<li>当前被遍历到的节点做一个特殊显示（比如不同的颜色）</li>
<li>每隔一段时间（500ms，1s等时间自定）再遍历下一个节点</li>
<li>增加一个输入框及一个“查询”按钮，点击按钮时，开始在树中以动画形式查找节点内容和输入框中内容一致的节点，找到后以特殊样式显示该节点，找不到的话给出找不到的提示。查询过程中的展示过程和遍历过程保持一致</li>
</ul>
<h2 id="源码-1"><a href="#源码-1" class="headerlink" title="源码"></a>源码</h2><p><a href="https://github.com/Lexokid/ife/blob/master/2-8/index.html" target="_blank" rel="external">https://github.com/Lexokid/ife/blob/master/2-8/index.html</a></p>
<h2 id="demo-1"><a href="#demo-1" class="headerlink" title="demo"></a>demo</h2><p><a href="https://lexokid.github.io/ife/2-8/index.html" target="_blank" rel="external">https://lexokid.github.io/ife/2-8/index.html</a></p>
<p>这题考察多叉树的遍历，可以用深度优先和广度优先两种遍历方式(类似图的遍历)<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 深度优先搜索</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">traverseDFS</span>(<span class="params">node</span>) </span>&#123;</div><div class="line">    nodeArr.push(node);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; node.children.length; i++) &#123;</div><div class="line">        traverseDFS(node.children[i]);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 广度优先搜索</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">traverseBFS</span>(<span class="params">node</span>) </span>&#123;</div><div class="line">    <span class="keyword">let</span> queue = [];</div><div class="line">    nodeArr.push(node);</div><div class="line">    queue.push(node);</div><div class="line">    <span class="keyword">let</span> curNode = queue.shift();</div><div class="line">    <span class="keyword">while</span> (curNode) &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; curNode.children.length; i++) &#123;</div><div class="line">            queue.push(curNode.children[i]);</div><div class="line">            nodeArr.push(curNode.children[i]);</div><div class="line">        &#125;</div><div class="line">        curNode = queue.shift();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>详细的思路请参考底下的<a href="#参考资料">资料</a></p>
<h1 id="三"><a href="#三" class="headerlink" title="三"></a>三</h1><p><a href="http://ife.baidu.com/course/detail/id/111" target="_blank" rel="external">题目地址</a></p>
<blockquote>
<p>任务描述</p>
</blockquote>
<ul>
<li>添加节点的选择、增加与删除的功能</li>
<li>点击某个节点元素，则该节点元素呈现一个特殊被选中的样式</li>
<li>增加一个删除按钮，当选中某个节点元素后，点击删除按钮，则将该节点及其所有子节点删除掉</li>
<li>增加一个输入框及一个“添加”按钮当选中某个节点元素后，点击增加按钮，则在该节点下增加一个子节点，节点内容为输入框中内容，插入在其子节点的最后一个位置</li>
</ul>
<h2 id="源码-2"><a href="#源码-2" class="headerlink" title="源码"></a>源码</h2><p><a href="https://github.com/Lexokid/ife/blob/master/2-9/index.html" target="_blank" rel="external">https://github.com/Lexokid/ife/blob/master/2-9/index.html</a></p>
<h2 id="demo-2"><a href="#demo-2" class="headerlink" title="demo"></a>demo</h2><p><a href="https://lexokid.github.io/ife/2-9/index.html" target="_blank" rel="external">https://lexokid.github.io/ife/2-9/index.html</a></p>
<p>这题，嗯~~~没什么好说的，基于上一个任务的拓展<br>到这为止算是完成了斌斌学院的任务了<br>学会了DOM节点的操作和遍历，接触了一点点的异步编程<br>也看了其他同学写的代码，开拓了思维，为以后遇到类似的问题提供了多种解决方案<br>总之学到了很多很多<br>接下来要更加努力的学习了<br>为了和平的世界，美好的未来<br>干杯 (゜-゜)つロ</p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://segmentfault.com/a/1190000003004435" target="_blank" rel="external">遍历多叉树（递归、非递归广度优先、深度优先）</a><br><a href="https://code.tutsplus.com/articles/data-structures-with-javascript-tree--cms-23393" target="_blank" rel="external">Data Structures With JavaScript: Tree</a><br><a href="https://segmentfault.com/a/1190000000740261" target="_blank" rel="external">js数据结构和算法（三）二叉树</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一&quot;&gt;&lt;a href=&quot;#一&quot; class=&quot;headerlink&quot; title=&quot;一&quot;&gt;&lt;/a&gt;一&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;http://ife.baidu.com/course/detail/id/108&quot;&gt;题目地址&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;任务描述&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;在页面中展现一颗二叉树的结构&lt;/li&gt;
&lt;li&gt;提供一个按钮，显示开始遍历，点击后，以动画的形式呈现遍历的过程&lt;/li&gt;
&lt;li&gt;二叉树的遍历算法和方式自定，前序中序后序皆可，但推荐可以提供多种算法的展示（增加多个按钮，每个按钮对应不同的算法）&lt;/li&gt;
&lt;li&gt;当前被遍历到的节点做一个特殊显示（比如不同的颜色）&lt;/li&gt;
&lt;li&gt;每隔一段时间（500ms，1s等时间自定）再遍历下一个节点&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;源码&quot;&gt;&lt;a href=&quot;#源码&quot; class=&quot;headerlink&quot; title=&quot;源码&quot;&gt;&lt;/a&gt;源码&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/Lexokid/ife/blob/master/2-7/index.html&quot;&gt;https://github.com/Lexokid/ife/blob/master/2-7/index.html&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;demo&quot;&gt;&lt;a href=&quot;#demo&quot; class=&quot;headerlink&quot; title=&quot;demo&quot;&gt;&lt;/a&gt;demo&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://lexokid.github.io/ife/2-7/index.html&quot;&gt;https://lexokid.github.io/ife/2-7/index.html&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="ife" scheme="http://yoursite.com/categories/ife/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="ife" scheme="http://yoursite.com/tags/ife/"/>
    
      <category term="树" scheme="http://yoursite.com/tags/%E6%A0%91/"/>
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>js排序</title>
    <link href="http://yoursite.com/2017/03/17/JavaScript/js%E6%8E%92%E5%BA%8F/"/>
    <id>http://yoursite.com/2017/03/17/JavaScript/js排序/</id>
    <published>2017-03-17T12:30:00.000Z</published>
    <updated>2017-03-25T05:59:40.671Z</updated>
    
    <content type="html"><![CDATA[<p>js的几种排序(从小到大)</p>
<h1 id="sort排序（推荐）"><a href="#sort排序（推荐）" class="headerlink" title="sort排序（推荐）"></a>sort排序（推荐）</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">systemSort</span>(<span class="params">array</span>)</span>&#123;</div><div class="line">    array.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> a - b;</div><div class="line">    &#125;);</div><div class="line">    <span class="keyword">return</span> array;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<h1 id="交换排序"><a href="#交换排序" class="headerlink" title="交换排序"></a>交换排序</h1><p>时间复杂度O(n<sup>2</sup>)<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">swapSort</span>(<span class="params">array</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> i, j, d;</div><div class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; array.length; i++) &#123;</div><div class="line">        <span class="keyword">for</span> (j = i+<span class="number">1</span>; j &lt; array.length; j++) &#123;</div><div class="line">            <span class="keyword">if</span> (array[i] &gt; array[j]) &#123;</div><div class="line">                d = array[j];</div><div class="line">                array[j] = array[i];</div><div class="line">                array[i] = d;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> array;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h1><p>时间复杂度O(n<sup>2</sup>)<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">bubbleSort</span>(<span class="params">array</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> i, j, d;</div><div class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; array.length; i++) &#123;</div><div class="line">        <span class="keyword">for</span> (j = array.length<span class="number">-1</span>; j &gt; i; j--) &#123;</div><div class="line">            <span class="keyword">if</span> (array[j] &lt; array[j<span class="number">-1</span>]) &#123;</div><div class="line">                d = array[j];</div><div class="line">                array[j] = array[j<span class="number">-1</span>];</div><div class="line">                array[j<span class="number">-1</span>] = d;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> array;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>改进：当在<code>i&lt;array.length</code>的时候序列已经有序，就不需要在接着循环了</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">bubbleSort</span>(<span class="params">array</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> i, j, d;</div><div class="line">    <span class="keyword">var</span> flag=<span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; array.length &amp;&amp; flag; i++) &#123;</div><div class="line">        flag=<span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (j = array.length<span class="number">-1</span>; j &gt; i; j--) &#123;</div><div class="line">            <span class="keyword">if</span> (array[j] &lt; array[j<span class="number">-1</span>]) &#123;</div><div class="line">                d = array[j];</div><div class="line">                array[j] = array[j<span class="number">-1</span>];</div><div class="line">                array[j<span class="number">-1</span>] = d;</div><div class="line">                flag=<span class="number">1</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> array;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<p><a href="http://jun-lu.github.io/SortAnimate/index.html" target="_blank" rel="external">排序动画</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;js的几种排序(从小到大)&lt;/p&gt;
&lt;h1 id=&quot;sort排序（推荐）&quot;&gt;&lt;a href=&quot;#sort排序（推荐）&quot; class=&quot;headerlink&quot; title=&quot;sort排序（推荐）&quot;&gt;&lt;/a&gt;sort排序（推荐）&lt;/h1&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;systemSort&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;array&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    array.sort(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;a, b&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; a - b;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; array;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="排序" scheme="http://yoursite.com/tags/%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>基础JavaScript练习</title>
    <link href="http://yoursite.com/2017/03/17/ife2017/%E5%9F%BA%E7%A1%80JavaScript%E7%BB%83%E4%B9%A0/"/>
    <id>http://yoursite.com/2017/03/17/ife2017/基础JavaScript练习/</id>
    <published>2017-03-17T08:02:00.000Z</published>
    <updated>2017-03-25T05:55:33.924Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一"><a href="#一" class="headerlink" title="一"></a>一</h1><p><a href="http://ife.baidu.com/course/detail/id/103" target="_blank" rel="external">题目地址</a></p>
<blockquote>
<p>任务描述</p>
</blockquote>
<ul>
<li>模拟一个队列，队列的每个元素是一个数字，初始队列为空</li>
<li>有一个input输入框，以及4个操作按钮<ul>
<li>点击”左侧入”，将input中输入的数字从左侧插入队列中；</li>
<li>点击”右侧入”，将input中输入的数字从右侧插入队列中；</li>
<li>点击”左侧出”，读取并删除队列左侧第一个元素，并弹窗显示元素中数值；</li>
<li>点击”右侧出”，读取并删除队列又侧第一个元素，并弹窗显示元素中数值；</li>
</ul>
</li>
<li>点击队列中任何一个元素，则该元素会被从队列中删除</li>
</ul>
<h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><p><a href="https://github.com/Lexokid/ife/blob/master/2-4" target="_blank" rel="external">https://github.com/Lexokid/ife/blob/master/2-4</a></p>
<h2 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h2><p><a href="https://lexokid.github.io/ife/2-4/index.html" target="_blank" rel="external">https://lexokid.github.io/ife/2-4/index.html</a></p>
<a id="more"></a>
<p>这题没有什么难度，就是一些DOM节点的基本操作</p>
<h1 id="二"><a href="#二" class="headerlink" title="二"></a>二</h1><p><a href="http://ife.baidu.com/course/detail/id/105" target="_blank" rel="external">题目地址</a></p>
<blockquote>
<p>任务描述</p>
</blockquote>
<ul>
<li>基于上一任务</li>
<li>限制输入的数字在10-100</li>
<li>队列元素数量最多限制为60个，当超过60个时，添加元素时alert出提示</li>
<li>队列展现方式变化如图，直接用高度表示数字大小</li>
<li>实现一个简单的排序功能，如冒泡排序（不限制具体算法），用可视化的方法表达出来</li>
</ul>
<h2 id="源码-1"><a href="#源码-1" class="headerlink" title="源码"></a>源码</h2><p><a href="https://github.com/Lexokid/ife/blob/master/2-5" target="_blank" rel="external">https://github.com/Lexokid/ife/blob/master/2-5</a></p>
<h2 id="demo-1"><a href="#demo-1" class="headerlink" title="demo"></a>demo</h2><p><a href="https://lexokid.github.io/ife/2-5/index.html" target="_blank" rel="external">https://lexokid.github.io/ife/2-5/index.html</a></p>
<p>这一题前面几个要求都不怎么难，主要是最后一个要求排序需要以可视化的方法来表达出来，这个要求有点难度，后来发现用setTimeout的递归方法和timer累加法可以实现js动画，setInterval也可以<br>setTimeout的递归方法原理差不多是这样<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// do something</span></div><div class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="comment">// do second thing</span></div><div class="line">    &#125;, <span class="number">1000</span>);</div><div class="line">&#125;, <span class="number">1000</span>);</div><div class="line"></div><div class="line">(<span class="function"><span class="keyword">function</span> <span class="title">loop</span>(<span class="params">i</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(i);</div><div class="line">    <span class="keyword">if</span>(i)&#123;</div><div class="line">        setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;loop(--i);&#125;,<span class="number">1000</span>);</div><div class="line">    &#125;</div><div class="line">&#125;)(<span class="number">3</span>);</div></pre></td></tr></table></figure></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">delay</span>(<span class="params">fn, t</span>) </span>&#123;</div><div class="line">    <span class="comment">// private instance variables</span></div><div class="line">    <span class="keyword">var</span> queue = [], self, timer;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">schedule</span>(<span class="params">fn, t</span>) </span>&#123;</div><div class="line">        timer = setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            timer = <span class="literal">null</span>;</div><div class="line">            fn();</div><div class="line">            <span class="keyword">if</span> (queue.length) &#123;</div><div class="line">                <span class="keyword">var</span> item = queue.shift();</div><div class="line">                schedule(item.fn, item.t);</div><div class="line">            &#125;</div><div class="line">        &#125;, t);</div><div class="line">    &#125;</div><div class="line">    self = &#123;</div><div class="line">        <span class="attr">delay</span>: <span class="function"><span class="keyword">function</span>(<span class="params">fn, t</span>) </span>&#123;</div><div class="line">            <span class="comment">// if already queuing things or running a timer,</span></div><div class="line">            <span class="comment">//   then just add to the queue</span></div><div class="line">              <span class="keyword">if</span> (queue.length || timer) &#123;</div><div class="line">                queue.push(&#123;<span class="attr">fn</span>: fn, <span class="attr">t</span>: t&#125;);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="comment">// no queue or timer yet, so schedule the timer</span></div><div class="line">                schedule(fn, t);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> self;</div><div class="line">        &#125;,</div><div class="line">        <span class="attr">cancel</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            clearTimeout(timer);</div><div class="line">            queue = [];</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">    <span class="keyword">return</span> self.delay(fn, t);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"a"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">delay(fn,<span class="number">1000</span>).delay(fn,<span class="number">2000</span>);</div><div class="line"><span class="comment">/*</span></div><div class="line">wait 1000ms</div><div class="line">a</div><div class="line">wait 2000ms</div><div class="line">b</div><div class="line">*/</div></pre></td></tr></table></figure>
<p>timer累加<br>原理<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)&#123;</div><div class="line">    (<span class="function"><span class="keyword">function</span>(<span class="params">x</span>)</span>&#123;</div><div class="line">        setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="built_in">console</span>.log(x);&#125;,i*<span class="number">1000</span>);</div><div class="line">    &#125;)(i);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)&#123;</div><div class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="built_in">console</span>.log(i);&#125;,i*<span class="number">1000</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>setInterval<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// delay  每一帧之间的间隔(ms)</span></div><div class="line"><span class="comment">// duration  整个动画完成需要的时间(ms)</span></div><div class="line"><span class="comment">// start   动画开始的时间</span></div><div class="line"><span class="comment">// timePassed  从动画开始所经过的时间(ms)</span></div><div class="line"><span class="comment">// progress   已经过去的动画时间作为分子，计算每一帧通过公式timePassed/duration</span></div><div class="line"><span class="comment">// delta通过当前的时间，计算当前的动画进度</span></div><div class="line"><span class="comment">// delta(progress)一个返回当前动画进度的函数。</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">animate</span>(<span class="params">opts</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> start = <span class="keyword">new</span> <span class="built_in">Date</span>;</div><div class="line">    <span class="keyword">var</span> id = setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> timePassed = <span class="keyword">new</span> <span class="built_in">Date</span> - start;</div><div class="line">        <span class="keyword">var</span> progress = timePassed / opts.duration;</div><div class="line">        progress = (progress &lt; <span class="number">1</span>) ? progress : <span class="number">1</span>;</div><div class="line">        <span class="keyword">var</span> delta = opts.delta(progress)</div><div class="line">        opts.step(delta)</div><div class="line">        <span class="keyword">if</span> (progress == <span class="number">1</span>) &#123;</div><div class="line">            clearInterval(id)</div><div class="line">        &#125;</div><div class="line">    &#125;, opts.delay || <span class="number">10</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">move</span>(<span class="params">element, delta, duration</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> to = <span class="number">1000</span>;</div><div class="line">    animate(&#123;</div><div class="line">        <span class="attr">delay</span>: <span class="number">10</span>,</div><div class="line">        <span class="attr">duration</span>: duration || <span class="number">1000</span>,</div><div class="line">        <span class="attr">delta</span>: delta,</div><div class="line">        <span class="attr">step</span>: <span class="function"><span class="keyword">function</span>(<span class="params">delta</span>) </span>&#123;</div><div class="line">            element.style.left = to * delta + <span class="string">'px'</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">linear</span>(<span class="params">progress</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> progress;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">quad</span>(<span class="params">progress</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.pow(progress, <span class="number">2</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">circ</span>(<span class="params">progress</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="number">1</span> - <span class="built_in">Math</span>.sin(<span class="built_in">Math</span>.acos(progress))</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">back</span>(<span class="params">progress, x</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.pow(progress, <span class="number">2</span>) * ((x + <span class="number">1</span>) * progress - x)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">bounce</span>(<span class="params">progress</span>) </span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> a = <span class="number">0</span>, b = <span class="number">1</span>, result; <span class="number">1</span>; a += b, b /= <span class="number">2</span>) &#123;</div><div class="line">        <span class="keyword">if</span> (progress &gt;= (<span class="number">7</span> - <span class="number">4</span> * a) / <span class="number">11</span>) &#123;</div><div class="line">            <span class="keyword">return</span> -<span class="built_in">Math</span>.pow((<span class="number">11</span> - <span class="number">6</span> * a - <span class="number">11</span> * progress) / <span class="number">4</span>, <span class="number">2</span>) + <span class="built_in">Math</span>.pow(b, <span class="number">2</span>)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">elastic</span>(<span class="params">progress, x</span>) </span>&#123;</div><div class="line">    x = x || <span class="number">5</span>;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.pow(<span class="number">2</span>, <span class="number">10</span> * (progress - <span class="number">1</span>)) * <span class="built_in">Math</span>.cos(<span class="number">20</span> * <span class="built_in">Math</span>.PI * x / <span class="number">3</span> * progress)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>代码贴的有点多了，不过都是思路，记下来方便以后使用<br>这题我用的是timer累加的方法来实现动画效果<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sortHandle</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> array = $(<span class="string">"num"</span>).children;</div><div class="line">    <span class="keyword">let</span> time = <span class="number">100</span>;</div><div class="line">    <span class="keyword">let</span> timer;</div><div class="line">    <span class="keyword">let</span> count = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; array.length; i++) &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> j = array.length - <span class="number">1</span>; j &gt; i; j--) &#123;</div><div class="line">            timer = setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">                [].forEach.call($(<span class="string">"num"</span>).children, <span class="function"><span class="keyword">function</span>(<span class="params">its</span>) </span>&#123;</div><div class="line">                    its.style.boxShadow = <span class="string">`none`</span>;</div><div class="line">                &#125;);</div><div class="line">                array[j].style.boxShadow = <span class="string">`inset 0 0 2px 3px red`</span>;</div><div class="line">                array[j - <span class="number">1</span>].style.boxShadow = <span class="string">`inset 0 0 2px 2px red`</span>;</div><div class="line">                <span class="keyword">if</span> (~~(array[j].innerText) &gt; ~~(array[j - <span class="number">1</span>].innerText)) &#123;</div><div class="line">                    $(<span class="string">"num"</span>).insertBefore(array[j], array[j - <span class="number">1</span>]);</div><div class="line">                &#125;</div><div class="line">            &#125;, time * count++);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        [].forEach.call($(<span class="string">"num"</span>).children, <span class="function"><span class="keyword">function</span>(<span class="params">its</span>) </span>&#123;</div><div class="line">            its.style.boxShadow = <span class="string">`none`</span>;</div><div class="line">        &#125;);</div><div class="line">    &#125;, time * count);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>注意：两个for循环的循环变量要用let来定义，因为循环是不会因为setTimeout阻塞的，所以循环会先执行完，var定义的变量是以函数为作用域的，循环执行完时变量会一直保持在循环结束时的状态，导致setTimeout执行时访问的那个变量永远不变<br>或者可以用一个数组来储存排序的结果，然后用定时器去重现保存的结果</p>
<h1 id="三"><a href="#三" class="headerlink" title="三"></a>三</h1><p><a href="http://ife.baidu.com/course/detail/id/107" target="_blank" rel="external">题目地址</a></p>
<h2 id="源码-2"><a href="#源码-2" class="headerlink" title="源码"></a>源码</h2><p><a href="https://github.com/Lexokid/ife/blob/master/2-6" target="_blank" rel="external">https://github.com/Lexokid/ife/blob/master/2-6</a></p>
<h2 id="demo-2"><a href="#demo-2" class="headerlink" title="demo"></a>demo</h2><p><a href="https://lexokid.github.io/ife/2-6/index.html" target="_blank" rel="external">https://lexokid.github.io/ife/2-6/index.html</a></p>
<blockquote>
<p>任务描述</p>
</blockquote>
<ul>
<li>基于任务四进行升级</li>
<li>将新元素输入框从input改为textarea</li>
<li>允许一次批量输入多个内容，格式可以为数字、中文、英文等，可以通过用回车，逗号（全角半角均可），顿号，空格（全角半角、Tab等均可）等符号作为不同内容的间隔</li>
<li>增加一个查询文本输入框，和一个查询按钮，当点击查询时，将查询词在各个元素内容中做模糊匹配，将匹配到的内容进行特殊标识，如文字颜色等。举例，内容中有abcd，查询词为ab或bc，则该内容需要标识</li>
</ul>
<p>这题一样没什么难度，考察了一点正则表达式</p>
<p>这样就可以把除数字、英文、中文以外的字符替换为空格<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> reg = <span class="regexp">/[^a-zA-Z0-9\u4e00-\u9fa5]+/g</span>;</div><div class="line">str = str.replace(reg, <span class="string">" "</span>);</div></pre></td></tr></table></figure></p>
<p>模糊匹配可以用<code>str.match(reg)</code>的方法</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://segmentfault.com/a/1190000008570887" target="_blank" rel="external">【翻译】javascript 动画原理浅析</a><br><a href="http://stackoverflow.com/questions/6921275/is-it-possible-to-chain-settimeout-functions-in-javascript" target="_blank" rel="external">setTimeout任务链</a><br><a href="https://www.zhihu.com/question/41642706?sort=created" target="_blank" rel="external">我用js写了一个冒泡排序法，怎么用html和css把排序过程展现出来？</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一&quot;&gt;&lt;a href=&quot;#一&quot; class=&quot;headerlink&quot; title=&quot;一&quot;&gt;&lt;/a&gt;一&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;http://ife.baidu.com/course/detail/id/103&quot;&gt;题目地址&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;任务描述&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;模拟一个队列，队列的每个元素是一个数字，初始队列为空&lt;/li&gt;
&lt;li&gt;有一个input输入框，以及4个操作按钮&lt;ul&gt;
&lt;li&gt;点击”左侧入”，将input中输入的数字从左侧插入队列中；&lt;/li&gt;
&lt;li&gt;点击”右侧入”，将input中输入的数字从右侧插入队列中；&lt;/li&gt;
&lt;li&gt;点击”左侧出”，读取并删除队列左侧第一个元素，并弹窗显示元素中数值；&lt;/li&gt;
&lt;li&gt;点击”右侧出”，读取并删除队列又侧第一个元素，并弹窗显示元素中数值；&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;点击队列中任何一个元素，则该元素会被从队列中删除&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;源码&quot;&gt;&lt;a href=&quot;#源码&quot; class=&quot;headerlink&quot; title=&quot;源码&quot;&gt;&lt;/a&gt;源码&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/Lexokid/ife/blob/master/2-4&quot;&gt;https://github.com/Lexokid/ife/blob/master/2-4&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;demo&quot;&gt;&lt;a href=&quot;#demo&quot; class=&quot;headerlink&quot; title=&quot;demo&quot;&gt;&lt;/a&gt;demo&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://lexokid.github.io/ife/2-4/index.html&quot;&gt;https://lexokid.github.io/ife/2-4/index.html&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="ife" scheme="http://yoursite.com/categories/ife/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="排序" scheme="http://yoursite.com/tags/%E6%8E%92%E5%BA%8F/"/>
    
      <category term="ife" scheme="http://yoursite.com/tags/ife/"/>
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>浏览器滚动条样式</title>
    <link href="http://yoursite.com/2017/03/17/css/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%BB%9A%E5%8A%A8%E6%9D%A1%E6%A0%B7%E5%BC%8F/"/>
    <id>http://yoursite.com/2017/03/17/css/浏览器滚动条样式/</id>
    <published>2017-03-17T06:17:00.000Z</published>
    <updated>2017-03-25T05:58:57.407Z</updated>
    
    <content type="html"><![CDATA[<h1 id="webkit"><a href="#webkit" class="headerlink" title="webkit"></a>webkit</h1><h2 id="滚动条组成"><a href="#滚动条组成" class="headerlink" title="滚动条组成"></a>滚动条组成</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="selector-pseudo">::-webkit-scrollbar</span> \\滚动条整体部分</div><div class="line"><span class="selector-pseudo">::-webkit-scrollbar-thumb</span> \\滚动条里面的小方块，能向上向下移动（或往左往右移动，取决于是垂直滚动条还是水平滚动条）</div><div class="line"><span class="selector-pseudo">::-webkit-scrollbar-track</span> \\滚动条的轨道（里面装有<span class="selector-tag">Thumb</span>）</div><div class="line"><span class="selector-pseudo">::-webkit-scrollbar-button</span> \\滚动条的轨道的两端按钮，允许通过点击微调小方块的位置。</div><div class="line"><span class="selector-pseudo">::-webkit-scrollbar-track-piece</span> \\内层轨道，滚动条中间部分（除去）</div><div class="line"><span class="selector-pseudo">::-webkit-scrollbar-corner</span> \\边角，即两个滚动条的交汇处</div><div class="line"><span class="selector-pseudo">::-webkit-resizer</span> \\两个滚动条的交汇处上用于通过拖动调整元素大小的小控件</div></pre></td></tr></table></figure>
<p>注意：对以上各个部分定义width,height时,若是水平滚动条，则width属性不起作用，height属性用来控制滚动条相应部分竖直方向高度；若是竖直滚动条，则height属性不起作用，width属性用来控制相应部分的宽度</p>
<a id="more"></a>
<h2 id="详细设置"><a href="#详细设置" class="headerlink" title="详细设置"></a>详细设置</h2><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">:horizontal</div><div class="line">//horizontal伪类适用于任何水平方向上的滚动条</div><div class="line"></div><div class="line">:vertical</div><div class="line">//vertical伪类适用于任何垂直方向的滚动条</div><div class="line"></div><div class="line">:decrement</div><div class="line">//decrement伪类适用于按钮和轨道碎片。表示递减的按钮或轨道碎片，例如可以使区域向上或者向右移动的区域和按钮</div><div class="line"></div><div class="line">:increment</div><div class="line">//increment伪类适用于按钮和轨道碎片。表示递增的按钮或轨道碎片，例如可以使区域向下或者向左移动的区域和按钮</div><div class="line"></div><div class="line">:start</div><div class="line">//start伪类适用于按钮和轨道碎片。表示对象（按钮 轨道碎片）是否放在滑块的前面</div><div class="line"></div><div class="line">:end</div><div class="line">//end伪类适用于按钮和轨道碎片。表示对象（按钮 轨道碎片）是否放在滑块的后面</div><div class="line"></div><div class="line">:double-button</div><div class="line">//double-button伪类适用于按钮和轨道碎片。判断轨道结束的位置是否是一对按钮。也就是轨道碎片紧挨着一对在一起的按钮</div><div class="line"></div><div class="line">:single-button</div><div class="line">//single-button伪类适用于按钮和轨道碎片。判断轨道结束的位置是否是一个按钮。也就是轨道碎片紧挨着一个单独的按钮</div><div class="line"></div><div class="line">:no-button</div><div class="line">//no-button伪类表示轨道结束的位置没有按钮</div><div class="line"></div><div class="line">:corner-present</div><div class="line">//corner-present伪类表示滚动条的角落是否存在</div><div class="line"></div><div class="line">:window-inactive</div><div class="line">//适用于所有滚动条，表示包含滚动条的区域，焦点不在该窗口的时候</div></pre></td></tr></table></figure>
<p>例</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="css"></span></div><div class="line">    <span class="selector-class">.my_scroll</span><span class="selector-pseudo">::-webkit-scrollbar</span>&#123;</div><div class="line">        <span class="attribute">width</span>: <span class="number">10px</span>;</div><div class="line">        <span class="attribute">height</span>: <span class="number">10px</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="selector-class">.my_scroll</span><span class="selector-pseudo">::-webkit-scrollbar-thumb</span>&#123;</div><div class="line">        <span class="attribute">-webkit-box-shadow</span>: inset <span class="number">0</span> <span class="number">0</span> <span class="number">4px</span> <span class="built_in">rgba</span>(0, 0, 0, .6);</div><div class="line">        <span class="attribute">border-radius</span>: <span class="number">10px</span>;</div><div class="line">        <span class="attribute">background-color</span>: red;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    <span class="selector-class">.my_scroll</span><span class="selector-pseudo">::-webkit-scrollbar-track</span>&#123;</div><div class="line">        <span class="attribute">-webkit-box-shadow</span>: inset <span class="number">0</span> <span class="number">0</span> <span class="number">6px</span> <span class="built_in">rgba</span>(0, 0, 0, 0.3);</div><div class="line">        <span class="attribute">border-radius</span>: <span class="number">10px</span>;</div><div class="line">        <span class="attribute">background-color</span>: <span class="number">#F5F5F5</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="selector-class">.my_scroll</span><span class="selector-pseudo">::-webkit-scrollbar-button</span>&#123;</div><div class="line">        <span class="attribute">border-radius</span>: <span class="number">10px</span>;</div><div class="line">        <span class="attribute">background-color</span>: blue;</div><div class="line">    &#125;</div><div class="line">    <span class="selector-class">.my_scroll</span><span class="selector-pseudo">::-webkit-scrollbar-corner</span>&#123;</div><div class="line">        <span class="attribute">border-radius</span>: <span class="number">50%</span>;</div><div class="line">        <span class="attribute">background-color</span>: green;</div><div class="line">    &#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"my_scroll"</span> <span class="attr">style</span>=<span class="string">"height: 200px;width: 200px;overflow: auto; background: #eee;"</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"min-width: 500px; min-height: 500px;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<style type="text/css">
    .my_scroll::-webkit-scrollbar{
        width: 10px;
        height: 10px;
    }
    .my_scroll::-webkit-scrollbar-thumb{
        -webkit-box-shadow: inset 0 0 4px rgba(0, 0, 0, .6);
        border-radius: 10px;
        background-color: red;

    }
    .my_scroll::-webkit-scrollbar-track{
        -webkit-box-shadow: inset 0 0 6px rgba(0, 0, 0, 0.3);
        border-radius: 10px;
        background-color: #F5F5F5;
    }
    .my_scroll::-webkit-scrollbar-button{
        border-radius: 10px;
        background-color: blue;
    }
    .my_scroll::-webkit-scrollbar-corner{
        border-radius: 50%;
        background-color: green;
    }
</style>

<div class="my_scroll" style="height: 200px;width: 200px;overflow: auto; background: #eee;"><div style="min-width: 500px; min-height: 500px;"></div></div>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;webkit&quot;&gt;&lt;a href=&quot;#webkit&quot; class=&quot;headerlink&quot; title=&quot;webkit&quot;&gt;&lt;/a&gt;webkit&lt;/h1&gt;&lt;h2 id=&quot;滚动条组成&quot;&gt;&lt;a href=&quot;#滚动条组成&quot; class=&quot;headerlink&quot; title=&quot;滚动条组成&quot;&gt;&lt;/a&gt;滚动条组成&lt;/h2&gt;&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-pseudo&quot;&gt;::-webkit-scrollbar&lt;/span&gt; \\滚动条整体部分&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-pseudo&quot;&gt;::-webkit-scrollbar-thumb&lt;/span&gt; \\滚动条里面的小方块，能向上向下移动（或往左往右移动，取决于是垂直滚动条还是水平滚动条）&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-pseudo&quot;&gt;::-webkit-scrollbar-track&lt;/span&gt; \\滚动条的轨道（里面装有&lt;span class=&quot;selector-tag&quot;&gt;Thumb&lt;/span&gt;）&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-pseudo&quot;&gt;::-webkit-scrollbar-button&lt;/span&gt; \\滚动条的轨道的两端按钮，允许通过点击微调小方块的位置。&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-pseudo&quot;&gt;::-webkit-scrollbar-track-piece&lt;/span&gt; \\内层轨道，滚动条中间部分（除去）&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-pseudo&quot;&gt;::-webkit-scrollbar-corner&lt;/span&gt; \\边角，即两个滚动条的交汇处&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-pseudo&quot;&gt;::-webkit-resizer&lt;/span&gt; \\两个滚动条的交汇处上用于通过拖动调整元素大小的小控件&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;注意：对以上各个部分定义width,height时,若是水平滚动条，则width属性不起作用，height属性用来控制滚动条相应部分竖直方向高度；若是竖直滚动条，则height属性不起作用，width属性用来控制相应部分的宽度&lt;/p&gt;
    
    </summary>
    
      <category term="css" scheme="http://yoursite.com/categories/css/"/>
    
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
      <category term="滚动条" scheme="http://yoursite.com/tags/%E6%BB%9A%E5%8A%A8%E6%9D%A1/"/>
    
  </entry>
  
  <entry>
    <title>Gradient</title>
    <link href="http://yoursite.com/2017/03/16/css/Gradient/"/>
    <id>http://yoursite.com/2017/03/16/css/Gradient/</id>
    <published>2017-03-16T12:54:00.000Z</published>
    <updated>2017-03-25T05:59:15.815Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CSS3-Gradient"><a href="#CSS3-Gradient" class="headerlink" title="CSS3 Gradient"></a>CSS3 Gradient</h1><p>Gradient 分为线性渐变 <code>linear-gradient</code> 和径向渐变 <code>radial-gradient</code>。因为很多浏览器需要加前缀，这里为了简单起见，所有的代码都只用最新的webkit标准写法</p>
<h2 id="线性渐变"><a href="#线性渐变" class="headerlink" title="线性渐变"></a>线性渐变</h2><p>语法<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">background</span>: <span class="selector-tag">linear-gradient</span>(<span class="selector-attr">[&lt;point&gt;||&lt;angle&gt;,]</span>? &lt;<span class="selector-tag">stop</span>&gt;, &lt;<span class="selector-tag">stop</span>&gt;<span class="selector-attr">[,&lt;stop&gt;]</span>*)</div></pre></td></tr></table></figure></p>
<h3 id="线性渐变-从上到下（默认情况下-180deg）"><a href="#线性渐变-从上到下（默认情况下-180deg）" class="headerlink" title="线性渐变 - 从上到下（默认情况下 180deg）"></a>线性渐变 - 从上到下（默认情况下 180deg）</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.grad</span>&#123;</div><div class="line">    <span class="attribute">background</span>: <span class="built_in">-webkit-linear-gradient</span>(red, blue);</div><div class="line">    <span class="attribute">background</span>: <span class="built_in">-webkit-linear-gradient</span>(top,red, blue);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<div style="width: 250px;height: 200px; background: -webkit-linear-gradient(top,red, blue);"></div>

<a id="more"></a>
<h3 id="线性渐变-从左到右"><a href="#线性渐变-从左到右" class="headerlink" title="线性渐变 - 从左到右"></a>线性渐变 - 从左到右</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.grad</span>&#123;</div><div class="line">    <span class="attribute">background</span>: <span class="built_in">-webkit-linear-gradient</span>(left,red, blue);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<div style="width: 250px;height: 200px; background: -webkit-linear-gradient(left,red, blue);"></div>

<h3 id="线性渐变-对角"><a href="#线性渐变-对角" class="headerlink" title="线性渐变 - 对角"></a>线性渐变 - 对角</h3><p>从左上角开始（到右下角）的线性渐变<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.grad</span>&#123;</div><div class="line">    <span class="attribute">background</span>: <span class="built_in">-webkit-linear-gradient</span>(left top,red, blue);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<div style="width: 250px;height: 200px; background: -webkit-linear-gradient(left top,red, blue);"></div>

<h3 id="使用角度"><a href="#使用角度" class="headerlink" title="使用角度"></a>使用角度</h3><p>角度是指水平线和渐变线之间的角度，逆时针方向计算。换句话说，0deg 将创建一个从下到上的渐变，90deg 将创建一个从左到右的渐变。</p>
<p><img src="/images/17316(1).jpg" style="width: 500px;"></p>
<p>但是，请注意很多浏览器(Chrome,Safari,fiefox等)的使用了旧的标准，即 0deg 将创建一个从左到右的渐变，90deg 将创建一个从下到上的渐变。换算公式 90 - x = y 其中 x 为标准角度，y为非标准角度。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.grad</span>&#123;</div><div class="line">    <span class="attribute">background</span>: <span class="built_in">-webkit-linear-gradient</span>(45deg,red, blue);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<div style="width: 250px;height: 200px; background: -webkit-linear-gradient(45deg,red, blue);"></div>

<h3 id="使用多个颜色结点"><a href="#使用多个颜色结点" class="headerlink" title="使用多个颜色结点"></a>使用多个颜色结点</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.grad</span>&#123;</div><div class="line">    <span class="attribute">background</span>: <span class="built_in">-webkit-linear-gradient</span>(red, green, blue);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<div style="width: 250px;height: 200px; background: -webkit-linear-gradient(red, green, blue);"></div>

<h3 id="使用透明度"><a href="#使用透明度" class="headerlink" title="使用透明度"></a>使用透明度</h3><p>我们使用 rgba() 函数来定义颜色结点实现透明度</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.grad</span>&#123;</div><div class="line">    <span class="attribute">background</span>: <span class="built_in">-webkit-linear-gradient</span>(rgba(255,0,0,.5),<span class="built_in">rgba</span>(0,0,0,.5));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<div style="width: 250px;height: 200px; background: -webkit-linear-gradient(rgba(255,0,0,.5),rgba(0,0,0,.5));"></div>

<h3 id="停止点"><a href="#停止点" class="headerlink" title="停止点"></a>停止点</h3><p>停止点可以是像素值，也可以是百分比</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.grad</span>&#123;</div><div class="line">    <span class="attribute">background</span>: <span class="built_in">-webkit-linear-gradient</span>(red 10%, green 40%, blue);</div><div class="line">    <span class="attribute">background</span>: <span class="built_in">-webkit-linear-gradient</span>(red 20px, green 80px, blue);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<div style="width: 250px;height: 200px; background: -webkit-linear-gradient(red 10%, green 40%, blue);"></div>


<h3 id="重复的线性渐变"><a href="#重复的线性渐变" class="headerlink" title="重复的线性渐变"></a>重复的线性渐变</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.grad</span>&#123;</div><div class="line">    <span class="attribute">background</span>: <span class="built_in">-webkit-repeating-linear-gradient</span>(red, green 10%, blue 20%);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<div style="width: 250px;height: 200px; background: -webkit-repeating-linear-gradient(red, green 10%, blue 20%);"></div>

<hr>
<h2 id="径向渐变"><a href="#径向渐变" class="headerlink" title="径向渐变"></a>径向渐变</h2><p>为了创建一个径向渐变，你也必须至少定义两种颜色结点。颜色结点即你想要呈现平稳过渡的颜色。同时，你也可以指定渐变的中心、形状（原型或椭圆形）、大小。默认情况下，渐变的中心是 center（表示在中心点），渐变的形状是 ellipse（表示椭圆形），渐变的大小是 farthest-corner（表示到最远的角落）</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">-webkit-radial-gradient</span>(<span class="selector-attr">[&lt;bg-position&gt; || &lt;angle&gt;,]</span>? <span class="selector-attr">[&lt;shape&gt; || &lt;size&gt;,]</span>? &lt;<span class="selector-tag">color-stop</span>&gt;, &lt;<span class="selector-tag">color-stop</span>&gt;<span class="selector-attr">[, &lt;color-stop&gt;]</span>*);</div></pre></td></tr></table></figure>
<h3 id="径向渐变-颜色结点均匀分布（默认情况下）"><a href="#径向渐变-颜色结点均匀分布（默认情况下）" class="headerlink" title="径向渐变 - 颜色结点均匀分布（默认情况下）"></a>径向渐变 - 颜色结点均匀分布（默认情况下）</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.grad</span>&#123;</div><div class="line">    <span class="attribute">background</span>: <span class="built_in">-webkit-radial-gradient</span>(red, green, blue);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<div style="width: 250px;height: 200px; background: -webkit-radial-gradient(red, green, blue);
"></div>

<h3 id="径向渐变-颜色结点不均匀分布"><a href="#径向渐变-颜色结点不均匀分布" class="headerlink" title="径向渐变 - 颜色结点不均匀分布"></a>径向渐变 - 颜色结点不均匀分布</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.grad</span>&#123;</div><div class="line">    <span class="attribute">background</span>: <span class="built_in">-webkit-radial-gradient</span>(red 10%, green 40%, blue);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<div style="width: 250px;height: 200px; background: -webkit-radial-gradient(red 10%, green 40%, blue);"></div>

<h3 id="设置形状"><a href="#设置形状" class="headerlink" title="设置形状"></a>设置形状</h3><p>shape 参数定义了形状<br>它可以是值 circle 或 ellipse<br>其中，circle 表示圆形，ellipse 表示椭圆形<br>默认值是 ellipse</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.grad</span>&#123;</div><div class="line">    <span class="attribute">background</span>: <span class="built_in">-webkit-radial-gradient</span>(circle, red, green, blue);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<div style="width: 250px;height: 200px; background: -webkit-radial-gradient(circle, red, green, blue);"></div>

<h3 id="size"><a href="#size" class="headerlink" title="size"></a>size</h3><p>size 参数定义了渐变的大小</p>
<ul>
<li>closest-corner</li>
<li>closest-side</li>
<li>farthest-corner(默认)</li>
<li>farthest-side</li>
</ul>
<p><strong>closest-corner</strong><br><img src="/images/17316(2).jpg" style="width: 500px;"></p>
<p><strong>closest-side</strong><br><img src="/images/17316(3).jpg" style="width: 500px;"></p>
<p><strong>farthest-corner</strong><br><img src="/images/17316(4).jpg" style="width: 500px;"></p>
<p><strong>farthest-side</strong><br><img src="/images/17316(5).jpg" style="width: 500px;"></p>
<h3 id="重复的径向渐变"><a href="#重复的径向渐变" class="headerlink" title="重复的径向渐变"></a>重复的径向渐变</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.grad</span>&#123;</div><div class="line">    <span class="attribute">background</span>: <span class="built_in">-webkit-repeating-radial-gradient</span>(circle, red, green 10%, blue 15%);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<div style="width: 250px;height: 200px; background: -webkit-repeating-radial-gradient(circle, red, green 10%, blue 15%);"></div>

<hr>
<h1 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h1><p>与结合background-size，可以实现一些很精美的背景<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.grad</span>&#123;</div><div class="line">    <span class="attribute">background</span>: <span class="built_in">-webkit-linear-gradient</span>(45deg, #555 25%, transparent 25%, transparent), <span class="built_in">-webkit-linear-gradient</span>(-45deg, #555 25%, transparent 25%, transparent), <span class="built_in">-webkit-linear-gradient</span>(45deg, transparent 75%, #555 75%), <span class="built_in">-webkit-linear-gradient</span>(-45deg, transparent 75%, #555 75%);</div><div class="line">    <span class="attribute">background-size</span>: <span class="number">20px</span>;</div><div class="line">    <span class="attribute">background-color</span>: <span class="number">#99f</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<div style="width: 250px;height: 200px; background: -webkit-linear-gradient(45deg, #555 25%, transparent 25%, transparent), -webkit-linear-gradient(-45deg, #555 25%, transparent 25%, transparent), -webkit-linear-gradient(45deg, transparent 75%, #555 75%), -webkit-linear-gradient(-45deg, transparent 75%, #555 75%);background-size: 20px;background-color: #99f;"></div>


<div style="width: 250px;height: 200px; background: -webkit-linear-gradient(45deg, #555 25%, transparent 25%, transparent), -webkit-linear-gradient(-45deg, #555 25%, transparent 25%, transparent), -webkit-linear-gradient(45deg, transparent 75%, #555 75%), -webkit-linear-gradient(-45deg, transparent 75%, #555 75%);background-size: 20px;"></div>

<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.grad</span>&#123;</div><div class="line">    <span class="attribute">background</span>: <span class="built_in">-webkit-linear-gradient</span>(transparent 50%, rgba(200, 0, 0, .5) <span class="number">50%</span>, <span class="built_in">rgba</span>(200, 0, 0, .5)), <span class="built_in">-webkit-linear-gradient</span>(0deg, transparent 50%, rgba(200, 0, 0, .5) <span class="number">50%</span>, <span class="built_in">rgba</span>(200, 0, 0, .5));</div><div class="line">    <span class="attribute">background-size</span>: <span class="number">20px</span>;</div><div class="line">    <span class="attribute">background-color</span>: <span class="number">#99f</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<div style="width: 250px;height: 200px; background: -webkit-linear-gradient(transparent 50%, rgba(200, 0, 0, .5) 50%, rgba(200, 0, 0, .5)), -webkit-linear-gradient(0deg, transparent 50%, rgba(200, 0, 0, .5) 50%, rgba(200, 0, 0, .5));background-size: 20px;"></div>

<hr>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="http://www.cnblogs.com/xiaohuochai/p/5383285.html" target="_blank" rel="external">http://www.cnblogs.com/xiaohuochai/p/5383285.html</a><br><a href="http://www.runoob.com/css3/css3-gradients.html" target="_blank" rel="external">http://www.runoob.com/css3/css3-gradients.html</a><br><a href="http://www.w3cplus.com/content/css3-gradient" target="_blank" rel="external">http://www.w3cplus.com/content/css3-gradient</a><br><a href="http://blog.csdn.net/lihongxun945/article/details/46727843" target="_blank" rel="external">http://blog.csdn.net/lihongxun945/article/details/46727843</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;CSS3-Gradient&quot;&gt;&lt;a href=&quot;#CSS3-Gradient&quot; class=&quot;headerlink&quot; title=&quot;CSS3 Gradient&quot;&gt;&lt;/a&gt;CSS3 Gradient&lt;/h1&gt;&lt;p&gt;Gradient 分为线性渐变 &lt;code&gt;linear-gradient&lt;/code&gt; 和径向渐变 &lt;code&gt;radial-gradient&lt;/code&gt;。因为很多浏览器需要加前缀，这里为了简单起见，所有的代码都只用最新的webkit标准写法&lt;/p&gt;
&lt;h2 id=&quot;线性渐变&quot;&gt;&lt;a href=&quot;#线性渐变&quot; class=&quot;headerlink&quot; title=&quot;线性渐变&quot;&gt;&lt;/a&gt;线性渐变&lt;/h2&gt;&lt;p&gt;语法&lt;br&gt;&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;background&lt;/span&gt;: &lt;span class=&quot;selector-tag&quot;&gt;linear-gradient&lt;/span&gt;(&lt;span class=&quot;selector-attr&quot;&gt;[&amp;lt;point&amp;gt;||&amp;lt;angle&amp;gt;,]&lt;/span&gt;? &amp;lt;&lt;span class=&quot;selector-tag&quot;&gt;stop&lt;/span&gt;&amp;gt;, &amp;lt;&lt;span class=&quot;selector-tag&quot;&gt;stop&lt;/span&gt;&amp;gt;&lt;span class=&quot;selector-attr&quot;&gt;[,&amp;lt;stop&amp;gt;]&lt;/span&gt;*)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;线性渐变-从上到下（默认情况下-180deg）&quot;&gt;&lt;a href=&quot;#线性渐变-从上到下（默认情况下-180deg）&quot; class=&quot;headerlink&quot; title=&quot;线性渐变 - 从上到下（默认情况下 180deg）&quot;&gt;&lt;/a&gt;线性渐变 - 从上到下（默认情况下 180deg）&lt;/h3&gt;&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.grad&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;background&lt;/span&gt;: &lt;span class=&quot;built_in&quot;&gt;-webkit-linear-gradient&lt;/span&gt;(red, blue);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;background&lt;/span&gt;: &lt;span class=&quot;built_in&quot;&gt;-webkit-linear-gradient&lt;/span&gt;(top,red, blue);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;div style=&quot;width: 250px;height: 200px; background: -webkit-linear-gradient(top,red, blue);&quot;&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="css" scheme="http://yoursite.com/categories/css/"/>
    
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
      <category term="Gradients" scheme="http://yoursite.com/tags/Gradients/"/>
    
  </entry>
  
  <entry>
    <title>零基础JavaScript编码</title>
    <link href="http://yoursite.com/2017/03/14/ife2017/%E9%9B%B6%E5%9F%BA%E7%A1%80JavaScript%E7%BC%96%E7%A0%81/"/>
    <id>http://yoursite.com/2017/03/14/ife2017/零基础JavaScript编码/</id>
    <published>2017-03-14T12:02:00.000Z</published>
    <updated>2017-03-25T05:56:31.966Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一"><a href="#一" class="headerlink" title="一"></a>一</h1><p><a href="http://ife.baidu.com/course/detail/id/93" target="_blank" rel="external">题目地址</a></p>
<h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><p><a href="https://github.com/Lexokid/ife/blob/master/2-1" target="_blank" rel="external">https://github.com/Lexokid/ife/blob/master/2-1</a></p>
<h2 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h2><p><a href="https://lexokid.github.io/ife/2-1/index.html" target="_blank" rel="external">https://lexokid.github.io/ife/2-1/index.html</a></p>
<a id="more"></a>
<h1 id="二"><a href="#二" class="headerlink" title="二"></a>二</h1><p><a href="http://ife.baidu.com/course/detail/id/91" target="_blank" rel="external">题目地址</a></p>
<h2 id="源码-1"><a href="#源码-1" class="headerlink" title="源码"></a>源码</h2><p><a href="https://github.com/Lexokid/ife/blob/master/2-2" target="_blank" rel="external">https://github.com/Lexokid/ife/blob/master/2-2</a></p>
<h2 id="demo-1"><a href="#demo-1" class="headerlink" title="demo"></a>demo</h2><p><a href="https://lexokid.github.io/ife/2-2/index.html" target="_blank" rel="external">https://lexokid.github.io/ife/2-2/index.html</a></p>
<h1 id="三"><a href="#三" class="headerlink" title="三"></a>三</h1><p><a href="http://ife.baidu.com/course/detail/id/98" target="_blank" rel="external">题目地址</a></p>
<h2 id="源码-2"><a href="#源码-2" class="headerlink" title="源码"></a>源码</h2><p><a href="https://github.com/Lexokid/ife/blob/master/2-3" target="_blank" rel="external">https://github.com/Lexokid/ife/blob/master/2-3</a></p>
<h2 id="demo-2"><a href="#demo-2" class="headerlink" title="demo"></a>demo</h2><p><a href="https://lexokid.github.io/ife/2-3/index.html" target="_blank" rel="external">https://lexokid.github.io/ife/2-3/index.html</a></p>
<h1 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h1><h2 id="sort排序"><a href="#sort排序" class="headerlink" title="sort排序"></a>sort排序</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sortArray</span>(<span class="params">arr</span>) </span>&#123;</div><div class="line">    arr.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</div><div class="line">        <span class="comment">//a-b从小到大，b-a从大到小</span></div><div class="line">        <span class="keyword">return</span> a-b;</div><div class="line">    &#125;)</div><div class="line">    <span class="keyword">return</span> arr;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一&quot;&gt;&lt;a href=&quot;#一&quot; class=&quot;headerlink&quot; title=&quot;一&quot;&gt;&lt;/a&gt;一&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;http://ife.baidu.com/course/detail/id/93&quot;&gt;题目地址&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;源码&quot;&gt;&lt;a href=&quot;#源码&quot; class=&quot;headerlink&quot; title=&quot;源码&quot;&gt;&lt;/a&gt;源码&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/Lexokid/ife/blob/master/2-1&quot;&gt;https://github.com/Lexokid/ife/blob/master/2-1&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;demo&quot;&gt;&lt;a href=&quot;#demo&quot; class=&quot;headerlink&quot; title=&quot;demo&quot;&gt;&lt;/a&gt;demo&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://lexokid.github.io/ife/2-1/index.html&quot;&gt;https://lexokid.github.io/ife/2-1/index.html&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="ife" scheme="http://yoursite.com/categories/ife/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="ife" scheme="http://yoursite.com/tags/ife/"/>
    
  </entry>
  
  <entry>
    <title>学习CSS3的新特性(animation)</title>
    <link href="http://yoursite.com/2017/03/14/ife2017/%E5%AD%A6%E4%B9%A0CSS3%E7%9A%84%E6%96%B0%E7%89%B9%E6%80%A7/"/>
    <id>http://yoursite.com/2017/03/14/ife2017/学习CSS3的新特性/</id>
    <published>2017-03-14T04:04:00.000Z</published>
    <updated>2017-03-28T02:43:31.575Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://ife.baidu.com/course/detail/id/117" target="_blank" rel="external">题目地址</a></p>
<h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><p><a href="https://github.com/Lexokid/ife/blob/master/1-12" target="_blank" rel="external">https://github.com/Lexokid/ife/blob/master/1-12</a></p>
<h2 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h2><p><a href="https://lexokid.github.io/ife/1-12/index.html" target="_blank" rel="external">https://lexokid.github.io/ife/1-12/index.html</a></p>
<a id="more"></a>
<h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><h3 id="animation-fill-mode"><a href="#animation-fill-mode" class="headerlink" title="animation-fill-mode"></a>animation-fill-mode</h3><p>假设有一个盒子<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="css"></span></div><div class="line"><span class="selector-class">.box</span>&#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</div><div class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</div><div class="line">    <span class="attribute">margin</span>: <span class="number">100px</span>;</div><div class="line">    <span class="attribute">background</span>: <span class="number">#f00</span>;</div><div class="line">    <span class="attribute">transform</span>: <span class="built_in">translateY</span>(0);</div><div class="line">    <span class="attribute">animation</span>: move <span class="number">1s</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">@<span class="keyword">keyframes</span> move&#123;</div><div class="line">    <span class="selector-tag">from</span>&#123;<span class="attribute">transform</span>: <span class="built_in">translateY</span>(-50px)&#125;</div><div class="line">    <span class="selector-tag">to</span>  &#123;<span class="attribute">transform</span>: <span class="built_in">translateY</span>( 50px)&#125;</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p><strong>使用图片来表示 translateY 的值与 时间 的关系:</strong></p>
<ul>
<li>横轴为表示 时间，为 0 时表示动画开始的时间，也就是向 box 加上 on 类名的时间，横轴一格表示 0.5s</li>
<li>纵轴表示translateY的值，为 0 时表示 translateY 的值为 0，纵轴一格表示 50px</li>
</ul>
<ol>
<li>animation-fill-mode: none</li>
</ol>
<p><img src="/images/17314(1).png"></p>
<ol>
<li>animation-fill-mode: backwards</li>
</ol>
<p><img src="/images/17314(2).png"></p>
<ol>
<li>animation-fill-mode: forwards</li>
</ol>
<p><img src="/images/17314(3).png"></p>
<ol>
<li>animation-fill-mode: both</li>
</ol>
<p><img src="/images/17314(4).png"></p>
<hr>
<h3 id="transition-timing-function-steps"><a href="#transition-timing-function-steps" class="headerlink" title="transition-timing-function: steps()"></a>transition-timing-function: steps()</h3><p>steps 函数指定了一个阶跃函数<br>第一个参数指定了时间函数中的间隔数量（必须是正整数）<br>第二个参数可选，接受 start 和 end 两个值，指定在每个间隔的起点或是终点发生阶跃变化，默认为 end。<br>step-start等同于steps(1,start)，动画分成1步，动画执行时为开始左侧端点的部分为开始；<br>step-end等同于steps(1,end)：动画分成一步，动画执行时以结尾端点为开始，默认值为end。<br><a href="http://www.w3.org/TR/2012/WD-css3-transitions-20120403/#transition-timing-function-property" target="_blank" rel="external">transition-timing-function</a></p>
<p>针对第一个参数<br><strong>timing-function 作用于每两个关键帧之间，而不是整个动画</strong><br>steps的设置都是针对两个关键帧之间的，而非是整个keyframes，所以第一个参数对 - 次数对应了每次steps的变化</p>
<p>第二个参数可选，接受 start 和 end 两个值，指定在每个间隔的起点或是终点发生阶跃变化，默认为 end<br>2个参数都会选择性的跳过前后部分，start跳过0%，end跳过100%<br>step-start在变化过程中，都是以下一帧的显示效果来填充间隔动画<br>step-end与上面相反，都是以上一帧的显示效果来填充间隔动画</p>
<p>step的工作机制图<br><img src="/images/17314(5).png"></p>
<p>总结：<br>steps函数，它可以传入两个参数，第一个是一个大于0的整数，他是将间隔动画等分成指定数目的小间隔动画，然后根据第二个参数来决定显示效果。<br>第二个参数设置后其实和step-start，step-end同义，在分成的小间隔动画中判断显示效果。可以看出：steps(1, start) 等于step-start，steps(1,end)等于step-end</p>
<hr>
<h2 id="参考资料及来源"><a href="#参考资料及来源" class="headerlink" title="参考资料及来源"></a>参考资料及来源</h2><p><a href="https://segmentfault.com/q/1010000003867335" target="_blank" rel="external">如何理解animation-fill-mode及其使用？</a><br><a href="http://www.cnblogs.com/aaronjs/p/4642015.html" target="_blank" rel="external">http://www.cnblogs.com/aaronjs/p/4642015.html</a><br><a href="http://www.tuicool.com/articles/neqMVr" target="_blank" rel="external">http://www.tuicool.com/articles/neqMVr</a><br><a href="http://designmodo.com/steps-css-animations/" target="_blank" rel="external">http://designmodo.com/steps-css-animations/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://ife.baidu.com/course/detail/id/117&quot;&gt;题目地址&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;源码&quot;&gt;&lt;a href=&quot;#源码&quot; class=&quot;headerlink&quot; title=&quot;源码&quot;&gt;&lt;/a&gt;源码&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/Lexokid/ife/blob/master/1-12&quot;&gt;https://github.com/Lexokid/ife/blob/master/1-12&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;demo&quot;&gt;&lt;a href=&quot;#demo&quot; class=&quot;headerlink&quot; title=&quot;demo&quot;&gt;&lt;/a&gt;demo&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://lexokid.github.io/ife/1-12/index.html&quot;&gt;https://lexokid.github.io/ife/1-12/index.html&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="ife" scheme="http://yoursite.com/categories/ife/"/>
    
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
      <category term="ife" scheme="http://yoursite.com/tags/ife/"/>
    
      <category term="html" scheme="http://yoursite.com/tags/html/"/>
    
  </entry>
  
</feed>
