<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lexokid的博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-03-21T14:20:45.982Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Lexokid</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>牛客网—剑指offer（2）</title>
    <link href="http://yoursite.com/2018/03/21/JavaScript/%E7%89%9B%E5%AE%A2%E7%BD%91%E2%80%94%E5%89%91%E6%8C%87offer%EF%BC%882%EF%BC%89/"/>
    <id>http://yoursite.com/2018/03/21/JavaScript/牛客网—剑指offer（2）/</id>
    <published>2018-03-21T07:57:48.000Z</published>
    <updated>2018-03-21T14:20:45.982Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-斐波那契数列"><a href="#1-斐波那契数列" class="headerlink" title="1.斐波那契数列"></a>1.斐波那契数列</h2><p><strong>题目描述</strong><br>大家都知道<a href="https://baike.baidu.com/item/%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97/99145" target="_blank" rel="external">斐波那契数列</a>，现在要求输入一个整数n，请你输出斐波那契数列的第n项。<br>n&lt;=39</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// stackoverflow</span></div><div class="line"><span class="comment">// function Fibonacci(n)&#123;</span></div><div class="line"><span class="comment">//   if(n === 0)&#123;</span></div><div class="line"><span class="comment">//     return 0;</span></div><div class="line"><span class="comment">//   &#125;else if(n === 1)&#123;</span></div><div class="line"><span class="comment">//     return 1;</span></div><div class="line"><span class="comment">//   &#125;else&#123;</span></div><div class="line"><span class="comment">//     return Fibonacci(n-1)+Fibonacci(n-2);</span></div><div class="line"><span class="comment">//   &#125;</span></div><div class="line"><span class="comment">// &#125;</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Fibonacci</span>(<span class="params">n</span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> f = <span class="number">0</span>;</div><div class="line">  <span class="keyword">var</span> g = <span class="number">1</span>;</div><div class="line">  <span class="keyword">while</span>(n--)&#123;</div><div class="line">    g += f;</div><div class="line">    f = g - f;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> f;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>思路</strong><br>斐波那契数列<br>F(0)=0，F(1)=1, F(n)=F(n-1)+F(n-2)（n&gt;=2，n∈N*）<br>在这里用递归是行不通的，测试用例会有个非常大的值会导致stackoverflow<br>首先什么是动态规划，了解一下<br><a href="https://www.zhihu.com/question/23995189" target="_blank" rel="external">什么是动态规划？动态规划的意义是什么？ - 知乎</a><br>看完了貌似懂了一点点，又貌似什么都不懂<br>反正对于这题来讲就是以一定的空间代价换取重复的大量计算<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">n&gt;=1</div><div class="line">根据前两个状态计算下一个状态</div><div class="line">f        g      g</div><div class="line">f(n-1) + f(n) = f(n+1)</div><div class="line">更新f变量</div><div class="line">g        f        f</div><div class="line">f(n+1) - f(n-1) = f(n)</div></pre></td></tr></table></figure></p><a id="more"></a><h2 id="2-跳台阶"><a href="#2-跳台阶" class="headerlink" title="2.跳台阶"></a>2.跳台阶</h2><p><strong>题目描述</strong><br>一只青蛙一次可以跳上1级台阶，也可以跳上2级。求该青蛙跳上一个n级的台阶总共有多少种跳法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">jumpFloor</span>(<span class="params">number</span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> f = <span class="number">1</span>;</div><div class="line">  <span class="keyword">var</span> g = <span class="number">2</span>;</div><div class="line">  <span class="keyword">while</span>(--number)&#123;</div><div class="line">    g += f;</div><div class="line">    f = g - f;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> f;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>思路</strong><br>    f(1) = 1<br>    f(2) = 2<br>    f(3) = 3<br>    f(4) = 5<br>    f(5) = 8<br>    …<br>           | 1 (n=1)<br>    f(n) = | 2 (n=2)<br>           | f(n-1) + f(n-2) (n&gt;2，n∈N*)<br>依旧类似斐波那契数列</p><h2 id="3-变态跳台阶"><a href="#3-变态跳台阶" class="headerlink" title="3.变态跳台阶"></a>3.变态跳台阶</h2><p><strong>题目描述</strong><br>一只青蛙一次可以跳上1级台阶，也可以跳上2级……它也可以跳上n级。求该青蛙跳上一个n级的台阶总共有多少种跳法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">jumpFloorII</span>(<span class="params">number</span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="number">1</span>&lt;&lt;(--number);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>思路</strong><br>因为n级台阶，第一步有n种跳法：跳1级、跳2级、到跳n级<br>跳1级，剩下n-1级，则剩下跳法是f(n-1)<br>跳2级，剩下n-2级，则剩下跳法是f(n-2)<br>f(1) = 1<br>所以f(n)=f(n-1)+f(n-2)+…+f(1)<br>因为f(n-1)=f(n-2)+f(n-3)+…+f(1)<br>所以f(n)=2*f(n-1)<br>f(n) = 2^(n-1)</p><h2 id="4-矩形覆盖"><a href="#4-矩形覆盖" class="headerlink" title="4.矩形覆盖"></a>4.矩形覆盖</h2><p><strong>题目描述</strong><br>我们可以用2*1的小矩形横着或者竖着去覆盖更大的矩形。请问用n个2*1的小矩形无重叠地覆盖一个2*n的大矩形，总共有多少种方法？</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div></pre></td></tr></table></figure><p><strong>思路</strong></p><h2 id="5-用两个栈实现队列"><a href="#5-用两个栈实现队列" class="headerlink" title="5.用两个栈实现队列"></a>5.用两个栈实现队列</h2><p><strong>题目描述</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div></pre></td></tr></table></figure><p><strong>思路</strong></p><h2 id="6-旋转数组的最小数字"><a href="#6-旋转数组的最小数字" class="headerlink" title="6.旋转数组的最小数字"></a>6.旋转数组的最小数字</h2><p><strong>题目描述</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div></pre></td></tr></table></figure><p><strong>思路</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-斐波那契数列&quot;&gt;&lt;a href=&quot;#1-斐波那契数列&quot; class=&quot;headerlink&quot; title=&quot;1.斐波那契数列&quot;&gt;&lt;/a&gt;1.斐波那契数列&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;题目描述&lt;/strong&gt;&lt;br&gt;大家都知道&lt;a href=&quot;https://baike.baidu.com/item/%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97/99145&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;斐波那契数列&lt;/a&gt;，现在要求输入一个整数n，请你输出斐波那契数列的第n项。&lt;br&gt;n&amp;lt;=39&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// stackoverflow&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// function Fibonacci(n)&amp;#123;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//   if(n === 0)&amp;#123;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//     return 0;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//   &amp;#125;else if(n === 1)&amp;#123;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//     return 1;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//   &amp;#125;else&amp;#123;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//     return Fibonacci(n-1)+Fibonacci(n-2);&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//   &amp;#125;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// &amp;#125;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Fibonacci&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;n&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; f = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; g = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(n--)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    g += f;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    f = g - f;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; f;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;思路&lt;/strong&gt;&lt;br&gt;斐波那契数列&lt;br&gt;F(0)=0，F(1)=1, F(n)=F(n-1)+F(n-2)（n&amp;gt;=2，n∈N*）&lt;br&gt;在这里用递归是行不通的，测试用例会有个非常大的值会导致stackoverflow&lt;br&gt;首先什么是动态规划，了解一下&lt;br&gt;&lt;a href=&quot;https://www.zhihu.com/question/23995189&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;什么是动态规划？动态规划的意义是什么？ - 知乎&lt;/a&gt;&lt;br&gt;看完了貌似懂了一点点，又貌似什么都不懂&lt;br&gt;反正对于这题来讲就是以一定的空间代价换取重复的大量计算&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;n&amp;gt;=1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;根据前两个状态计算下一个状态&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;f        g      g&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;f(n-1) + f(n) = f(n+1)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;更新f变量&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;g        f        f&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;f(n+1) - f(n-1) = f(n)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>牛客网—剑指offer（1）</title>
    <link href="http://yoursite.com/2018/03/20/JavaScript/%E7%89%9B%E5%AE%A2%E7%BD%91%E2%80%94%E5%89%91%E6%8C%87offer%EF%BC%881%EF%BC%89/"/>
    <id>http://yoursite.com/2018/03/20/JavaScript/牛客网—剑指offer（1）/</id>
    <published>2018-03-20T12:20:48.000Z</published>
    <updated>2018-03-21T07:56:51.490Z</updated>
    
    <content type="html"><![CDATA[<p>最近面临找工作的事，就准备写些关于数据结构的题。<br>题目地址：<a href="https://www.nowcoder.com/ta/coding-interviews?page=1" target="_blank" rel="external">剑指Offer_编程题_牛客网</a><br>一共66题，题目不提供测试用例有时都不知道怎么写。</p><h2 id="1-二维数组中的查找"><a href="#1-二维数组中的查找" class="headerlink" title="1.二维数组中的查找"></a>1.二维数组中的查找</h2><p><strong>题目描述</strong><br>在一个二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Find</span>(<span class="params">target, array</span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> row = array.length;</div><div class="line">  <span class="keyword">var</span> col = array[<span class="number">0</span>].length;</div><div class="line">  <span class="keyword">if</span>(row === <span class="number">0</span> || col === <span class="number">0</span>)<span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line"></div><div class="line">  <span class="keyword">var</span> i = row - <span class="number">1</span>;</div><div class="line">  <span class="keyword">var</span> j = <span class="number">0</span>;</div><div class="line"></div><div class="line">  <span class="keyword">while</span>(i &gt;= <span class="number">0</span> &amp;&amp; j &lt; col)&#123;</div><div class="line">      <span class="keyword">if</span>(array[i][j] &gt; target) i--;</div><div class="line">      <span class="keyword">else</span> <span class="keyword">if</span>(array[i][j] &lt; target) j++;</div><div class="line">      <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>思路</strong><br>利用二维数组由上到下，由左到右递增的规律<br>那么选取右上角或者左下角的元素array[row][col]与target进行比较<br>当target小于元素array[row][col]时，那么target必定在元素a所在行的左边,即col--<br>当target大于元素array[row][col]时，那么target必定在元素a所在列的下边,即row++</p><a id="more"></a><h2 id="2-替换空格"><a href="#2-替换空格" class="headerlink" title="2.替换空格"></a>2.替换空格</h2><p><strong>题目描述</strong><br>请实现一个函数，将一个字符串中的空格替换成“%20”。例如，当字符串为We Are Happy.则经过替换之后的字符串为We%20Are%20Happy。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">replaceSpace</span>(<span class="params">str</span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span> str.replace(<span class="regexp">/\s/g</span>,<span class="string">'%20'</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>思路</strong><br>无f**k可说。</p><h2 id="3-从尾到头打印链表"><a href="#3-从尾到头打印链表" class="headerlink" title="3.从尾到头打印链表"></a>3.从尾到头打印链表</h2><p><strong>题目描述</strong><br>输入一个链表，从尾到头打印链表每个节点的值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">ListNode</span>(<span class="params">x</span>)</span>&#123;</div><div class="line">  <span class="keyword">this</span>.val = x;</div><div class="line">  <span class="keyword">this</span>.next = <span class="literal">null</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">printListFromTailToHead</span>(<span class="params">head</span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> array = [];</div><div class="line">  <span class="keyword">while</span>(head)&#123;</div><div class="line">    array.push(head.val);</div><div class="line">    head = head.next;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> array.reverse();</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>思路</strong><br>null</p><h2 id="4-重建二叉树"><a href="#4-重建二叉树" class="headerlink" title="4.重建二叉树"></a>4.重建二叉树</h2><p><strong>题目描述</strong><br>输入某二叉树的前序遍历和中序遍历的结果，请重建出该二叉树。假设输入的前序遍历和中序遍历的结果中都不含重复的数字。例如输入前序遍历序列{1,2,4,7,3,5,6,8}和中序遍历序列{4,7,2,1,5,3,8,6}，则重建二叉树并返回。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">TreeNode</span>(<span class="params">x</span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.val = x;</div><div class="line">  <span class="keyword">this</span>.left = <span class="literal">null</span>;</div><div class="line">  <span class="keyword">this</span>.right = <span class="literal">null</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">reConstructBinaryTree</span>(<span class="params">pre, vin</span>)</span>&#123;</div><div class="line">  <span class="keyword">if</span>(pre.length === <span class="number">0</span> || vin.length === <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">null</span>;</div><div class="line"></div><div class="line">  <span class="keyword">var</span> tree = <span class="keyword">new</span> TreeNode(pre[<span class="number">0</span>]);</div><div class="line">  <span class="keyword">var</span> root = vin.indexOf(pre[<span class="number">0</span>]);</div><div class="line">  <span class="keyword">var</span> left = vin.slice(<span class="number">0</span>,root);</div><div class="line">  <span class="keyword">var</span> right = vin.slice(root+<span class="number">1</span>);</div><div class="line">  pre.shift();</div><div class="line"></div><div class="line">  tree.left = reConstructBinaryTree(pre,left);</div><div class="line">  tree.right = reConstructBinaryTree(pre,right);</div><div class="line"></div><div class="line">  <span class="keyword">return</span> tree;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>思路</strong><br>首先重构二叉树需要有<strong>前序遍历+中序遍历</strong>或者<strong>中序遍历+后序遍历</strong><br>以题目提供的例子前序遍历+中序遍历为例<br>前序遍历的顺序是：根-&gt;左子树-&gt;右子树<br>中序遍历的顺序是：左子树-&gt;根-&gt;右子树<br>前序遍历的第一个元素是整颗树的根节点<br>根据根节点和中序遍历来划分左子树和右子树<br>左子树:{4,7,2}根:{1}右子树:{5,3,8,6}<br>如果左子树有值，则前序遍历第二个值为左子树的根<br>左子树:{4,7}根:{2}右子树:{}<br>如果左子树有值，则前序遍历第三个值为左子树的根<br>左子树:{}根:{4}右子树:{7}<br>以此类推<br>中序遍历+后序遍历同理<br>重构后的树<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">      1</div><div class="line">    /   \</div><div class="line">   2     3</div><div class="line"> /     /   \</div><div class="line">4     5     6</div><div class="line"> \         /</div><div class="line">  7       8</div></pre></td></tr></table></figure></p><h2 id="5-用两个栈实现队列"><a href="#5-用两个栈实现队列" class="headerlink" title="5.用两个栈实现队列"></a>5.用两个栈实现队列</h2><p><strong>题目描述</strong><br>用两个栈来实现一个队列，完成队列的Push和Pop操作。 队列中的元素为int类型。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> stackA = [];</div><div class="line"><span class="keyword">var</span> stackB = [];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">push</span>(<span class="params">node</span>)</span>&#123;</div><div class="line">  stackA.push(node);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">pop</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">if</span>(stackA.length === <span class="number">0</span> &amp;&amp; stackB.length === <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">null</span>;</div><div class="line">  <span class="keyword">if</span>(stackB.length === <span class="number">0</span>)&#123;</div><div class="line">    <span class="keyword">while</span>(stackA.length &gt; <span class="number">0</span>)&#123;</div><div class="line">      stackB.push(stackA.pop());</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> stackB.pop();</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>思路</strong><br>这题是让我们用两个栈来模拟一个队列的push和pop操作<br>首先栈是LIFO（Last in, First out,后进先出），队列是（First in, First out,先进先出）<br>push：将元素进stackA<br>pop：判断stackB是否为空，如果为空，则将stackA中的所有元素pop并push进stackB，stackB出栈<br>如果不为空，则直接stackB出栈</p><h2 id="6-旋转数组的最小数字"><a href="#6-旋转数组的最小数字" class="headerlink" title="6.旋转数组的最小数字"></a>6.旋转数组的最小数字</h2><p><strong>题目描述</strong><br>把一个数组最开始的若干个元素搬到数组的末尾，我们称之为数组的旋转。 输入一个非递减排序的数组的一个旋转，输出旋转数组的最小元素。 例如数组{3,4,5,1,2}为{1,2,3,4,5}的一个旋转，该数组的最小值为1。 NOTE：给出的所有元素都大于0，若数组大小为0，请返回0。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 虽然可以这么做，但这题很明显不是让我们这么做</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">minNumberInRotateArray</span>(<span class="params">rotateArray</span>)</span>&#123;</div><div class="line">  <span class="keyword">if</span>(rotateArray.length === <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">  <span class="keyword">return</span> <span class="built_in">Math</span>.min.apply(<span class="built_in">Math</span>,rotateArray);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 二分法</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">minNumberInRotateArray</span>(<span class="params">rotateArray</span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> left = <span class="number">0</span>;</div><div class="line">  <span class="keyword">var</span> mid = <span class="number">0</span>;</div><div class="line">  <span class="keyword">var</span> right = rotateArray.length<span class="number">-1</span>;</div><div class="line"></div><div class="line">  <span class="comment">// 数组大小为0返回0</span></div><div class="line">  <span class="keyword">if</span>(rotateArray.length === <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line"></div><div class="line">  <span class="keyword">while</span>(rotateArray[left] &gt;= rotateArray[right])&#123;</div><div class="line">    <span class="comment">// 如果两个指针相邻，则最小值为right指针</span></div><div class="line">    <span class="keyword">if</span>(right - left === <span class="number">1</span>)&#123;</div><div class="line">      mid = right;</div><div class="line">      <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    mid = <span class="built_in">Math</span>.ceil((left + right) / <span class="number">2</span>);</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(rotateArray[mid] &gt;= rotateArray[left])&#123;</div><div class="line">      left = mid;</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">      right = mid;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> rotateArray[mid];</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>思路</strong><br>这是一道二分查找的变形的题目。<br>旋转之后的数组实际上可以划分成两个有序的子数组：前面子数组的大小都大于后面子数组中的元素<br>注意到实际上最小的元素就是两个子数组的分界线。本题目给出的数组一定程度上是排序的，因此我们试着用二分查找法寻找这个最小的元素。<br>思路：<br>（1）我们用两个指针left,right分别指向数组的第一个元素和最后一个元素。按照题目的旋转的规则，第一个元素应该是大于最后一个元素的（没有重复的元素）。但是如果不是旋转，第一个元素肯定小于最后一个元素。<br>（2）找到数组的中间元素。中间元素大于第一个元素，则中间元素位于前面的递增子数组，此时最小元素位于中间元素的后面。我们可以让第一个指针left指向中间元素。移动之后，第一个指针仍然位于前面的递增数组中。中间元素小于第一个元素，则中间元素位于后面的递增子数组，此时最小元素位于中间元素的前面。我们可以让第二个指针right指向中间元素。移动之后，第二个指针仍然位于后面的递增数组中。这样可以缩小寻找的范围。<br>（3）按照以上思路，第一个指针left总是指向前面递增数组的元素，第二个指针right总是指向后面递增的数组元素。最终第一个指针将指向前面数组的最后一个元素，第二个指针指向后面数组中的第一个元素。也就是说他们将指向两个相邻的元素，而第二个指针指向的刚好是最小的元素，这就是循环的结束条件。<br><a href="https://www.nowcoder.com/profile/4588862/codeBookDetail?submissionId=12259176" target="_blank" rel="external">@念润</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近面临找工作的事，就准备写些关于数据结构的题。&lt;br&gt;题目地址：&lt;a href=&quot;https://www.nowcoder.com/ta/coding-interviews?page=1&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;剑指Offer_编程题_牛客网&lt;/a&gt;&lt;br&gt;一共66题，题目不提供测试用例有时都不知道怎么写。&lt;/p&gt;
&lt;h2 id=&quot;1-二维数组中的查找&quot;&gt;&lt;a href=&quot;#1-二维数组中的查找&quot; class=&quot;headerlink&quot; title=&quot;1.二维数组中的查找&quot;&gt;&lt;/a&gt;1.二维数组中的查找&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;题目描述&lt;/strong&gt;&lt;br&gt;在一个二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Find&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;target, array&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; row = array.length;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; col = array[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;].length;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(row === &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; || col === &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i = row - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; j = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(i &amp;gt;= &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;amp;&amp;amp; j &amp;lt; col)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(array[i][j] &amp;gt; target) i--;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(array[i][j] &amp;lt; target) j++;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;思路&lt;/strong&gt;&lt;br&gt;利用二维数组由上到下，由左到右递增的规律&lt;br&gt;那么选取右上角或者左下角的元素array[row][col]与target进行比较&lt;br&gt;当target小于元素array[row][col]时，那么target必定在元素a所在行的左边,即col--&lt;br&gt;当target大于元素array[row][col]时，那么target必定在元素a所在列的下边,即row++&lt;/p&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>2017年终吐槽</title>
    <link href="http://yoursite.com/2017/12/24/essay/2017%E5%B9%B4%E7%BB%88%E5%90%90%E6%A7%BD/"/>
    <id>http://yoursite.com/2017/12/24/essay/2017年终吐槽/</id>
    <published>2017-12-24T03:38:48.000Z</published>
    <updated>2017-12-24T14:02:14.817Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><p>&emsp;&emsp;好久没进行更新了，已经有两个月没写过代码了，这两个月一直忙着学英语（都是四级的锅），不过经过这两个月的英语学习我也发现了，英语对我今后的发展还是很重要的，所以今后的英语的学习是要一直持续下去的。四级已经考完了希望能过吧，毕竟大学的最后一次考试我还想考一次六级呢(☄⊙ω⊙)☄万一过了呢。</p><p>&emsp;&emsp;好扯回正题，17年是我正式步入前端的一年，之前的学习就像是在小打小闹，正式的入门是从今年百度ife活动开始的，我一步步跟着ife的任务进行学习，遇到困难问题只能自己解决没人指导，学起来有点痛苦，不过我认为这也是一种锻炼。ife上的任务我觉得挺适合给自学的初学者，我已经安利给好几位同学了，不过貌似他们都不怎么在意。在持续了两个月的学习之后又得去忙学校的各种实验、实训，暑假还得去学校安排的培训机构去学习，说实话那些培训机构挺水的，貌似停留在几年前的那种水平。然后今年大四上学期也就学习了两个月，后两个月在学英语了，从我github上的contributions也就能看出我今年学习的时间了。</p><p>&emsp;&emsp;好在接下来没课了，也有了大把时间来进行学习了，找工作的事在往后延延，趁现在寒假有时间想做完毕业设计，目前毕业设计打算做一个canvas的球球大作战游戏，在这之前先完成一个TODOlist，用于记录下自己想完成的东西，以后可以很方便的回顾自己做了什么、学到了什么。先给自己寒假定个小目标：完成TODOlist、完成毕业设计、坚持学英语。毕业目标就是月薪达到10k以上。</p><p>&emsp;&emsp;今年对我来讲算是一个转折点了，清楚自己想干什么，今后的发展以及目标都定好了，大学四年转眼间就过去了，仔细回想起来这四年过的很失败，貌似啥也没学会，还是以前的那个我。临近毕业了，学生生涯将要结束了，这意味着走向社会了，今后主要是靠自己，总之加油吧。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;好久没进行更新了，已经有两个月没写过代码了，这两个月一直忙着学英语（都是四级的锅），不过经过这两个月的英语学习我也发现了，英语对我今后的发展还是很重要的，所以今后的英语的学习是要一直持续下去的。四级已经考完了希望能
      
    
    </summary>
    
      <category term="随笔" scheme="http://yoursite.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="随笔" scheme="http://yoursite.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>webpack 3.x</title>
    <link href="http://yoursite.com/2017/10/16/webpack/webpack%203.x/"/>
    <id>http://yoursite.com/2017/10/16/webpack/webpack 3.x/</id>
    <published>2017-10-16T08:46:01.000Z</published>
    <updated>2017-11-03T04:28:29.570Z</updated>
    
    <content type="html"><![CDATA[<p>今天有时间仔细的学习一下webpack，将简单的整理一下<a href="https://doc.webpack-china.org/" target="_blank" rel="external">官网</a>的内容<br>webpack测试版本<img src="https://img.shields.io/badge/webpack-3.7.1-brightgreen.svg" alt=""></p><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>webpack 是一个现代 JavaScript 应用程序的模块打包器(module bundler)。当 webpack 处理应用程序时，它会递归地构建一个依赖关系图(dependency graph)，其中包含应用程序需要的每个模块，然后将所有这些模块打包成少量的 bundle - 通常只有一个，由浏览器加载。</p><a id="more"></a><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>在开始之前，请确保安装了 Node.js 的最新版本。<br>要安装最新版本或特定版本，请运行以下命令之一：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">npm install --save-dev webpack</div><div class="line">npm install --save-dev webpack@&lt;version&gt;</div></pre></td></tr></table></figure><p>对于大多数项目，我们建议本地安装。这可以使我们在引入破坏式变更(breaking change)的依赖时，更容易分别升级项目。<br>不推荐全局安装 webpack。这会将您项目中的 webpack 锁定到指定版本，并且在使用不同的 webpack 版本的项目中，可能会导致构建失败。</p><h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">mkdir webpack-demo &amp;&amp; <span class="built_in">cd</span> webpack-demo</div><div class="line">npm init -y</div><div class="line">npm install --save-dev webpack</div></pre></td></tr></table></figure><p>首先新建一个index.html<br>index.html:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./dist/bundle.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p><p>接下来在src文件夹下新建一个index.js文件<br>这个js文件就是我们写js代码的入口文件</p><p>index.js:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">component</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> element = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</div><div class="line">  element.innerHTML = <span class="string">'hello webpack!'</span>;</div><div class="line">  <span class="keyword">return</span> element;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">document</span>.body.appendChild(component());</div></pre></td></tr></table></figure></p><p>虽然webpack有几种配置方法，但大多数项目会需要很复杂的设置，所以大多情况下都采用写webpack的配置文件。这比在终端(terminal)中输入大量命令要高效的多。</p><p>webpack.config.js:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  entry: <span class="string">'./src/index.js'</span>,<span class="comment">// 入口文件</span></div><div class="line">  output: &#123;</div><div class="line">    filename: <span class="string">'bundle.js'</span>,<span class="comment">// 输出的文件名</span></div><div class="line">    path: path.resolve(__dirname, <span class="string">'dist'</span>)<span class="comment">// 输出的文件路径</span></div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p><p>由于webpack不是全局安装，所以不能直接在cmd里运行webpack命令，所以可以在package.json的scripts中加入”build”: “webpack”，接下来就可以在cmd里运行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm run build</div></pre></td></tr></table></figure></p><p>不用package.json的方法也可以直接：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">node_modules/.bin/webpack --config webpack.config.js</div></pre></td></tr></table></figure></p><p>接着就可以看到目录下多了一个dist文件夹和bundle.js文件<br>目录：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">webpack-demo</div><div class="line">  |- index.html</div><div class="line">  |- package.json</div><div class="line">  |- package-lock.json</div><div class="line">  |- webpack.config.js</div><div class="line">  |- /dist</div><div class="line">    |- bundle.js</div><div class="line">  |- /src</div><div class="line">    |- index.js</div><div class="line">  |- node_modules</div></pre></td></tr></table></figure><p>最后在html里引入bundle.js即可，最简单的demo就完成了</p><hr><h1 id="Entry、Output、Loader、Plugins"><a href="#Entry、Output、Loader、Plugins" class="headerlink" title="Entry、Output、Loader、Plugins"></a>Entry、Output、Loader、Plugins</h1><p>在接着往下之前先学习四个核心概念：入口(entry)、输出(output)、loader、插件(plugins)</p><h2 id="入口-entry"><a href="#入口-entry" class="headerlink" title="入口(entry)"></a>入口(entry)</h2><p>入口起点(entry point)告诉 webpack 从哪里开始，并根据依赖关系图确定需要打包的内容。可以将应用程序的入口起点认为是<strong>根上下文(contextual root)</strong> 或 <strong>app 第一个启动文件</strong>。</p><p>在 webpack 中，我们使用 webpack 配置对象(webpack configuration object) 中的 entry 属性来定义入口。</p><p>在上面的例子中的webpack.config.js:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  entry: <span class="string">'./src/index.js'</span>,<span class="comment">// 入口文件</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>根据不同应用程序的需要，声明 entry 属性有多种方式。</p><p><a href="https://doc.webpack-china.org/concepts/entry-points" target="_blank" rel="external">了解更多！</a></p><h2 id="输出-output"><a href="#输出-output" class="headerlink" title="输出(output)"></a>输出(output)</h2><p>将所有的资源(assets)归拢在一起后，还需要告诉 webpack 在哪里打包应用程序。webpack 的 <code>output</code> 属性描述了如何处理归拢在一起的代码(bundled code)。</p><p>在上面的例子中的webpack.config.js:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  entry: <span class="string">'./src/index.js'</span>,<span class="comment">// 入口文件</span></div><div class="line">  output: &#123;</div><div class="line">    path: path.resolve(__dirname, <span class="string">'dist'</span>)<span class="comment">// 输出的文件路径</span></div><div class="line">    filename: <span class="string">'bundle.js'</span>,<span class="comment">// 输出的文件名</span></div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><p>在上面的例子中，我们通过 <code>output.filename</code> 和 <code>output.path</code> 属性，来告诉 webpack bundle 的名称，以及我们想要生成(emit)到哪里。</p><p><code>output</code> 属性还有<a href="https://doc.webpack-china.org/configuration/output" target="_blank" rel="external">更多可配置的特性</a>，但让我们花一些时间先了解一些 <code>output</code> 属性最常见的用例。</p><p><a href="https://doc.webpack-china.org/concepts/output" target="_blank" rel="external">了解更多！</a></p><h2 id="Loader"><a href="#Loader" class="headerlink" title="Loader"></a>Loader</h2><p>loader 用于对模块的源代码进行转换。loader 可以使你在 import 或”加载”模块时预处理文件。因此，loader 类似于其他构建工具中“任务(task)”，并提供了处理前端构建步骤的强大方法。loader 可以将文件从不同的语言（如 TypeScript）转换为 JavaScript，或将内联图像转换为 data URL。loader 甚至允许你直接在 JavaScript 模块中 import CSS文件！</p><p>在 webpack 的配置中 loader 有两个目标：</p><ol><li>识别出(identify)应该被对应的 loader 进行转换(transform)的那些文件。(<code>test</code> 属性)</li><li>转换这些文件，从而使其能够被添加到依赖图中（并且最终添加到 bundle 中）(<code>use</code> 属性)</li></ol><p>在刚刚上面那个例子的基础上我们要用sass来写css，可是浏览器不能直接运行sass，要进行转换后才可以运行，这时就需要sass-loder来对sass文件转换为css文件，还要用PostCSS的插件Autoprefixer来处理css前缀</p><p>那么怎么用呢？</p><p>要转换sass文件需要sass-loader style-loader css-loader node-sass<br>处理前缀需要postcss-loader autoprefixer</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">npm i -D sass-loader style-loader css-loader node-sass postcss-loader autoprefixer</div><div class="line">// 报错就cnpm或设置镜像或FQ</div></pre></td></tr></table></figure><p>接下来在src下新建一个index.scss文件</p><p>index.scs:<br><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$red-color</span>: <span class="number">#f00</span>;</div><div class="line"></div><div class="line"><span class="selector-tag">div</span>&#123;</div><div class="line">  <span class="attribute">color</span>: <span class="variable">$red-color</span>;</div><div class="line">  <span class="attribute">display</span>: flex;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>然后在index.js中import scss</p><p>index.js:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> <span class="string">'./index.scss'</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">component</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> element = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</div><div class="line">  element.innerHTML = <span class="string">'hello webpack!'</span>;</div><div class="line">  <span class="keyword">return</span> element;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">document</span>.body.appendChild(component());</div></pre></td></tr></table></figure></p><p>webpack.config.js:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  entry: <span class="string">'./src/index.js'</span>,</div><div class="line">  output: &#123;</div><div class="line">    filename: <span class="string">'bundle.js'</span>,</div><div class="line">    path: path.resolve(__dirname, <span class="string">'dist'</span>)</div><div class="line">  &#125;,</div><div class="line">  <span class="built_in">module</span>: &#123;</div><div class="line">    rules: [<span class="comment">// rules新语法，有些旧语法是loaders</span></div><div class="line">      &#123;</div><div class="line">        test: <span class="regexp">/\.(scss|sass)$/</span>, <span class="comment">// 正则表达式匹配文件</span></div><div class="line">        <span class="comment">// use用于写多个loader</span></div><div class="line">        <span class="comment">// loader应用有先后顺序，从后往前（从右往左）应用</span></div><div class="line">        <span class="comment">// loader: 'style-loader!css-loader!sass-loder'</span></div><div class="line">        use: [</div><div class="line">          &#123;</div><div class="line">            loader: <span class="string">'style-loader'</span></div><div class="line">            <span class="comment">// style-loader 能够注入&lt;style&gt;标签将CSS添加到DOM</span></div><div class="line">            <span class="comment">// https://github.com/webpack-contrib/style-loader</span></div><div class="line">            options: &#123;</div><div class="line">              sourceMap: <span class="literal">true</span></div><div class="line">            &#125;</div><div class="line">          &#125;,</div><div class="line">          &#123;</div><div class="line">            loader: <span class="string">'css-loader'</span>,</div><div class="line">            <span class="comment">// css-loader 能够将@import和url()的方法解析为类似import/require()的功能</span></div><div class="line">            <span class="comment">// options: https://github.com/webpack-contrib/css-loader</span></div><div class="line">            options: &#123;</div><div class="line">              modules: <span class="literal">true</span>,</div><div class="line">              sourceMap: <span class="literal">true</span>,</div><div class="line">              importLoaders: <span class="number">2</span>, <span class="comment">// 0 =&gt; no loaders (default); 1 =&gt; postcss-loader; 2 =&gt; postcss-loader, sass-loader</span></div><div class="line">              <span class="comment">// localIdentName http://www.w3cplus.com/react/css-modules-for-react.html</span></div><div class="line">              localIdentName: <span class="string">'[name]__[local]-[hash:base64:5]'</span></div><div class="line">            &#125;</div><div class="line">          &#125;,</div><div class="line">          &#123;</div><div class="line">            loader: <span class="string">'postcss-loader'</span>,</div><div class="line">            <span class="comment">// 使用autoprefixer插件自动处理理浏览器前缀</span></div><div class="line">            <span class="comment">// postcss-loader https://github.com/postcss/postcss-loader#examples</span></div><div class="line">            options: &#123;</div><div class="line">              sourceMap: <span class="literal">true</span>,</div><div class="line">              plugins: [</div><div class="line">                <span class="comment">// autoprefixer https://github.com/postcss/autoprefixer#options</span></div><div class="line">                <span class="built_in">require</span>(<span class="string">'autoprefixer'</span>)(&#123;<span class="attr">browserslist</span>: <span class="string">'last 2 versions or &gt; 5%'</span>&#125;)</div><div class="line">              ]</div><div class="line">            &#125;</div><div class="line">          &#125;,</div><div class="line">          &#123;</div><div class="line">            loader: <span class="string">'sass-loader'</span>,</div><div class="line">            <span class="comment">// 处理scss文件</span></div><div class="line">            <span class="comment">// options: https://github.com/sass/node-sass</span></div><div class="line">            options: &#123;</div><div class="line">              outputStyle: <span class="string">'compressed'</span>,</div><div class="line">              sourceMap: <span class="literal">true</span>,</div><div class="line">            &#125;</div><div class="line">          &#125;</div><div class="line">        ]</div><div class="line">      &#125;</div><div class="line">    ]</div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p><p>接下来build一下就可以打开html看效果了</p><p>目录结构：<br><figure class="highlight diff"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">webpack-demo</div><div class="line">  |- index.html</div><div class="line">  |- package.json</div><div class="line">  |- package-lock.json</div><div class="line">  |- webpack.config.js</div><div class="line">  |- /dist</div><div class="line">    |- bundle.js</div><div class="line">  |- /src</div><div class="line">    |- index.js</div><div class="line"><span class="addition">+   |- index.scss</span></div><div class="line">  |- node_modules</div></pre></td></tr></table></figure></p><p>但是打开网页就会发现css和js没有分离开来，而是合成在js里了，这就需要插件(Plugins)来处理了</p><h2 id="插件-Plugins"><a href="#插件-Plugins" class="headerlink" title="插件(Plugins)"></a>插件(Plugins)</h2><p>为什么会有插件呢？<br>插件目的在于解决 loader 无法实现的其他事。</p><p>对于上个例子如果想把css单独打包出来的话就要用到<a href="https://github.com/webpack-contrib/extract-text-webpack-plugin" target="_blank" rel="external">extract-text-webpack-plugin</a>然后用<a href="https://github.com/jantimon/html-webpack-plugin" target="_blank" rel="external">html-webpack-plugin</a>将css和js文件自动插入html文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># for webpack 3</span></div><div class="line">npm install --save-dev extract-text-webpack-plugin</div><div class="line"><span class="comment"># for webpack 2</span></div><div class="line">npm install --save-dev extract-text-webpack-plugin@2.1.2</div><div class="line"><span class="comment"># for webpack 1</span></div><div class="line">npm install --save-dev extract-text-webpack-plugin@1.0.1</div><div class="line"></div><div class="line">npm install --save-dev html-webpack-plugin</div></pre></td></tr></table></figure><p>首先我们先修改html，删除之前的script标签</p><p>index.html:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p><p>接下来修改webpack.config.js</p><p>webpack.config.js:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</div><div class="line"><span class="keyword">const</span> ExtractTextPlugin = <span class="built_in">require</span>(<span class="string">'extract-text-webpack-plugin'</span>)</div><div class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  entry: <span class="string">'./src/index.js'</span>,</div><div class="line">  output: &#123;</div><div class="line">    filename: <span class="string">'bundle.js'</span>,</div><div class="line">    path: path.resolve(__dirname, <span class="string">'dist/js'</span>)</div><div class="line">  &#125;,</div><div class="line">  devtool: <span class="string">"source-map"</span>,   <span class="comment">// 可以开启生成sourceMap</span></div><div class="line">  <span class="built_in">module</span>: &#123;</div><div class="line">    rules: [</div><div class="line">      &#123;</div><div class="line">        test: <span class="regexp">/\.(scss|sass)$/</span>,</div><div class="line">        <span class="comment">// https://github.com/webpack-contrib/extract-text-webpack-plugin#extract</span></div><div class="line">        use: ExtractTextPlugin.extract(&#123;</div><div class="line">          fallback: <span class="string">'style-loader'</span>,   <span class="comment">// 当CSS未被提取时应该使用的loader</span></div><div class="line">          use: [</div><div class="line">            &#123;</div><div class="line">              loader: <span class="string">'css-loader'</span>,</div><div class="line">              options: &#123;</div><div class="line">                modules: <span class="literal">true</span>,</div><div class="line">                sourceMap: <span class="literal">true</span>,</div><div class="line">                importLoaders: <span class="number">2</span>,</div><div class="line">                localIdentName: <span class="string">'[name]__[local]-[hash:base64:5]'</span></div><div class="line">              &#125;</div><div class="line">            &#125;,</div><div class="line">            &#123;</div><div class="line">              loader: <span class="string">'postcss-loader'</span>,</div><div class="line">              options: &#123;</div><div class="line">                sourceMap: <span class="literal">true</span>,</div><div class="line">                plugins: [</div><div class="line">                  <span class="built_in">require</span>(<span class="string">'autoprefixer'</span>)(&#123;<span class="attr">browserslist</span>: <span class="string">'last 2 versions or &gt; 5%'</span>&#125;)</div><div class="line">                ]</div><div class="line">              &#125;</div><div class="line">            &#125;,</div><div class="line">            &#123;</div><div class="line">              loader: <span class="string">'sass-loader'</span>,</div><div class="line">              options: &#123;</div><div class="line">                outputStyle: <span class="string">'compressed'</span>,</div><div class="line">                sourceMap: <span class="literal">true</span>,</div><div class="line">              &#125;</div><div class="line">            &#125;</div><div class="line">          ]</div><div class="line">        &#125;)</div><div class="line">      &#125;</div><div class="line">    ]</div><div class="line">  &#125;,</div><div class="line">  plugins: [</div><div class="line">    <span class="comment">// more options:</span></div><div class="line">    <span class="comment">// https://github.com/webpack-contrib/extract-text-webpack-plugin#options</span></div><div class="line">    <span class="keyword">new</span> ExtractTextPlugin(<span class="string">'css/style.css'</span>),</div><div class="line">    <span class="comment">// more options:</span></div><div class="line">    <span class="comment">// https://github.com/jantimon/html-webpack-plugin#configuration</span></div><div class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</div><div class="line">      filename: <span class="string">'index.html'</span>,   <span class="comment">// 生成的文件名</span></div><div class="line">      template: <span class="string">'index.html'</span>,   <span class="comment">// html模板</span></div><div class="line">      inject: <span class="literal">true</span>,   <span class="comment">// 文件注入位置（js在body，css在head）</span></div><div class="line">      minify: &#123;   <span class="comment">// 开启html压缩，开发环境下可以不开启压缩</span></div><div class="line">        removeComments: <span class="literal">true</span>,</div><div class="line">        collapseWhitespace: <span class="literal">true</span>,</div><div class="line">        removeAttributeQuotes: <span class="literal">true</span></div><div class="line">        <span class="comment">// more options:</span></div><div class="line">        <span class="comment">// https://github.com/kangax/html-minifier#options-quick-reference</span></div><div class="line">      &#125;</div><div class="line">    &#125;)</div><div class="line">  ]</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p><p>build一下</p><p>目录结构：<br><figure class="highlight diff"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">webpack-demo</div><div class="line">  |- index.html</div><div class="line">  |- package.json</div><div class="line">  |- package-lock.json</div><div class="line">  |- webpack.config.js</div><div class="line">  |- /dist</div><div class="line">    |- bundle.js</div><div class="line"><span class="addition">+   |- bundle.js.map</span></div><div class="line"><span class="addition">+   |- index.html</span></div><div class="line"><span class="addition">+   |- /css</span></div><div class="line"><span class="addition">+     |- style.css</span></div><div class="line"><span class="addition">+     |- style.css.map</span></div><div class="line">  |- /src</div><div class="line">    |- index.js</div><div class="line">    |- index.scss</div><div class="line">  |- node_modules</div></pre></td></tr></table></figure></p><p>到此为止webpack四个重要的东西已经学习完了（更详细的用法参考官方文档），当然plugin和loader可不止这么点，还有很多好用的<a href="https://doc.webpack-china.org/plugins/" target="_blank" rel="external">plugin</a>和<a href="https://doc.webpack-china.org/loaders/" target="_blank" rel="external">loader</a>我这没列出来了</p><hr><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>关于webpack就暂时写到这里了，还有很多更好用功能就不详细说明了，webpack更新太快了，从我开始写这些内容到写完时就已经更新两个版本了，现在是3.8.1版本。写太多太详细没用，谁懂哪天就改的面目全非，最好还是用到的时候在学习，最好去官网学习，官方文档不仅写的详细而且用法还是最新的，百度到的很多人写的关于webpack教程的内容都过时了，用法已经大不一样了。好了吐槽就到这里了，在这上面已经用了较多的时间了。</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://doc.webpack-china.org" target="_blank" rel="external">webpack 中文文档</a><br><a href="https://github.com/webpack/webpack" target="_blank" rel="external">webpack github</a><br><a href="https://webpack.js.org/plugins/" target="_blank" rel="external">more plugins</a><br><a href="https://doc.webpack-china.org/plugins/" target="_blank" rel="external">more plugins(中)</a><br><a href="https://webpack.js.org/loaders/" target="_blank" rel="external">more loaders</a><br><a href="https://doc.webpack-china.org/loaders/" target="_blank" rel="external">more loaders(中)</a><br><a href="https://github.com/webpack-contrib/style-loader" target="_blank" rel="external">style-loader</a><br><a href="https://github.com/webpack-contrib/css-loader" target="_blank" rel="external">css-loader</a><br><a href="https://github.com/postcss/postcss-loader" target="_blank" rel="external">postcss-loader</a><br><a href="https://github.com/postcss/autoprefixer" target="_blank" rel="external">autoprefixer</a><br><a href="https://github.com/webpack-contrib/sass-loader" target="_blank" rel="external">sass-loader</a><br><a href="https://github.com/sass/node-sass" target="_blank" rel="external">node-sass</a><br><a href="https://github.com/webpack-contrib/extract-text-webpack-plugin" target="_blank" rel="external">extract-text-webpack-plugin</a><br><a href="https://github.com/jantimon/html-webpack-plugin" target="_blank" rel="external">html-webpack-plugin</a><br><a href="http://www.jianshu.com/p/42e11515c10f" target="_blank" rel="external">入门Webpack，看这篇就够了</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天有时间仔细的学习一下webpack，将简单的整理一下&lt;a href=&quot;https://doc.webpack-china.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;官网&lt;/a&gt;的内容&lt;br&gt;webpack测试版本&lt;img src=&quot;https://img.shields.io/badge/webpack-3.7.1-brightgreen.svg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;webpack 是一个现代 JavaScript 应用程序的模块打包器(module bundler)。当 webpack 处理应用程序时，它会递归地构建一个依赖关系图(dependency graph)，其中包含应用程序需要的每个模块，然后将所有这些模块打包成少量的 bundle - 通常只有一个，由浏览器加载。&lt;/p&gt;
    
    </summary>
    
      <category term="webpack" scheme="http://yoursite.com/categories/webpack/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="webpack" scheme="http://yoursite.com/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>vue仿网易云音乐</title>
    <link href="http://yoursite.com/2017/10/14/vue/vue%E4%BB%BF%E7%BD%91%E6%98%93%E4%BA%91%E9%9F%B3%E4%B9%90/"/>
    <id>http://yoursite.com/2017/10/14/vue/vue仿网易云音乐/</id>
    <published>2017-10-14T13:17:01.000Z</published>
    <updated>2017-10-15T14:03:20.907Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>本项目是一个从零开始学习vue的练手项目，用了vue全家桶（vue+vue-router+vuex）</p><p>想在学习vue时配合实践，做的是一个仿照网易云音乐（andriod）app的spa，用了<a href="https://github.com/Binaryify/NeteaseCloudMusicApi" target="_blank" rel="external">网易云音乐的api</a>，可以进行登录（只能用手机号进行登录），可以播放歌单里的歌等，只完成了播放器最基本的功能</p><a id="more"></a><h1 id="感受"><a href="#感受" class="headerlink" title="感受"></a>感受</h1><p>对于这个项目前前后后用了20天左右才完成，比想象的时间要多，因为从零接触要学习的也比较多，先是看了一遍vue的教程，接着是学习webpack和插件的用法，接下来才是正式开始写，在这之中真是遇到了许多大大小小的问题，由于身边没有可以请教的人，解决问题起来可是麻烦了，只能靠自己上网寻求解决方案和一些自己想当然得做法，对于有些逻辑没有用到最优的解决方案，会产生这些问题都是因为自己的经验不足造成的</p><p>虽然做的内容并不多但我从之中学到了许多的知识，除了对vue的基本用法和概念，还有html5的audio标签的使用和localStorage的使用和跨域的知识，对spa也有了基本的认识，以后有时间将会对以上知识进行整理写成文章</p><h1 id="在线预览"><a href="#在线预览" class="headerlink" title="在线预览"></a>在线预览</h1><p>建议用手机的chrome浏览器进行预览（未做浏览器之间的兼容）<br>由于云主机的带宽小，所有加载会比较慢<br><img src="https://raw.githubusercontent.com/Lexokid/vue-music/master/gif/liantu.png" alt=""></p><p><a href="http://123.207.98.119" target="_blank" rel="external">http://123.207.98.119</a></p><h1 id="界面预览"><a href="#界面预览" class="headerlink" title="界面预览"></a>界面预览</h1><h2 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h2><p><img src="https://raw.githubusercontent.com/Lexokid/vue-music/master/gif/login.gif" alt=""></p><h2 id="歌单"><a href="#歌单" class="headerlink" title="歌单"></a>歌单</h2><p><img src="https://raw.githubusercontent.com/Lexokid/vue-music/master/gif/playlist.gif" alt=""></p><h2 id="播放"><a href="#播放" class="headerlink" title="播放"></a>播放</h2><p><img src="https://raw.githubusercontent.com/Lexokid/vue-music/master/gif/play.gif" alt=""></p><h2 id="改变进度"><a href="#改变进度" class="headerlink" title="改变进度"></a>改变进度</h2><p><img src="https://raw.githubusercontent.com/Lexokid/vue-music/master/gif/select.gif" alt=""></p><h2 id="切换歌曲"><a href="#切换歌曲" class="headerlink" title="切换歌曲"></a>切换歌曲</h2><p><img src="https://raw.githubusercontent.com/Lexokid/vue-music/master/gif/change.gif" alt=""></p><h2 id="中、英歌词"><a href="#中、英歌词" class="headerlink" title="中、英歌词"></a>中、英歌词</h2><p><img src="https://raw.githubusercontent.com/Lexokid/vue-music/master/gif/lyric.gif" alt=""></p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://cn.vuejs.org/v2/guide/" target="_blank" rel="external">vue教程</a><br><a href="https://router.vuejs.org/zh-cn/" target="_blank" rel="external">vue-router教程</a><br><a href="https://vuex.vuejs.org/zh-cn/" target="_blank" rel="external">vuex教程</a><br><a href="https://github.com/Binaryify/NeteaseCloudMusicApi" target="_blank" rel="external">网易云音乐的api</a><br><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Web_Storage_API/Using_the_Web_Storage_API" target="_blank" rel="external">localStorage API</a><br><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/audio" target="_blank" rel="external">audio标签</a><br><a href="https://developer.mozilla.org/zh-CN/docs/Web/Guide/Events/Media_events" target="_blank" rel="external">audio事件</a><br><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Web_Audio_API" target="_blank" rel="external">audio API</a><br><a href="https://www.kancloud.cn/yunye/axios/234845" target="_blank" rel="external">axios 中文说明</a><br><a href="https://github.com/bripkens/connect-history-api-fallback" target="_blank" rel="external">History 模式下的静态服务器</a><br><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS" target="_blank" rel="external">HTTP访问控制（CORS）</a><br><a href="https://github.com/IFmiss/vue-music" target="_blank" rel="external">IFmiss/vue-music</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;本项目是一个从零开始学习vue的练手项目，用了vue全家桶（vue+vue-router+vuex）&lt;/p&gt;
&lt;p&gt;想在学习vue时配合实践，做的是一个仿照网易云音乐（andriod）app的spa，用了&lt;a href=&quot;https://github.com/Binaryify/NeteaseCloudMusicApi&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;网易云音乐的api&lt;/a&gt;，可以进行登录（只能用手机号进行登录），可以播放歌单里的歌等，只完成了播放器最基本的功能&lt;/p&gt;
    
    </summary>
    
      <category term="vue" scheme="http://yoursite.com/categories/vue/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
      <category term="audio" scheme="http://yoursite.com/tags/audio/"/>
    
  </entry>
  
  <entry>
    <title>网页抓取分析服务系列</title>
    <link href="http://yoursite.com/2017/08/16/ife2017/%E7%BD%91%E9%A1%B5%E6%8A%93%E5%8F%96%E5%88%86%E6%9E%90%E6%9C%8D%E5%8A%A1%E7%B3%BB%E5%88%97/"/>
    <id>http://yoursite.com/2017/08/16/ife2017/网页抓取分析服务系列/</id>
    <published>2017-08-16T07:53:00.000Z</published>
    <updated>2017-12-24T14:10:20.466Z</updated>
    
    <content type="html"><![CDATA[<h1 id="网页抓取分析服务系列之一（基础分析）"><a href="#网页抓取分析服务系列之一（基础分析）" class="headerlink" title="网页抓取分析服务系列之一（基础分析）"></a>网页抓取分析服务系列之一（基础分析）</h1><p><a href="http://ife.baidu.com/course/detail/id/8" target="_blank" rel="external">题目地址</a></p><blockquote><p>任务描述</p></blockquote><ul><li>编写一个task.js脚本，参考官网的includeJs方法，实现根据传入的参数（关键字），抓取百度第一页对应该关键字的搜索结果。</li><li>将结果输出为json string回显。</li><li>回显的格式为</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    code: 1, //返回状态码，1为成功，0为失败</div><div class="line">    msg: &apos;抓取成功&apos;, //返回的信息</div><div class="line">    word: &apos;示例关键字&apos;, //抓取的关键字</div><div class="line">    time: 2000, //任务的时间</div><div class="line">    dataList:[   //抓取结果列表</div><div class="line">        &#123;</div><div class="line">            title: &apos;&apos;,  //结果条目的标题</div><div class="line">            info: &apos;&apos;, //摘要</div><div class="line">            link: &apos;&apos;, //链接</div><div class="line">            pic: &apos;&apos; //缩略图地址</div><div class="line">            &#125;</div><div class="line">    ]</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><a href="https://github.com/Lexokid/ife/blob/master/phantom/task.js" target="_blank" rel="external">source</a></p><a id="more"></a><p>距离上一次的发文已经距离三个月了，学校的事情比较多就一直没时间继续刷ife的题（感觉是因为懒），现在放假在家有时间学习想学的了<br>好了不废话了，这一次的学习内容貌似是学习用phantomjs来进行网页抓取分析服务<br>phantomjs是一个基于QTwebkit的没有UI界面的无头浏览器，具体是什么百度一下就有很多内容了，我就不说了<br>关于使用方法和api我也不说了看官方文档就行底下有<br>我要说的是遇到的坑：</p><p>1.不能用es6的语法。<br>一开始我用es6的语法去写结果运行就会假死，也没有任何提示，一下子就不知道是什么原因造成的，最后对比别人写的去找原因才发现是不能用es6的语法，个人认为是QTwebkit2.2不支持es6的语法</p><p>2.在page.includeJs()方法时phantom.exit()要放在page.includeJs()的回调函数之中。<br>这问题我也找了很久，直到看到了阮一峰的的博客才发现，啊。。page.includeJs()的回调函数是异步的啊，如果写在page.open()中就会导致外部脚本还未加载就提前退出程序了</p><p>3.在page.evaluate()无法访问phantom的对象（也就是回调函数无法访问外层的变量）<br>也许是因为page.evaluate()是在在沙箱中执行,所有无法访问phantom的对象，但可以通过传递多个参数进行访问</p><h1 id="网页抓取分析服务系列之二（设备模拟）"><a href="#网页抓取分析服务系列之二（设备模拟）" class="headerlink" title="网页抓取分析服务系列之二（设备模拟）"></a>网页抓取分析服务系列之二（设备模拟）</h1><p><a href="http://ife.baidu.com/course/detail/id/86" target="_blank" rel="external">题目地址</a></p><blockquote><p>任务描述</p></blockquote><ul><li>观察chrome开发者工具中device toolbar，切换到不同的device，查看浏览器BOM数据有何变化</li><li>把device toolbar中不同的device名对应的ua和尺寸信息记录下来，保存为配置文件</li><li>在任务1的基础上，增加一个参数，表示device信息，taskjs中，解析该参数并从配置文件找到对应的ua和尺寸，完成设置后再抓取</li><li>在结果中也增加一个device字段保存传入的设备名</li></ul><p><a href="https://github.com/Lexokid/ife/blob/master/phantom/task2.js" target="_blank" rel="external">source</a></p><p>这题在上一题的基础上增加了设备模拟功能，唯一的麻烦在于不同分辨率的设备要获取的内容的类名不一样，这时只需要给每个设备增加一个字段进行区别，然后根据不同的类名获取内容即可</p><h1 id="网页抓取分析服务系列之三（服务封装）"><a href="#网页抓取分析服务系列之三（服务封装）" class="headerlink" title="网页抓取分析服务系列之三（服务封装）"></a>网页抓取分析服务系列之三（服务封装）</h1><p><a href="http://ife.baidu.com/course/detail/id/87" target="_blank" rel="external">题目地址</a></p><blockquote><p>任务描述</p></blockquote><ul><li>安装nodejs和mongodb</li><li>利用nodejs的HTTP模块封装一个node服务，监听8000端口，接受一个参数（关键字），http模块示例参考如下：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">"http"</span>);</div><div class="line">http.createServer(<span class="function"><span class="keyword">function</span>(<span class="params">request, response</span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'request received'</span>);</div><div class="line">        response.writeHead(<span class="number">200</span>, &#123;<span class="string">"Content-Type"</span>: <span class="string">"text/plain"</span>&#125;);</div><div class="line">        response.write(<span class="string">"Hello World"</span>);</div><div class="line">        response.end();</div><div class="line">&#125;).listen(<span class="number">8000</span>);</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'server started'</span>);</div></pre></td></tr></table></figure><ul><li>收到请求后，启动phantomjs进程执行taskjs，并将接受到的参数传递给phantomjs</li><li>phantomjs执行完后告诉node服务，并传回抓取的json结果</li><li>node服务将结果存到mongodb中（使用mogoose）</li></ul><p><a href="https://github.com/Lexokid/ife/blob/master/phantom/task3.js" target="_blank" rel="external">source</a></p><p>在这题中又多用到了两个软件，一个是nodejs，另一个是mongoDB</p><p><a href="https://nodejs.org/en/download/" target="_blank" rel="external">nodejs 下载</a><br><a href="https://www.mongodb.com/download-center?jmp=nav#community" target="_blank" rel="external">mongoDB 下载</a></p><p>这两个软件安装都不难，nodejs装完就可以用了，mongoDB装完后还需要配置数据库路径，记得将这两个软件添加到环境变量中</p><h2 id="mongoDB安装"><a href="#mongoDB安装" class="headerlink" title="mongoDB安装"></a>mongoDB安装</h2><p>MongoDB服务器命令提示符下运行：<br>1.前期的安装不会生成数据目录，需要自己创建，选区一个磁盘创建路径X:\data\db（X代表盘符）<br>2.运行cmd执行 <code>mongod --dbpath x:\data\db</code>（前提你已经将mongoDB的bin目录添加至环境变量中）执行成功会输出一大堆日志信息<br>3.保持之前的cmd窗口，再打开一个cmd窗口来运行mongo，这样就可以进行数据库的操作了</p><p>由于每次运行都要重复2、3步，并且运行mongod的cmd不能退出，不然mongo就无法连接到数据库<br>因此将mongodb服务器安装为windows服务可以解决此问题</p><p>4.新建一个日志目录X:\data\log<br>5.<strong>必须是以管理员身份运行cmd</strong><br>6.<code>mongod --logpath &quot;X:\data\log\mongodb.log&quot; --logappend --dbpath &quot;X:\data\db&quot; --serviceName &quot;MongoDB&quot; --install</code><br>7.<code>net start mongodb</code>即可运行服务，可以访问localhost:27017来查看是否开启服务<br>8.<code>net stop mongodb</code>可停止服务<br>以后重复5、7、8步即可</p><p>注：如果操作过程中，出现服务器无法正常启动的问题，尝试删除X:\data\db里面的mongod.lock这个文件，因为在上次服务器退出异常时，这个文件会将服务器锁住</p><p>这题最大的坑是cmd中文的编码问题，当然不解决也没什么大问题，本着尽量完美的原则，我想了几个办法：</p><p>1.响应头增加<code>charset=gbk</code>使浏览器用gbk的编码打开网页，执行exec()的第二个参数为{encoding:’buffer’}，这样可以拿到为buffer类型的结果，然后response.write(stdout)<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">response.writeHead(<span class="number">200</span>, &#123;</div><div class="line">    <span class="string">'Content-Type'</span>: <span class="string">'application/json;charset=gbk'</span>,</div><div class="line">&#125;);</div><div class="line">...</div><div class="line">exec(cmdstr,&#123;<span class="attr">encoding</span>:<span class="string">'buffer'</span>&#125;,(err, stdout, stderr) =&gt;&#123;</div><div class="line">    ...</div><div class="line">    res.write(stdout);</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p><p>但是这种方法并不理想，因为数据库存储的的还是gbk编码的中文还是会乱码，而且浏览器用gbk的编码打开网页就会造成其他utf8编码的中文会乱码</p><p>2.使用iconv-lite模块可以将gbk编码真正转化为utf8编码，iconv-lite还支持其他的编码<a href="https://github.com/ashtuchkin/iconv-lite/wiki/Supported-Encodings" target="_blank" rel="external">Supported Encodings</a><br>在这题中我用的就是这个方法<br>首先安装该模块<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install iconv-lite --save</div></pre></td></tr></table></figure></p><p>然后exec依旧采用buffer编码方便iconv-lite转码，官方文档说decode最好为buffer类型<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> iconv = <span class="built_in">require</span>(<span class="string">'iconv-lite'</span>);</div><div class="line">exec(cmdstr,&#123;<span class="attr">encoding</span>:<span class="string">'buffer'</span>&#125;,(err, stdout, stderr) =&gt;&#123;</div><div class="line">    ...</div><div class="line">    <span class="keyword">let</span> utf8str = iconv.decode(stdout, <span class="string">'gbk'</span>);</div><div class="line">    ...</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p><p>接下来就可以存进数据库里了</p><ol><li>引入phantom模块，用phantom爬取数据</li></ol><h1 id="网页抓取分析服务系列之四（数据交互）"><a href="#网页抓取分析服务系列之四（数据交互）" class="headerlink" title="网页抓取分析服务系列之四（数据交互）"></a>网页抓取分析服务系列之四（数据交互）</h1><p><a href="http://ife.baidu.com/course/detail/id/88" target="_blank" rel="external">题目地址</a></p><blockquote><p>任务描述</p></blockquote><ul><li>开发对应的前端界面，使用技术栈不限，越简单越好。输入包含一个输入框（输入关键字），一个下拉列表（选择对应的UL），一个提交按钮。</li><li>关键字输入做不能为空的校验，输入后发起异步请求，请求上阶段的服务。</li><li>在上阶段的服务中增加一个数据二次处理功能，对于返回的结果中有缩略图片的，下载图片到本地，并确保下载后的图片能被访问。</li><li>入库后，返回信息给前端，前端展示对应的抓取结果，以表格展示，图片加载本地已下载的图片</li></ul><p><a href="https://github.com/Lexokid/ife/blob/master/crawler" target="_blank" rel="external">source</a></p><p>预览：</p><p><img src="https://github.com/Lexokid/ife/blob/master/crawler/preview%20(1).png?raw=true"><br><img src="https://github.com/Lexokid/ife/blob/master/crawler/preview%20(2).png?raw=true"><br><img src="https://github.com/Lexokid/ife/blob/master/crawler/preview%20(3).png?raw=true"></p><p>这题相对于上题改动看起来貌似不多，但实现起来却有些麻烦<br>首先我采用了MVC的设计模式，对上一个任务进行了简单的重构<br>其次我将phantomjs改用了node的phantom模块，这样可以不用对中文转码<br>上面都不是我想说的，我想说的是我这次最大的收获就是稍微理解了点异步编程的思想，了解了async函数和Promise的用法<br>至于这次我遇到的坑和注意点我都在代码的注释里写有，程序猿还是靠代码说话比较靠谱</p><ol><li>引入phantom模块，用phantom爬取数据</li></ol><h1 id="网页抓取分析服务系列之五（并发控制）"><a href="#网页抓取分析服务系列之五（并发控制）" class="headerlink" title="网页抓取分析服务系列之五（并发控制）"></a>网页抓取分析服务系列之五（并发控制）</h1><p><a href="http://ife.baidu.com/course/detail/id/89" target="_blank" rel="external">题目地址</a></p><blockquote><p>任务描述</p></blockquote><ul><li>在4的基础上前端增加一个输入选项（页码），表面需要抓取的页数，另外设备输入值由下拉框改为多选框。</li><li>单个用户可以选择多个设备的模拟任务，并且每个设备需要抓取多页。</li><li>服务器端根据选择的情况，生成任务待执行队列，每个phantomjs任务只执行一次抓取。同时允许nodejs调起最大5个phantomjs的进程。</li><li>前后端改为通过web socket通信，使用socket.io库，每完成一个抓取，将结果追加到页面中。同时在页面的最上方显示当前的进度（完成数/总任务数）。</li></ul><h2 id="任务注意事项"><a href="#任务注意事项" class="headerlink" title="任务注意事项"></a>任务注意事项</h2><p>phantomjs进程的最大5个并发需要考虑多人同时提交和任务积压的情况：即两个用户A、B同时提交了4个任务到服务端，服务端只能执行A的4个、和B的1个，等前面有执行完毕的，B的剩下的再执行。</p><p><a href="https://github.com/Lexokid/ife/blob/master/crawler2" target="_blank" rel="external">source</a></p><p>简单的分析一下这题对于上题的改动，首先改为多个设备需要抓去多页内容，将前后端的通讯改为socket.io，且nodejs只能同时进行5个爬取任务（多个用户提交时最大也只进行5个爬取任务）</p><p>实现思路：<br>首先从前端获取要查询的关键字以及选项，并把这些对象转化为一个个的任务对象方便后端爬取数据<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//前端获取的对象</span></div><div class="line"><span class="comment">//&#123;</span></div><div class="line"><span class="comment">//    keyword: 'xxx',</span></div><div class="line"><span class="comment">//    page: '2',</span></div><div class="line"><span class="comment">//    device: ['ipad','iphone5','iphone6']</span></div><div class="line"><span class="comment">//&#125;</span></div><div class="line"><span class="comment">//转化为</span></div><div class="line"><span class="comment">//[&#123;</span></div><div class="line"><span class="comment">//    keyword: 'xxx',</span></div><div class="line"><span class="comment">//    page: '1',</span></div><div class="line"><span class="comment">//    device: 'ipad'</span></div><div class="line"><span class="comment">//&#125;,</span></div><div class="line"><span class="comment">//&#123;</span></div><div class="line"><span class="comment">//    keyword: 'xxx',</span></div><div class="line"><span class="comment">//    page: '2',</span></div><div class="line"><span class="comment">//    device: 'ipad'</span></div><div class="line"><span class="comment">//&#125;,</span></div><div class="line"><span class="comment">//&#123;</span></div><div class="line"><span class="comment">//    keyword: 'xxx',</span></div><div class="line"><span class="comment">//    page: '1',</span></div><div class="line"><span class="comment">//    device: 'iphone5'</span></div><div class="line"><span class="comment">//&#125;,</span></div><div class="line"><span class="comment">//...]</span></div></pre></td></tr></table></figure></p><p>后端通过socket.io拿到数据后，接下来要对这个数组对象添加一个字段用于存储这个对象的socket（区分是哪一个客户端）<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">io.on(<span class="string">'connection'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">socket</span>) </span>&#123;</div><div class="line">    socket.on(<span class="string">'query'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</div><div class="line">        <span class="comment">//insert socket item for each data to distinguish connection</span></div><div class="line">        data = data.map(<span class="function"><span class="params">i</span> =&gt;</span> &#123;</div><div class="line">            i.socket = socket;</div><div class="line">            <span class="keyword">return</span> i;</div><div class="line">        &#125;);</div><div class="line">        q.push(data);</div><div class="line">    &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p><p>拿到任务对象就可以开始爬取数据了，但是要对nodejs进行并发控制，控制并发可以引入async模块用async.mapList或async.queue控制并发，但是个人发现这两个函数有着稍微区别，在执行async.mapList的异步任务时貌似不能动态将异步任务添加进执行队列，而async.queue可以，所以这里我采用async.queue控制并发<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//use async.queue control Concurrency</span></div><div class="line"><span class="keyword">const</span> q = <span class="keyword">async</span>.queue(<span class="keyword">async</span> <span class="function"><span class="keyword">function</span> (<span class="params">task, callback</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">`current concurrentNumber:<span class="subst">$&#123;++i&#125;</span>`</span>);</div><div class="line">    <span class="keyword">let</span> results = <span class="keyword">await</span> getResult(task);</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">`current concurrentNumber:<span class="subst">$&#123;--i&#125;</span>`</span>);</div><div class="line"></div><div class="line">    <span class="comment">//send html template string</span></div><div class="line">    task.socket.emit(<span class="string">'result'</span>, &#123;</div><div class="line">        html: render(<span class="string">'crawlerResult.html'</span>, &#123;</div><div class="line">            dataList: results.dataList,</div><div class="line">            num: ++n</div><div class="line">        &#125;),</div><div class="line">        device: results.device,</div><div class="line">        keyword: results.word</div><div class="line">    &#125;);</div><div class="line">    callback || callback();</div><div class="line">&#125;, concurrentNumber);</div><div class="line"></div><div class="line">q.drain = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'all tasks have been processed'</span>);</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p><p>效果：</p><p><img src="https://github.com/Lexokid/ife/blob/master/crawler2/crawler.gif?raw=true"><br><img src="https://github.com/Lexokid/ife/blob/master/crawler2/crawler2.gif?raw=true"></p><p>ok，至此网页抓取分析服务系列完成，接下来打算去学习vue和react，以后的代码格式将采用eslint的airbnb，毕业设计打算做一个可联机的游戏，所以socket.io还要认真的去学好，好就酱</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="http://phantomjs.org/api/" target="_blank" rel="external">phantomjs api</a><br><a href="http://javascript.ruanyifeng.com/tool/phantomjs.html" target="_blank" rel="external">来自《JavaScript 标准参考教程（alpha）》，by 阮一峰</a><br><a href="https://nodejs.org/dist/latest-v8.x/docs/api/" target="_blank" rel="external">nodejs v8.x api</a><br><a href="http://nodejs.cn/api/" target="_blank" rel="external">nodejs 中文文档</a><br><a href="http://blog.csdn.net/zpalyq110/article/details/73740260" target="_blank" rel="external">mongodb 安装</a><br><a href="http://www.runoob.com/mongodb/mongodb-tutorial.html" target="_blank" rel="external">mongodb 教程</a><br><a href="http://www.nodeclass.com/api/mongoose.html" target="_blank" rel="external">mongoose 文档</a><br><a href="https://github.com/StevenSLXie/Tutorials-for-Web-Developers/blob/master/MongoDB%20%E6%9E%81%E7%AE%80%E5%AE%9E%E8%B7%B5%E5%85%A5%E9%97%A8.md" target="_blank" rel="external">MongoDB 极简实践入门</a><br><a href="https://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/001434501628911140e1cb6ce7d42e5af81480f7ecd5802000" target="_blank" rel="external">使用MVC</a><br><a href="http://es6.ruanyifeng.com/#docs/async" target="_blank" rel="external">async 函数</a><br><a href="http://mozilla.github.io/nunjucks/templating.html" target="_blank" rel="external">nunjucks document</a><br><a href="http://jingyan.baidu.com/article/c45ad29ceb095a051753e206.html" target="_blank" rel="external">百度搜索URL参数</a><br><a href="https://v4.bootcss.com/docs/4.0/" target="_blank" rel="external">bootstrap 4.0 document</a><br><a href="https://caolan.github.io/async/docs.html" target="_blank" rel="external">async document</a><br><a href="https://socket.io/docs/server-api/" target="_blank" rel="external">socket.io document</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;网页抓取分析服务系列之一（基础分析）&quot;&gt;&lt;a href=&quot;#网页抓取分析服务系列之一（基础分析）&quot; class=&quot;headerlink&quot; title=&quot;网页抓取分析服务系列之一（基础分析）&quot;&gt;&lt;/a&gt;网页抓取分析服务系列之一（基础分析）&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;http://ife.baidu.com/course/detail/id/8&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;题目地址&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;任务描述&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;编写一个task.js脚本，参考官网的includeJs方法，实现根据传入的参数（关键字），抓取百度第一页对应该关键字的搜索结果。&lt;/li&gt;
&lt;li&gt;将结果输出为json string回显。&lt;/li&gt;
&lt;li&gt;回显的格式为&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    code: 1, //返回状态码，1为成功，0为失败&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    msg: &amp;apos;抓取成功&amp;apos;, //返回的信息&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    word: &amp;apos;示例关键字&amp;apos;, //抓取的关键字&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    time: 2000, //任务的时间&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    dataList:[   //抓取结果列表&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            title: &amp;apos;&amp;apos;,  //结果条目的标题&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            info: &amp;apos;&amp;apos;, //摘要&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            link: &amp;apos;&amp;apos;, //链接&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            pic: &amp;apos;&amp;apos; //缩略图地址&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    ]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/Lexokid/ife/blob/master/phantom/task.js&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;source&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="ife" scheme="http://yoursite.com/categories/ife/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="ife" scheme="http://yoursite.com/tags/ife/"/>
    
      <category term="PhantomJS" scheme="http://yoursite.com/tags/PhantomJS/"/>
    
      <category term="MongoDB" scheme="http://yoursite.com/tags/MongoDB/"/>
    
      <category term="Nodejs" scheme="http://yoursite.com/tags/Nodejs/"/>
    
      <category term="socket.io" scheme="http://yoursite.com/tags/socket-io/"/>
    
  </entry>
  
  <entry>
    <title>色彩选择器</title>
    <link href="http://yoursite.com/2017/05/13/ife2017/%E8%89%B2%E5%BD%A9%E9%80%89%E6%8B%A9%E5%99%A8/"/>
    <id>http://yoursite.com/2017/05/13/ife2017/色彩选择器/</id>
    <published>2017-05-13T05:54:00.000Z</published>
    <updated>2017-05-13T07:59:31.027Z</updated>
    
    <content type="html"><![CDATA[<h1 id="色彩选择器"><a href="#色彩选择器" class="headerlink" title="色彩选择器"></a>色彩选择器</h1><p><a href="http://ife.baidu.com/course/detail/id/16" target="_blank" rel="external">题目地址</a></p><blockquote><p>任务描述</p></blockquote><ul><li>参考并实现一个色彩选择器：</li><li>组件默认一直呈显示状态</li><li>可以通过点击左侧色彩区域选择色彩，在右侧的输入框中会显示对应的色值，包括RGB和HSL值</li><li>可以通过调节右侧输入框的各数值，来查看对应的颜色</li><li>可以通过在中间的色带上点击来确定大致的颜色区域</li><li>提供设定颜色值的接口，指定具体颜色，左侧色区和右侧输入框显示对应数值</li><li>提供获取颜色值的接口，可获取色彩选择器选中的颜色值，可返回CSS color、RGB、HSL三种格式的色值</li></ul><p><a href="https://github.com/Lexokid/ife/tree/master/ColorSelect" target="_blank" rel="external">source</a></p><p><a href="https://lexokid.github.io/ife/ColorSelect/index.html" target="_blank" rel="external">demo</a></p><a id="more"></a><p>这个看似有点简单，做起来还是有点难度的<br>首先是rgb与hsl与hsv互算的算法<br>还有调色板的取色逻辑（我是根据点击时的坐标求得大约的hsv值然后换算为rgb或hsl。PS：这样的取色不是很精确，可以用canvas的getImageData的方法获得rgb值）<br>以及其他各种的事件逻辑<br>不过最耗时的是思考怎样做到面向对象的编程、模块化编程<br>不幸的是最终我写的代码看起来依旧不怎么优雅，我想只有我能看懂吧（苦笑）</p><p>接下来讲讲rgb与hsl与hsv互算的算法</p><h1 id="1-从RGB到HSL或HSV的转换"><a href="#1-从RGB到HSL或HSV的转换" class="headerlink" title="1.从RGB到HSL或HSV的转换"></a>1.从RGB到HSL或HSV的转换</h1><p>设 (r, g, b)分别是一个颜色的红、绿和蓝坐标，它们的值是在0到1之间的实数。设max等价于r, g和b中的最大者。设min等于这些值中的最小者。要找到在HSL空间中的 (h, s, l)值，这里的h ∈ [0, 360）度是角度的色相角，而s, l ∈ [0,1]是饱和度和亮度，计算为：<br><img src="/images/17513(1).png" style="margin: 0;width: 550px;"><br>h的值通常规范化到位于0到360°之间。而h = 0用于max = min的（就是灰色）时候而不是留下h未定义。<br>HSL和HSV有同样的色相定义，但是其他分量不同。HSV颜色的s和v的值定义如下：<br><img src="/images/17513(2).png" style="margin: 0;width: 450px;"></p><h1 id="2-从HSL到RGB的转换"><a href="#2-从HSL到RGB的转换" class="headerlink" title="2.从HSL到RGB的转换"></a>2.从HSL到RGB的转换</h1><p>给定HSL空间中的 (h, s, l)值定义的一个颜色，带有h在指示色相角度的值域[0, 360）中，分别表示饱和度和亮度的s和l在值域[0, 1]中，相应在RGB空间中的 (r, g, b)三原色，带有分别对应于红色、绿色和蓝色的r, g和b也在值域[0, 1]中，它们可计算为：<br>首先，如果s = 0，则结果的颜色是非彩色的、或灰色的。在这个特殊情况，r, g和b都等于l。注意h的值在这种情况下是未定义的。<br>当s ≠ 0的时候，可以使用下列过程：<br><img src="/images/17513(3).png" style="margin: 0;width: 550px;"><br>对于每个颜色向量Color = (ColorR, ColorG, ColorB) = (r, g, b),<br><img src="/images/17513(4).png" style="margin: 0;width: 550px;"></p><h1 id="3-从HSV到RGB的转换"><a href="#3-从HSV到RGB的转换" class="headerlink" title="3.从HSV到RGB的转换"></a>3.从HSV到RGB的转换</h1><p>类似的，给定在HSV中 (h, s, v)值定义的一个颜色，带有如上的h，和分别表示饱和度和明度的s和v变化于0到1之间，在RGB空间中对应的 (r, g, b)三原色可以计算为（R,G,B变化于0到1之间）：<br><img src="/images/17513(5).png" style="margin: 0;width: 350px;"><br>对于每个颜色向量 (r, g, b),<br><img src="/images/17513(6).png" style="margin: 0;width: 450px;"></p><h1 id="4-js代码"><a href="#4-js代码" class="headerlink" title="4.js代码"></a>4.js代码</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">rgb2hsl</span>(<span class="params">[r, g, b]</span>) </span>&#123;</div><div class="line">    [r, g, b] = [].map.call([r, g, b], <span class="function"><span class="keyword">function</span>(<span class="params">item</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> item / <span class="number">255</span>;</div><div class="line">    &#125;);</div><div class="line">    <span class="keyword">let</span> max = <span class="built_in">Math</span>.max.apply(<span class="built_in">Array</span>, [r, g, b]);</div><div class="line">    <span class="keyword">let</span> min = <span class="built_in">Math</span>.min.apply(<span class="built_in">Array</span>, [r, g, b]);</div><div class="line">    <span class="keyword">let</span> h, s, l = (max + min) / <span class="number">2</span>;</div><div class="line">    <span class="keyword">if</span> (max == min) &#123;</div><div class="line">        h = <span class="number">0</span>;</div><div class="line">        s = <span class="number">0</span>;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">let</span> m = max - min;</div><div class="line">        s = l &gt; <span class="number">0.5</span> ? m / (<span class="number">2</span> - <span class="number">2</span> * l) : m / (<span class="number">2</span> * l);</div><div class="line">        <span class="keyword">switch</span> (max) &#123;</div><div class="line">            <span class="keyword">case</span> r:</div><div class="line">                h = <span class="number">60</span> * (g - b) / m + (g &lt; b ? <span class="number">360</span> : <span class="number">0</span>);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> g:</div><div class="line">                h = <span class="number">60</span> * (b - r) / m + <span class="number">120</span>;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> b:</div><div class="line">                h = <span class="number">60</span> * (r - g) / m + <span class="number">240</span>;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> [<span class="built_in">Math</span>.round(h), <span class="built_in">Math</span>.round(s * <span class="number">100</span>) / <span class="number">100</span>, <span class="built_in">Math</span>.round(l * <span class="number">100</span>) / <span class="number">100</span>];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">rgb2hsv</span>(<span class="params">[r, g, b]</span>) </span>&#123;</div><div class="line">    [r, g, b] = [].map.call([r, g, b], <span class="function"><span class="keyword">function</span>(<span class="params">item</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> item / <span class="number">255</span>;</div><div class="line">    &#125;);</div><div class="line">    <span class="keyword">let</span> max = <span class="built_in">Math</span>.max.apply(<span class="built_in">Array</span>, [r, g, b]);</div><div class="line">    <span class="keyword">let</span> min = <span class="built_in">Math</span>.min.apply(<span class="built_in">Array</span>, [r, g, b]);</div><div class="line">    <span class="keyword">let</span> h, s, v = max;</div><div class="line">    <span class="keyword">let</span> m = max - min;</div><div class="line">    s = max == <span class="number">0</span> ? <span class="number">0</span> : m / max;</div><div class="line">    <span class="keyword">switch</span> (max) &#123;</div><div class="line">        <span class="keyword">case</span> min:</div><div class="line">            h = <span class="number">0</span>;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> r:</div><div class="line">            h = <span class="number">60</span> * (g - b) / m + (g &lt; b ? <span class="number">360</span> : <span class="number">0</span>);</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> g:</div><div class="line">            h = <span class="number">60</span> * (b - r) / m + <span class="number">120</span>;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> b:</div><div class="line">            h = <span class="number">60</span> * (r - g) / m + <span class="number">240</span>;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> [<span class="built_in">Math</span>.round(h), <span class="built_in">Math</span>.round(s * <span class="number">100</span>) / <span class="number">100</span>, <span class="built_in">Math</span>.round(v * <span class="number">100</span>) / <span class="number">100</span>];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">hsl2rgb</span>(<span class="params">[h, s, l]</span>) </span>&#123;</div><div class="line">    [h, s, l] = [h, s, l].map(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="built_in">parseFloat</span>(item);</div><div class="line">    &#125;);</div><div class="line">    <span class="keyword">let</span> r, g, b;</div><div class="line">    <span class="keyword">if</span> (s == <span class="number">0</span>) &#123;</div><div class="line">        r = g = b = l;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">let</span> q = l &lt; <span class="number">0.5</span> ? l * (<span class="number">1</span> + s) : l + s - (l * s);</div><div class="line">        <span class="keyword">let</span> p = <span class="number">2</span> * l - q;</div><div class="line">        h /= <span class="number">360</span>;</div><div class="line">        <span class="function"><span class="keyword">function</span> <span class="title">eachColor</span>(<span class="params">q, p, t</span>) </span>&#123;</div><div class="line">            <span class="keyword">if</span> (t &lt; <span class="number">0</span>) &#123;</div><div class="line">                t += <span class="number">1</span>;</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (t &gt; <span class="number">1</span>) &#123;</div><div class="line">                t -= <span class="number">1</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">switch</span> (<span class="literal">true</span>) &#123;</div><div class="line">                <span class="keyword">case</span> t &lt; (<span class="number">1</span> / <span class="number">6</span>):</div><div class="line">                    <span class="keyword">return</span> p + ((q - p) * <span class="number">6</span> * t);</div><div class="line">                <span class="keyword">case</span> (t &gt;= (<span class="number">1</span> / <span class="number">6</span>)) &amp;&amp; (t &lt; (<span class="number">1</span> / <span class="number">2</span>)):</div><div class="line">                    <span class="keyword">return</span> q;</div><div class="line">                <span class="keyword">case</span> (t &gt;= (<span class="number">1</span> / <span class="number">2</span>)) &amp;&amp; (t &lt; (<span class="number">2</span> / <span class="number">3</span>)):</div><div class="line">                    <span class="keyword">return</span> p + ((q - p) * <span class="number">6</span> * (<span class="number">2</span> / <span class="number">3</span> - t));</div><div class="line">                <span class="keyword">default</span>:</div><div class="line">                    <span class="keyword">return</span> p;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        r = eachColor(q, p, h + <span class="number">1</span> / <span class="number">3</span>);</div><div class="line">        g = eachColor(q, p, h);</div><div class="line">        b = eachColor(q, p, h - <span class="number">1</span> / <span class="number">3</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> [<span class="built_in">Math</span>.round(r * <span class="number">255</span>), <span class="built_in">Math</span>.round(g * <span class="number">255</span>), <span class="built_in">Math</span>.round(b * <span class="number">255</span>)];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">hsv2rgb</span>(<span class="params">[h, s, v]</span>) </span>&#123;</div><div class="line">    [h, s, v] = [h, s, v].map(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="built_in">parseFloat</span>(item);</div><div class="line">    &#125;);</div><div class="line">    <span class="keyword">let</span> r, g, b;</div><div class="line">    h %= <span class="number">360</span>;</div><div class="line">    <span class="keyword">let</span> i = <span class="built_in">Math</span>.floor(h / <span class="number">60</span>);</div><div class="line">    <span class="keyword">let</span> f = h / <span class="number">60</span> - i;</div><div class="line">    <span class="keyword">let</span> p = v * (<span class="number">1</span> - s);</div><div class="line">    <span class="keyword">let</span> q = v * (<span class="number">1</span> - f * s);</div><div class="line">    <span class="keyword">let</span> t = v * (<span class="number">1</span> - (<span class="number">1</span> - f) * s);</div><div class="line">    <span class="keyword">switch</span> (i) &#123;</div><div class="line">        <span class="keyword">case</span> <span class="number">0</span>:</div><div class="line">            r = v, g = t, b = p;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> <span class="number">1</span>:</div><div class="line">            r = q, g = v, b = p;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> <span class="number">2</span>:</div><div class="line">            r = p, g = v, b = t;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> <span class="number">3</span>:</div><div class="line">            r = p, g = q, b = v;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> <span class="number">4</span>:</div><div class="line">            r = t, g = p, b = v;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> <span class="number">5</span>:</div><div class="line">            r = v, g = p, b = q;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> [<span class="built_in">Math</span>.round(r * <span class="number">255</span>), <span class="built_in">Math</span>.round(g * <span class="number">255</span>), <span class="built_in">Math</span>.round(b * <span class="number">255</span>)];</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://zh.wikipedia.org/wiki/HSL%E5%92%8CHSV%E8%89%B2%E5%BD%A9%E7%A9%BA%E9%97%B4" target="_blank" rel="external">wiki HSL和HSV色彩空间</a><br><a href="http://blog.csdn.net/jiangxinyu/article/details/8000999" target="_blank" rel="external">颜色空间RGB与HSV(HSL)的转换</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;色彩选择器&quot;&gt;&lt;a href=&quot;#色彩选择器&quot; class=&quot;headerlink&quot; title=&quot;色彩选择器&quot;&gt;&lt;/a&gt;色彩选择器&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;http://ife.baidu.com/course/detail/id/16&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;题目地址&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;任务描述&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;参考并实现一个色彩选择器：&lt;/li&gt;
&lt;li&gt;组件默认一直呈显示状态&lt;/li&gt;
&lt;li&gt;可以通过点击左侧色彩区域选择色彩，在右侧的输入框中会显示对应的色值，包括RGB和HSL值&lt;/li&gt;
&lt;li&gt;可以通过调节右侧输入框的各数值，来查看对应的颜色&lt;/li&gt;
&lt;li&gt;可以通过在中间的色带上点击来确定大致的颜色区域&lt;/li&gt;
&lt;li&gt;提供设定颜色值的接口，指定具体颜色，左侧色区和右侧输入框显示对应数值&lt;/li&gt;
&lt;li&gt;提供获取颜色值的接口，可获取色彩选择器选中的颜色值，可返回CSS color、RGB、HSL三种格式的色值&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/Lexokid/ife/tree/master/ColorSelect&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;source&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://lexokid.github.io/ife/ColorSelect/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;demo&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="ife" scheme="http://yoursite.com/categories/ife/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="ife" scheme="http://yoursite.com/tags/ife/"/>
    
      <category term="RGB" scheme="http://yoursite.com/tags/RGB/"/>
    
      <category term="Graphics" scheme="http://yoursite.com/tags/Graphics/"/>
    
  </entry>
  
  <entry>
    <title>canvas基础</title>
    <link href="http://yoursite.com/2017/04/24/canvas/canvas%E5%9F%BA%E7%A1%80/"/>
    <id>http://yoursite.com/2017/04/24/canvas/canvas基础/</id>
    <published>2017-04-24T09:53:00.000Z</published>
    <updated>2017-04-29T08:38:42.597Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-canvas"><a href="#1-canvas" class="headerlink" title="1.canvas"></a>1.canvas</h1><p>Canvas API（画布）是在HTML5中新增的标签用于在网页实时生成图像，并且可以操作图像内容，基本上它是一个可以用JavaScript操作的位图（bitmap）。</p><h2 id="1-1SVG-以及VML之间的差异编辑"><a href="#1-1SVG-以及VML之间的差异编辑" class="headerlink" title="1.1SVG 以及VML之间的差异编辑:"></a>1.1SVG 以及VML之间的差异编辑:</h2><p><code>&lt;canvas&gt;</code> 标记和 SVG以及 VML 之间的一个重要的不同是，<code>&lt;canvas&gt;</code> 有一个基于 JavaScript 的绘图 API，而 SVG 和 VML 使用一个 XML 文档来描述绘图。<br>这两种方式在功能上是等同的，任何一种都可以用另一种来模拟。从表面上看，它们很不相同，可是，每一种都有强项和弱点。例如，SVG 绘图很容易编辑，只要从其描述中移除元素就行。<br>要从同一图形的一个 <code>&lt;canvas&gt;</code> 标记中移除元素，往往需要擦掉绘图重新绘制它。</p><h2 id=""><a href="#" class="headerlink" title=""></a><a id="more"></a></h2><h1 id="2-创建-Canvas-元素"><a href="#2-创建-Canvas-元素" class="headerlink" title="2.创建 Canvas 元素"></a>2.创建 Canvas 元素</h1><p>向 HTML5 页面添加 canvas 元素。<br>规定元素的 id：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">"canvas"</span>&gt;</span>当前浏览器不支持canvas<span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></div></pre></td></tr></table></figure><p>canvas 元素本身是没有绘图能力的。所有的绘制工作必须在 JavaScript 内部完成：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">"canvas"</span>);</div><div class="line">canvas.width = <span class="number">1024</span>;</div><div class="line">canvas.height = <span class="number">768</span>;</div><div class="line"><span class="keyword">var</span> ctx = canvas.getContext(<span class="string">'2d'</span>);</div></pre></td></tr></table></figure><p>当没有设置宽度和高度的时候，canvas会初始化宽度为300像素和高度为150像素。该元素可以使用CSS来定义大小，但在绘制时图像会伸缩以适应它的框架尺寸：如果CSS的尺寸与初始画布的比例不一致，它会出现扭曲。</p><h1 id="3-基本绘制"><a href="#3-基本绘制" class="headerlink" title="3.基本绘制"></a>3.基本绘制</h1><h2 id="3-1-beginPath"><a href="#3-1-beginPath" class="headerlink" title="3.1 beginPath"></a>3.1 beginPath</h2><p>1.beginPath()开始新的绘制路径。在beginPath()之后改变的状态，不会影响到beginPath()之前定义的状态。如果某个状态一直没有改变，就会一直延续的使用下去，而不会再beginPath()之后恢复为默认。<br>2.beginPath()的调用相当于清除之前的绘制状态（包括线条颜色，绘制点的位置等等），所以beginPath()之后的moveTo可以改为lineTo，因为调用的beginPath()，所以之前的绘制点相当于不存在。</p><p><canvas id="canvas1" style="border: 1px solid #bbb;">当前浏览器不支持canvas！</canvas></p><script type="text/javascript">    var canvas1 = document.getElementById("canvas1");    canvas1.width = 320;    canvas1.height = 180;    var ctx = canvas1.getContext('2d');    ctx.lineWidth = 5;    ctx.beginPath();    ctx.lineTo(10,10);    ctx.lineTo(100,90);    ctx.lineTo(10,170);    ctx.strokeStyle = "red";    ctx.stroke();    ctx.beginPath();    ctx.lineTo(110,10);    ctx.lineTo(200,90);    ctx.lineTo(110,170);    ctx.stroke();    ctx.beginPath();    ctx.lineTo(210,10);    ctx.lineTo(300,90);    ctx.lineTo(210,170);    ctx.strokeStyle = "blue";    ctx.stroke();</script><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">ctx.lineWidth = <span class="number">5</span>;</div><div class="line"></div><div class="line">ctx.beginPath();</div><div class="line">ctx.lineTo(<span class="number">10</span>,<span class="number">10</span>);</div><div class="line">ctx.lineTo(<span class="number">100</span>,<span class="number">90</span>);</div><div class="line">ctx.lineTo(<span class="number">10</span>,<span class="number">170</span>);</div><div class="line">ctx.strokeStyle = <span class="string">"red"</span>;  <span class="comment">// 如果某个状态一直没有改变，就会一直延续的使用下去，而不会再beginPath()之后恢复为默认</span></div><div class="line">ctx.stroke();</div><div class="line"></div><div class="line">ctx.beginPath();</div><div class="line">ctx.lineTo(<span class="number">110</span>,<span class="number">10</span>);</div><div class="line">ctx.lineTo(<span class="number">200</span>,<span class="number">90</span>);</div><div class="line">ctx.lineTo(<span class="number">110</span>,<span class="number">170</span>);</div><div class="line">ctx.stroke();</div><div class="line"></div><div class="line">ctx.beginPath();</div><div class="line">ctx.lineTo(<span class="number">210</span>,<span class="number">10</span>);</div><div class="line">ctx.lineTo(<span class="number">300</span>,<span class="number">90</span>);</div><div class="line">ctx.lineTo(<span class="number">210</span>,<span class="number">170</span>);</div><div class="line">ctx.strokeStyle = <span class="string">"blue"</span>;  <span class="comment">// 在beginPath()之后改变的状态，不会影响到beginPath()之前定义的状态</span></div><div class="line">ctx.stroke();</div></pre></td></tr></table></figure><h2 id="3-2-closePath"><a href="#3-2-closePath" class="headerlink" title="3.2 closePath"></a>3.2 closePath</h2><p>1.closePath()会自动将未封闭的图形用一条直线连接起来<br>2.当我们不想让图形封闭起来只需要用beginPath()就行了<br>3.beginPath()和closePath()不一定要同时出现<br>4.closePath()对fill()没用</p><p><canvas id="canvas2" style="border: 1px solid #bbb;">当前浏览器不支持canvas！</canvas></p><script type="text/javascript">    var canvas2 = document.getElementById("canvas2");    canvas2.width = 320;    canvas2.height = 180;    var ctx = canvas2.getContext('2d');    ctx.lineWidth = 15;    ctx.beginPath();    ctx.lineTo(30,30);    ctx.lineTo(100,30);    ctx.lineTo(100,150);    ctx.lineTo(30,150);    ctx.lineTo(30,30);    ctx.strokeStyle = "red";    ctx.stroke();    ctx.beginPath();    ctx.lineTo(130,30);    ctx.lineTo(200,30);    ctx.lineTo(200,150);    ctx.lineTo(130,150);    ctx.lineTo(130,30);    ctx.strokeStyle = "blue";    ctx.closePath();    ctx.stroke();    ctx.beginPath();    ctx.lineTo(230,30);    ctx.lineTo(300,30);    ctx.lineTo(300,150);    ctx.lineTo(230,150);    ctx.strokeStyle = "green";    ctx.closePath();    ctx.stroke();</script><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">ctx.lineWidth = <span class="number">15</span>;</div><div class="line"></div><div class="line">ctx.beginPath();</div><div class="line">ctx.lineTo(<span class="number">30</span>,<span class="number">30</span>);</div><div class="line">ctx.lineTo(<span class="number">100</span>,<span class="number">30</span>);</div><div class="line">ctx.lineTo(<span class="number">100</span>,<span class="number">150</span>);</div><div class="line">ctx.lineTo(<span class="number">30</span>,<span class="number">150</span>);</div><div class="line">ctx.lineTo(<span class="number">30</span>,<span class="number">30</span>);</div><div class="line">ctx.strokeStyle = <span class="string">"red"</span>;</div><div class="line">ctx.stroke();</div><div class="line"></div><div class="line">ctx.beginPath();</div><div class="line">ctx.lineTo(<span class="number">130</span>,<span class="number">30</span>);</div><div class="line">ctx.lineTo(<span class="number">200</span>,<span class="number">30</span>);</div><div class="line">ctx.lineTo(<span class="number">200</span>,<span class="number">150</span>);</div><div class="line">ctx.lineTo(<span class="number">130</span>,<span class="number">150</span>);</div><div class="line">ctx.lineTo(<span class="number">130</span>,<span class="number">30</span>);</div><div class="line">ctx.strokeStyle = <span class="string">"blue"</span>;</div><div class="line">ctx.closePath();</div><div class="line">ctx.stroke();</div><div class="line"></div><div class="line">ctx.beginPath();</div><div class="line">ctx.lineTo(<span class="number">230</span>,<span class="number">30</span>);</div><div class="line">ctx.lineTo(<span class="number">300</span>,<span class="number">30</span>);</div><div class="line">ctx.lineTo(<span class="number">300</span>,<span class="number">150</span>);</div><div class="line">ctx.lineTo(<span class="number">230</span>,<span class="number">150</span>);</div><div class="line">ctx.strokeStyle = <span class="string">"blue"</span>;</div><div class="line">ctx.closePath();</div><div class="line">ctx.stroke();</div></pre></td></tr></table></figure><p>我们看到第一个图形未写closePath()，所以线条连接处没有完全闭合<br>第二个用了closePath()使线条连接处完全闭合<br>因为closePath()会自动将未封闭的图形用一条直线连接起来，所以使用closePath时，最后一个连接到起始点的lineTo()是可以省略的，会自动连接到起始点</p><h2 id="3-3-绘制直线"><a href="#3-3-绘制直线" class="headerlink" title="3.3 绘制直线"></a>3.3 绘制直线</h2><p>canvas 是基于状态绘制的，即先定义状态，后绘制</p><p><canvas id="canvas3" style="border: 1px solid #bbb;">当前浏览器不支持canvas！</canvas></p><script type="text/javascript">    var canvas3 = document.getElementById("canvas3");    canvas3.width = 320;    canvas3.height = 180;    var ctx = canvas3.getContext('2d');    ctx.beginPath();    ctx.moveTo(10,10);    ctx.lineTo(310,170);    ctx.lineWidth = 2;    ctx.strokeStyle = "orange";    ctx.closePath();    ctx.stroke();</script><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">ctx.beginPath();  <span class="comment">// 路径绘制开始</span></div><div class="line">ctx.moveTo(<span class="number">10</span>,<span class="number">10</span>);  <span class="comment">// 起始</span></div><div class="line">ctx.lineTo(<span class="number">310</span>,<span class="number">170</span>);  <span class="comment">// 终止</span></div><div class="line">ctx.lineWidth = <span class="number">2</span>;  <span class="comment">// 线宽</span></div><div class="line">ctx.strokeStyle = <span class="string">"orange"</span>;  <span class="comment">// 颜色</span></div><div class="line">ctx.closePath();  <span class="comment">// 路径绘制结束</span></div><div class="line">ctx.stroke();  <span class="comment">// 线条</span></div></pre></td></tr></table></figure><h2 id="3-4-绘制图形"><a href="#3-4-绘制图形" class="headerlink" title="3.4 绘制图形"></a>3.4 绘制图形</h2><p><canvas id="canvas4" style="border: 1px solid #bbb;">当前浏览器不支持canvas！</canvas></p><script type="text/javascript">    var canvas4 = document.getElementById("canvas4");    canvas4.width = 320;    canvas4.height = 180;    var ctx = canvas4.getContext('2d');    ctx.beginPath();    ctx.moveTo(10,10);    ctx.lineTo(310,170);    ctx.lineTo(10,170);    ctx.lineTo(10,10);    ctx.closePath();    ctx.lineWidth = 5;    ctx.strokeStyle = "red";    ctx.stroke();    ctx.fillStyle = "green";    ctx.fill();</script><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">ctx.beginPath();  <span class="comment">// 路径绘制开始</span></div><div class="line">ctx.moveTo(<span class="number">100</span>,<span class="number">100</span>);  <span class="comment">// 起始</span></div><div class="line">ctx.lineTo(<span class="number">700</span>,<span class="number">700</span>);  <span class="comment">// 终止</span></div><div class="line">ctx.lineTo(<span class="number">100</span>,<span class="number">700</span>);  <span class="comment">// 终止</span></div><div class="line">ctx.closePath();  <span class="comment">// 路径绘制结束</span></div><div class="line"></div><div class="line">ctx.lineWidth = <span class="number">5</span>;  <span class="comment">// 线宽</span></div><div class="line">ctx.strokeStyle = <span class="string">"orange"</span>;  <span class="comment">// 线条颜色</span></div><div class="line">ctx.stroke();  <span class="comment">// 绘制线条</span></div><div class="line"></div><div class="line">ctx.fillStyle = <span class="string">"green"</span>;  <span class="comment">// 填充颜色</span></div><div class="line">ctx.fill();  <span class="comment">// 填充</span></div></pre></td></tr></table></figure><h2 id="3-5-绘制弧"><a href="#3-5-绘制弧" class="headerlink" title="3.5 绘制弧"></a>3.5 绘制弧</h2><h3 id="3-5-1-arc"><a href="#3-5-1-arc" class="headerlink" title="3.5.1 arc()"></a>3.5.1 arc()</h3><p>context.arc(<br>  centerx,centery,radius,<br>  startingAngle,endingAngle,<br>  anticlockwise = false<br>);<br>centerx:原点x坐标<br>centery:原点y坐标<br>radius:半径<br>startingAngle:起始弧度(固定位置)<br>endingAngle:结束弧度(固定位置)<br>anticlockwise:绘制方向(默认false 顺时针)</p><p><canvas id="canvas5" style="border: 1px solid #bbb;">当前浏览器不支持canvas！</canvas></p><script type="text/javascript">    var canvas5 = document.getElementById("canvas5");    canvas5.width = 640;    canvas5.height = 180;    var ctx = canvas5.getContext('2d');    ctx.beginPath();    ctx.arc(80,90,50,0,1.5*Math.PI);    ctx.lineWidth = 5;    ctx.strokeStyle = "red";    ctx.closePath();    ctx.stroke();    ctx.beginPath();    ctx.arc(240,90,50,0,1.5*Math.PI,true);    ctx.lineWidth = 5;    ctx.strokeStyle = "blue";    ctx.stroke();    ctx.beginPath();    ctx.arc(400,90,50,0,1.5*Math.PI);    ctx.fillStyle = "yellow";    ctx.closePath();    ctx.fill();    ctx.beginPath();    ctx.arc(560,90,50,0,1.5*Math.PI);    ctx.fillStyle = "yellow";    ctx.fill();</script><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">ctx.beginPath();</div><div class="line">ctx.arc(<span class="number">80</span>,<span class="number">90</span>,<span class="number">50</span>,<span class="number">0</span>,<span class="number">1.5</span>*<span class="built_in">Math</span>.PI);  <span class="comment">// 顺时针</span></div><div class="line">ctx.lineWidth = <span class="number">5</span>;</div><div class="line">ctx.strokeStyle = <span class="string">"red"</span>;</div><div class="line">ctx.closePath();</div><div class="line">ctx.stroke();</div><div class="line"></div><div class="line">ctx.beginPath();</div><div class="line">ctx.arc(<span class="number">240</span>,<span class="number">90</span>,<span class="number">50</span>,<span class="number">0</span>,<span class="number">1.5</span>*<span class="built_in">Math</span>.PI,<span class="literal">true</span>);  <span class="comment">// 逆时针</span></div><div class="line">ctx.lineWidth = <span class="number">5</span>;</div><div class="line">ctx.strokeStyle = <span class="string">"blue"</span>;</div><div class="line">ctx.stroke();</div><div class="line"></div><div class="line"><span class="comment">//closePath()对fill()没用</span></div><div class="line"></div><div class="line">ctx.beginPath();</div><div class="line">ctx.arc(<span class="number">400</span>,<span class="number">90</span>,<span class="number">50</span>,<span class="number">0</span>,<span class="number">1.5</span>*<span class="built_in">Math</span>.PI);  <span class="comment">// 顺时针</span></div><div class="line">ctx.fillStyle = <span class="string">"yellow"</span>;</div><div class="line">ctx.closePath();</div><div class="line">ctx.fill();</div><div class="line"></div><div class="line">ctx.beginPath();</div><div class="line">ctx.arc(<span class="number">560</span>,<span class="number">90</span>,<span class="number">50</span>,<span class="number">0</span>,<span class="number">1.5</span>*<span class="built_in">Math</span>.PI);  <span class="comment">// 顺时针</span></div><div class="line">ctx.fillStyle = <span class="string">"yellow"</span>;</div><div class="line">ctx.fill();</div></pre></td></tr></table></figure><h3 id="3-5-2-arcTo"><a href="#3-5-2-arcTo" class="headerlink" title="3.5.2 arcTo()"></a>3.5.2 arcTo()</h3><p>context.arcTo( x1 , y1 , x2 , y2 ,radius );<br><img src="/images/17424(2).png" style="width: 500px;"><br>绘制起点是( x0, y0 )，但是( x0, y0 )不一定是切点，arcTo 方法在( x0, y0 )( x1, y1 )和( x1, y1 )( x2, y2 )两条线段上寻找切点，绘制圆弧（圆弧终止于( x1, y1 )( x2, y2 )这条线段的切点），而且，( x2, y2 )不一定是所绘制圆弧的终点，只是作为辅助线的结束位置，其中( x0, y0 )是上一个点的位置。</p><h3 id="3-5-3-二次贝塞尔曲线quadraticCurveTo"><a href="#3-5-3-二次贝塞尔曲线quadraticCurveTo" class="headerlink" title="3.5.3 二次贝塞尔曲线quadraticCurveTo()"></a>3.5.3 二次贝塞尔曲线quadraticCurveTo()</h3><p>context.moveTo( x0 , y0 );<br>context.quadraticCurveTo( x1, y1, x2, y2 );</p><p>(x0,y0)起始点<br>(x1,y1)控制点<br>(x2,y2)终止点<br>圆弧起于起始点，终于终止点，与起始点、终止点与控制点的连线相切<br>参考以下demo便于理解<br><a href="https://www.rgraph.net/blog/an-example-of-the-html5-canvas-quadraticcurveto-function.html" target="_blank" rel="external">quadraticCurveTo demo</a></p><h3 id="3-5-4-三次贝塞尔曲线bezierCurveTo"><a href="#3-5-4-三次贝塞尔曲线bezierCurveTo" class="headerlink" title="3.5.4 三次贝塞尔曲线bezierCurveTo()"></a>3.5.4 三次贝塞尔曲线bezierCurveTo()</h3><p>context.moveTo( x0 , y0 );<br>context.bezierCurveTo( x1, y1, x2, y2, x3, y3  );</p><p>(x0,y0)起始点<br>(x1,y1)控制点1<br>(x1,y1)控制点2<br>(x3,y3)终止点</p><p>三次贝塞尔曲线比二次贝塞尔曲线多了一个控制点，所有更加灵活<br>参考以下demo便于理解<br><a href="http://blogs.sitepointstatic.com/examples/tech/canvas-curves/bezier-curve.html" target="_blank" rel="external">bezierCurveTo demo</a><br><a href="http://www.j--d.com/bezier" target="_blank" rel="external">quadraticCurveTo or bezierCurveTo</a></p><h2 id="3-6-绘制矩形"><a href="#3-6-绘制矩形" class="headerlink" title="3.6 绘制矩形"></a>3.6 绘制矩形</h2><p>ctx.rect(x,y,width,,height);  // 绘制矩形路径<br>ctx.fillRect(x,y,width,height);  //  绘制填充矩形<br>ctx.strokeRect(x,y,width,height);  // 绘制边框矩形</p><p><canvas id="canvas6" style="border: 1px solid #bbb;">当前浏览器不支持canvas！</canvas></p><script type="text/javascript">    var canvas6 = document.getElementById("canvas6");    canvas6.width = 320;    canvas6.height = 180;    var ctx = canvas6.getContext('2d');    ctx.beginPath();    ctx.rect(20,20,80,140);    ctx.stroke();    ctx.beginPath();    ctx.fillRect(120,20,80,140);    ctx.beginPath();    ctx.strokeRect(220,20,80,140);</script><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">ctx.beginPath();</div><div class="line">ctx.rect(<span class="number">20</span>,<span class="number">20</span>,<span class="number">80</span>,<span class="number">140</span>);</div><div class="line">ctx.stroke();</div><div class="line"></div><div class="line">ctx.beginPath();</div><div class="line">ctx.fillRect(<span class="number">120</span>,<span class="number">20</span>,<span class="number">80</span>,<span class="number">140</span>);</div><div class="line"></div><div class="line">ctx.beginPath();</div><div class="line">ctx.strokeRect(<span class="number">220</span>,<span class="number">20</span>,<span class="number">80</span>,<span class="number">140</span>);</div></pre></td></tr></table></figure><h2 id="3-7-绘制文字"><a href="#3-7-绘制文字" class="headerlink" title="3.7 绘制文字"></a>3.7 绘制文字</h2><h3 id="3-7-1-font"><a href="#3-7-1-font" class="headerlink" title="3.7.1 font"></a>3.7.1 font</h3><p>ctx.font = font-style font-variant font-weight font-size font-family</p><p>font-style: normal  ( Default ), italic  ( 斜体字 ), oblique ( 倾斜字体 )</p><p>font-variant: normal ( Default ), small-caps (应用于小写字母，显示小型的大写字母)</p><p>font-weight: lighter, normal ( Default ), bold, bolder,<br>100 , 200 , 300 , 400 (normal) ,<br>500 , 600 , 700 (bold) ,<br>800 , 900</p><p>font-size: 20px ( Default ), 2em, 150%,<br>xx-small, x-small,<br>medium, large,<br>x-large, xx-large</p><p>font-family: 设置多种字体备选, 支持 @font-face, Web安全字体</p><h3 id="3-7-2-textAlign"><a href="#3-7-2-textAlign" class="headerlink" title="3.7.2 textAlign"></a>3.7.2 textAlign</h3><p>ctx.textAlign = left, center, right</p><h3 id="3-7-3-textBaseline"><a href="#3-7-3-textBaseline" class="headerlink" title="3.7.3 textBaseline"></a>3.7.3 textBaseline</h3><p>ctx.textBaseline =  top, middle, bottom,<br>alphabetic (Default), ideographic, hanging<br>后面三个分别表示拉丁文的垂直方向基准线、日语中文等方块字的垂直方向基准线、印度文的垂直方向基准线</p><h3 id="3-7-4-fillText"><a href="#3-7-4-fillText" class="headerlink" title="3.7.4 fillText()"></a>3.7.4 fillText()</h3><p>ctx.fillText( string , x , y , [maxlen] );<br>string:需要显示的文字<br>x,y:位置<br>maxlen:文字渲染的最大宽度</p><h3 id="3-7-5-strokeText"><a href="#3-7-5-strokeText" class="headerlink" title="3.7.5 strokeText()"></a>3.7.5 strokeText()</h3><p>ctx.strokeText( string , x , y  , [maxlen] );<br>同上</p><h3 id="3-7-6-measureText-width"><a href="#3-7-6-measureText-width" class="headerlink" title="3.7.6 measureText().width"></a>3.7.6 measureText().width</h3><p>文本的度量<br>ctx.measureText( string ).width</p><h3 id="3-7-7-demo"><a href="#3-7-7-demo" class="headerlink" title="3.7.7 demo"></a>3.7.7 demo</h3><p><canvas id="canvas7" style="border: 1px solid #bbb;">当前浏览器不支持canvas！</canvas></p><script type="text/javascript">    var canvas7 = document.getElementById("canvas7");    canvas7.width = 640;    canvas7.height = 360;    var ctx = canvas7.getContext('2d');    ctx.fillStyle = "#f00";    ctx.font = "30px bold Arial";    ctx.fillText("CANVAS!",30,30);    var w = ctx.measureText("CANVAS!").width;    ctx.fillText("以上字符宽度为" + w + "px",30,60);    ctx.strokeText("CANVAS!",30,90,100);    ctx.textAlign = "left";    ctx.fillText("textAlign:left",320,120);    ctx.textAlign = "center";    ctx.fillText("textAlign:center",320,150);    ctx.textAlign = "right";    ctx.fillText("textAlign:right",320,180);    ctx.strokeStyle = "#bbb";    ctx.moveTo(320,90);    ctx.lineTo(320,180);    ctx.stroke();    ctx.textAlign = "center";    ctx.textBaseline = "top";    ctx.fillText("你好！textBaseline:top",320,210);    ctx.moveTo(0,210);    ctx.lineTo(640,210);    ctx.stroke();    ctx.textBaseline = "middle";    ctx.fillText("你好！textBaseline:middle",320,270);    ctx.moveTo(0,270);    ctx.lineTo(640,270);    ctx.stroke();    ctx.textBaseline = "bottom";    ctx.fillText("你好！textBaseline:bottom",320,330);    ctx.moveTo(0,330);    ctx.lineTo(640,330);    ctx.stroke();</script><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">ctx.fillStyle = <span class="string">"#f00"</span>;</div><div class="line">ctx.font = <span class="string">"30px bold Arial"</span>;</div><div class="line"></div><div class="line">ctx.fillText(<span class="string">"CANVAS!"</span>,<span class="number">30</span>,<span class="number">30</span>);</div><div class="line"><span class="keyword">var</span> w = ctx.measureText(<span class="string">"CANVAS!"</span>).width;</div><div class="line">ctx.fillText(<span class="string">"以上字符宽度为"</span> + w + <span class="string">"px"</span>,<span class="number">30</span>,<span class="number">60</span>);</div><div class="line">ctx.strokeText(<span class="string">"CANVAS!"</span>,<span class="number">30</span>,<span class="number">90</span>,<span class="number">100</span>);</div><div class="line"></div><div class="line">ctx.textAlign = <span class="string">"left"</span>;</div><div class="line">ctx.fillText(<span class="string">"textAlign:left"</span>,<span class="number">320</span>,<span class="number">120</span>);</div><div class="line"></div><div class="line">ctx.textAlign = <span class="string">"center"</span>;</div><div class="line">ctx.fillText(<span class="string">"textAlign:center"</span>,<span class="number">320</span>,<span class="number">150</span>);</div><div class="line"></div><div class="line">ctx.textAlign = <span class="string">"right"</span>;</div><div class="line">ctx.fillText(<span class="string">"textAlign:right"</span>,<span class="number">320</span>,<span class="number">180</span>);</div><div class="line"></div><div class="line"><span class="comment">// 辅助线</span></div><div class="line">ctx.strokeStyle = <span class="string">"#bbb"</span>;</div><div class="line">ctx.moveTo(<span class="number">320</span>,<span class="number">90</span>);</div><div class="line">ctx.lineTo(<span class="number">320</span>,<span class="number">180</span>);</div><div class="line">ctx.stroke();</div><div class="line"></div><div class="line"></div><div class="line">ctx.textAlign = <span class="string">"center"</span>;</div><div class="line">ctx.textBaseline = <span class="string">"top"</span>;</div><div class="line">ctx.fillText(<span class="string">"你好！textBaseline:top"</span>,<span class="number">320</span>,<span class="number">210</span>);</div><div class="line">ctx.moveTo(<span class="number">0</span>,<span class="number">210</span>);</div><div class="line">ctx.lineTo(<span class="number">640</span>,<span class="number">210</span>);</div><div class="line">ctx.stroke();</div><div class="line"></div><div class="line">ctx.textBaseline = <span class="string">"middle"</span>;</div><div class="line">ctx.fillText(<span class="string">"你好！textBaseline:middle"</span>,<span class="number">320</span>,<span class="number">270</span>);</div><div class="line">ctx.moveTo(<span class="number">0</span>,<span class="number">270</span>);</div><div class="line">ctx.lineTo(<span class="number">640</span>,<span class="number">270</span>);</div><div class="line">ctx.stroke();</div><div class="line"></div><div class="line">ctx.textBaseline = <span class="string">"bottom"</span>;</div><div class="line">ctx.fillText(<span class="string">"你好！textBaseline:bottom"</span>,<span class="number">320</span>,<span class="number">330</span>);</div><div class="line">ctx.moveTo(<span class="number">0</span>,<span class="number">330</span>);</div><div class="line">ctx.lineTo(<span class="number">640</span>,<span class="number">330</span>);</div><div class="line">ctx.stroke();</div></pre></td></tr></table></figure><hr><h1 id="4-样式"><a href="#4-样式" class="headerlink" title="4.样式"></a>4.样式</h1><h2 id="4-1-lineCap"><a href="#4-1-lineCap" class="headerlink" title="4.1 lineCap"></a>4.1 lineCap</h2><p>lineCap = “butt”(defalut)|”round”|”square” 标准型，圆形，方形<br>lineCap只在线段的两端处有作用，在线段的连接处没用</p><p><canvas id="canvas8" style="border: 1px solid #bbb;">当前浏览器不支持canvas！</canvas></p><script type="text/javascript">    var canvas8 = document.getElementById("canvas8");    canvas8.width = 320;    canvas8.height = 180;    var ctx = canvas8.getContext('2d');    ctx.lineWidth = 25;    ctx.strokeStyle = "rgba(255,0,0,.5)";    ctx.beginPath();    ctx.moveTo(20,30);    ctx.lineTo(300,30);    ctx.lineCap = "butt";    ctx.stroke();    ctx.beginPath();    ctx.moveTo(20,90);    ctx.lineTo(300,90);    ctx.lineCap = "round";    ctx.stroke();    ctx.beginPath();    ctx.moveTo(20,150);    ctx.lineTo(300,150);    ctx.lineCap = "square";    ctx.stroke();    ctx.beginPath();    ctx.lineWidth = 1;    ctx.moveTo(20,10);    ctx.lineTo(20,170);    ctx.moveTo(300,10);    ctx.lineTo(300,170);    ctx.stroke();</script><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">ctx.lineWidth = <span class="number">25</span>;</div><div class="line">ctx.strokeStyle = <span class="string">"rgba(255,0,0,.5)"</span>;</div><div class="line"></div><div class="line"><span class="comment">// butt(defalut)</span></div><div class="line">ctx.beginPath();</div><div class="line">ctx.moveTo(<span class="number">20</span>,<span class="number">30</span>);</div><div class="line">ctx.lineTo(<span class="number">300</span>,<span class="number">30</span>);</div><div class="line">ctx.lineCap = <span class="string">"butt"</span>;</div><div class="line">ctx.stroke();</div><div class="line"></div><div class="line"><span class="comment">// round</span></div><div class="line">ctx.beginPath();</div><div class="line">ctx.moveTo(<span class="number">20</span>,<span class="number">90</span>);</div><div class="line">ctx.lineTo(<span class="number">300</span>,<span class="number">90</span>);</div><div class="line">ctx.lineCap = <span class="string">"round"</span>;</div><div class="line">ctx.stroke();</div><div class="line"></div><div class="line"><span class="comment">// square</span></div><div class="line">ctx.beginPath();</div><div class="line">ctx.moveTo(<span class="number">20</span>,<span class="number">150</span>);</div><div class="line">ctx.lineTo(<span class="number">300</span>,<span class="number">150</span>);</div><div class="line">ctx.lineCap = <span class="string">"square"</span>;</div><div class="line">ctx.stroke();</div><div class="line"></div><div class="line"><span class="comment">// 基线</span></div><div class="line">ctx.beginPath();</div><div class="line">ctx.lineWidth = <span class="number">1</span>;</div><div class="line">ctx.moveTo(<span class="number">20</span>,<span class="number">10</span>);</div><div class="line">ctx.lineTo(<span class="number">20</span>,<span class="number">170</span>);</div><div class="line">ctx.moveTo(<span class="number">300</span>,<span class="number">10</span>);</div><div class="line">ctx.lineTo(<span class="number">300</span>,<span class="number">170</span>);</div><div class="line">ctx.stroke();</div></pre></td></tr></table></figure><h2 id="4-2-lineJoin"><a href="#4-2-lineJoin" class="headerlink" title="4.2 lineJoin"></a>4.2 lineJoin</h2><p>lineJoin是线条相交时呈现出来的效果<br>lineJoin = “miter”(defalut)|”bevel”|”round”</p><p><canvas id="canvas9" style="border: 1px solid #bbb;">当前浏览器不支持canvas！</canvas></p><script type="text/javascript">    var canvas9 = document.getElementById("canvas9");    canvas9.width = 320;    canvas9.height = 180;    var ctx = canvas9.getContext('2d');    ctx.lineWidth = 10;    ctx.beginPath();    ctx.moveTo(10,20);    ctx.lineTo(50,160);    ctx.lineTo(90,20);    ctx.lineJoin = "miter";    ctx.stroke();    ctx.beginPath();    ctx.moveTo(110,20);    ctx.lineTo(150,160);    ctx.lineTo(190,20);    ctx.lineJoin = "bevel";    ctx.stroke();    ctx.beginPath();    ctx.moveTo(210,20);    ctx.lineTo(250,160);    ctx.lineTo(290,20);    ctx.lineJoin = "round";    ctx.stroke();</script><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">ctx.lineWidth = <span class="number">10</span>;</div><div class="line"></div><div class="line">ctx.beginPath();</div><div class="line">ctx.moveTo(<span class="number">10</span>,<span class="number">20</span>);</div><div class="line">ctx.lineTo(<span class="number">50</span>,<span class="number">160</span>);</div><div class="line">ctx.lineTo(<span class="number">90</span>,<span class="number">20</span>);</div><div class="line">ctx.lineJoin = <span class="string">"miter"</span>;</div><div class="line">ctx.stroke();</div><div class="line"></div><div class="line">ctx.beginPath();</div><div class="line">ctx.moveTo(<span class="number">110</span>,<span class="number">20</span>);</div><div class="line">ctx.lineTo(<span class="number">150</span>,<span class="number">160</span>);</div><div class="line">ctx.lineTo(<span class="number">190</span>,<span class="number">20</span>);</div><div class="line">ctx.lineJoin = <span class="string">"bevel"</span>;</div><div class="line">ctx.stroke();</div><div class="line"></div><div class="line">ctx.beginPath();</div><div class="line">ctx.moveTo(<span class="number">210</span>,<span class="number">20</span>);</div><div class="line">ctx.lineTo(<span class="number">250</span>,<span class="number">160</span>);</div><div class="line">ctx.lineTo(<span class="number">290</span>,<span class="number">20</span>);</div><div class="line">ctx.lineJoin = <span class="string">"round"</span>;</div><div class="line">ctx.stroke();</div></pre></td></tr></table></figure><p>miterLimit<br>miterLimit = 10(默认值);//只有当linejoin的值为miter时才有效，值越大，允许角度越尖锐<br><img src="/images/17424(1).png" style="width: 500px;"></p><p><canvas id="canvas10" style="border: 1px solid #bbb;">当前浏览器不支持canvas！</canvas></p><script type="text/javascript">    var canvas10 = document.getElementById("canvas10");    canvas10.width = 320;    canvas10.height = 180;    var ctx = canvas10.getContext('2d');    ctx.lineWidth = 10;    ctx.beginPath();    ctx.moveTo(10,30);    ctx.lineTo(250,50);    ctx.lineTo(10,70);    ctx.lineJoin = "miter";    ctx.stroke();    ctx.beginPath();    ctx.moveTo(10,120);    ctx.lineTo(250,140);    ctx.lineTo(10,160);    ctx.lineJoin = "miter";    ctx.miterLimit = 30;    ctx.stroke();</script><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">ctx.lineWidth = <span class="number">10</span>;</div><div class="line"></div><div class="line">ctx.beginPath();</div><div class="line">ctx.moveTo(<span class="number">10</span>,<span class="number">30</span>);</div><div class="line">ctx.lineTo(<span class="number">250</span>,<span class="number">50</span>);</div><div class="line">ctx.lineTo(<span class="number">10</span>,<span class="number">70</span>);</div><div class="line">ctx.lineJoin = <span class="string">"miter"</span>;</div><div class="line">ctx.stroke();</div><div class="line"></div><div class="line">ctx.beginPath();</div><div class="line">ctx.moveTo(<span class="number">10</span>,<span class="number">120</span>);</div><div class="line">ctx.lineTo(<span class="number">250</span>,<span class="number">140</span>);</div><div class="line">ctx.lineTo(<span class="number">10</span>,<span class="number">160</span>);</div><div class="line">ctx.lineJoin = <span class="string">"miter"</span>;</div><div class="line">ctx.miterLimit = <span class="number">30</span>;</div><div class="line">ctx.stroke();</div></pre></td></tr></table></figure><h2 id="4-3-图形变换"><a href="#4-3-图形变换" class="headerlink" title="4.3 图形变换"></a>4.3 图形变换</h2><p>位移 translate( x , y )<br>x 是左右偏移量，y 是上下偏移量</p><p>旋转 rotate( rot )<br>rot = deg/180*Math.PI<br>它是顺时针方向的，以弧度为单位的值</p><p>缩放 scale( sx , sy )<br>sx,sy 分别是横轴和纵轴的缩放因子，它们都必须是正值<br>注：变换是叠加的</p><p>变形 setTransform(m11, m12, m21, m22, dx, dy)<br>类似css matirx<br>setTransform可忽略之前的变换（translate、rotate、scale）<br>m11：水平方向的缩放(1)<br>m12：水平方向的倾斜(0)<br>m21：竖直方向的倾斜(0)<br>m22：竖直方向的缩放(1)<br>dx：水平方向的移动(0)<br>dy：竖直方向的移动(0)</p><p>可以用save()和restore()储存、还原canvas环境<br>类似css transform 属性应用先后不同，效果不同</p><p><canvas id="canvas11" style="border: 1px solid #bbb;">当前浏览器不支持canvas！</canvas></p><script type="text/javascript">    var canvas11 = document.getElementById("canvas11");    canvas11.width = 320;    canvas11.height = 180;    var ctx = canvas11.getContext('2d');    ctx.save();    ctx.fillStyle = "red";    ctx.translate(20,20);    ctx.fillRect(0,0,100,100);    ctx.fillStyle = "green";    ctx.translate(40,40);    ctx.fillRect(0,0,100,100);    ctx.restore();    ctx.save();    ctx.fillStyle = "red";    ctx.translate(180,20);    ctx.fillRect(0,0,100,100);    ctx.restore();    ctx.save();    ctx.fillStyle = "green";    ctx.translate(200,40);    ctx.fillRect(0,0,100,100);    ctx.restore();</script><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 第一个环境</span></div><div class="line">ctx.save();</div><div class="line">ctx.fillStyle = <span class="string">"red"</span>;</div><div class="line">ctx.translate(<span class="number">20</span>,<span class="number">20</span>);</div><div class="line">ctx.fillRect(<span class="number">0</span>,<span class="number">0</span>,<span class="number">100</span>,<span class="number">100</span>);</div><div class="line">ctx.fillStyle = <span class="string">"green"</span>;</div><div class="line">ctx.translate(<span class="number">40</span>,<span class="number">40</span>);</div><div class="line">ctx.fillRect(<span class="number">0</span>,<span class="number">0</span>,<span class="number">100</span>,<span class="number">100</span>);</div><div class="line">ctx.restore();</div><div class="line"></div><div class="line"><span class="comment">// 第二个环境</span></div><div class="line">ctx.save();</div><div class="line">ctx.fillStyle = <span class="string">"red"</span>;</div><div class="line">ctx.translate(<span class="number">180</span>,<span class="number">20</span>);</div><div class="line">ctx.fillRect(<span class="number">0</span>,<span class="number">0</span>,<span class="number">100</span>,<span class="number">100</span>);</div><div class="line">ctx.restore();</div><div class="line"></div><div class="line"><span class="comment">// 第三个环境</span></div><div class="line">ctx.save();</div><div class="line">ctx.fillStyle = <span class="string">"green"</span>;</div><div class="line">ctx.translate(<span class="number">200</span>,<span class="number">40</span>);</div><div class="line">ctx.fillRect(<span class="number">0</span>,<span class="number">0</span>,<span class="number">100</span>,<span class="number">100</span>);</div><div class="line">ctx.restore();</div></pre></td></tr></table></figure><h2 id="4-4-渐变"><a href="#4-4-渐变" class="headerlink" title="4.4 渐变"></a>4.4 渐变</h2><h3 id="4-4-1-线性渐变-createLinearGradient"><a href="#4-4-1-线性渐变-createLinearGradient" class="headerlink" title="4.4.1 线性渐变 createLinearGradient()"></a>4.4.1 线性渐变 createLinearGradient()</h3><p>createLinearGradient( x1 , y1, x2 , y2 );<br>渐变的起点 (x1,y1) 与终点 (x2,y2)</p><p><canvas id="canvas12" style="border: 1px solid #bbb;">当前浏览器不支持canvas！</canvas></p><script type="text/javascript">    var canvas12 = document.getElementById("canvas12");    canvas12.width = 320;    canvas12.height = 180;    var ctx = canvas12.getContext('2d');    var grd = ctx.createLinearGradient(0,0,320,180);    grd.addColorStop(0.0,"red");    grd.addColorStop(0.25,"green");    grd.addColorStop(0.5,"blue");    grd.addColorStop(0.75,"white");    grd.addColorStop(1.0,"black");    ctx.fillStyle = grd;    ctx.fillRect(0,0,320,180);</script><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> grd = ctx.createLinearGradient(<span class="number">0</span>,<span class="number">0</span>,<span class="number">320</span>,<span class="number">180</span>);</div><div class="line">grd.addColorStop(<span class="number">0.0</span>,<span class="string">"red"</span>);</div><div class="line">grd.addColorStop(<span class="number">0.25</span>,<span class="string">"green"</span>);</div><div class="line">grd.addColorStop(<span class="number">0.5</span>,<span class="string">"blue"</span>);</div><div class="line">grd.addColorStop(<span class="number">0.75</span>,<span class="string">"white"</span>);</div><div class="line">grd.addColorStop(<span class="number">1.0</span>,<span class="string">"black"</span>);</div><div class="line">ctx.fillStyle = grd;</div><div class="line">ctx.fillRect(<span class="number">0</span>,<span class="number">0</span>,<span class="number">320</span>,<span class="number">180</span>);</div></pre></td></tr></table></figure><h3 id="4-4-2-径向渐变-createRadialGradient"><a href="#4-4-2-径向渐变-createRadialGradient" class="headerlink" title="4.4.2 径向渐变 createRadialGradient()"></a>4.4.2 径向渐变 createRadialGradient()</h3><p>createRadialGradient(x1, y1, r1, x2, y2, r2)<br>前三个定义一个以 (x1,y1) 为原点，半径为 r1 的圆，后三个参数则定义另一个以 (x2,y2) 为原点，半径为 r2 的圆</p><p><canvas id="canvas13" style="border: 1px solid #bbb;">当前浏览器不支持canvas！</canvas></p><script type="text/javascript">    var canvas13 = document.getElementById("canvas13");    canvas13.width = 320;    canvas13.height = 180;    var ctx = canvas13.getContext('2d');    var grd = ctx.createRadialGradient(160,90,0,160,90,160);    grd.addColorStop(0.0,"black");    grd.addColorStop(0.25,"red");    grd.addColorStop(0.5,"yellow");    grd.addColorStop(0.75,"blue");    grd.addColorStop(1.0,"white");    ctx.fillStyle = grd;    ctx.fillRect(0,0,320,180);</script><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> grd = ctx.createRadialGradient(<span class="number">160</span>,<span class="number">90</span>,<span class="number">0</span>,<span class="number">160</span>,<span class="number">90</span>,<span class="number">160</span>);</div><div class="line">grd.addColorStop(<span class="number">0.0</span>,<span class="string">"black"</span>);</div><div class="line">grd.addColorStop(<span class="number">0.25</span>,<span class="string">"red"</span>);</div><div class="line">grd.addColorStop(<span class="number">0.5</span>,<span class="string">"yellow"</span>);</div><div class="line">grd.addColorStop(<span class="number">0.75</span>,<span class="string">"blue"</span>);</div><div class="line">grd.addColorStop(<span class="number">1.0</span>,<span class="string">"white"</span>);</div><div class="line">ctx.fillStyle = grd;</div><div class="line">ctx.fillRect(<span class="number">0</span>,<span class="number">0</span>,<span class="number">320</span>,<span class="number">180</span>);</div></pre></td></tr></table></figure><h2 id="4-5-图案样式"><a href="#4-5-图案样式" class="headerlink" title="4.5 图案样式"></a>4.5 图案样式</h2><p>createPattern(img/canvas/video, repeat-style)<br>repeat-style:<br>no-repeat 不重复<br>repeat-x：X轴方向重复<br>repeat-y：Y轴方向重复<br>repeat：X，Y轴方向都重复</p><p><canvas id="canvas14" style="border: 1px solid #bbb;">当前浏览器不支持canvas！</canvas></p><script type="text/javascript">    var canvas14 = document.getElementById("canvas14");    canvas14.width = 320;    canvas14.height = 180;    var ctx = canvas14.getContext('2d');    var img = new Image();    img.src = "/images/avatar.png";    img.onload = function(){        var ptrn = ctx.createPattern(img,'no-repeat');        ctx.fillStyle = ptrn;        ctx.fillRect(0,0,320,180);    };</script><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> img = <span class="keyword">new</span> Image();</div><div class="line">    img.src = <span class="string">"/images/avatar.png"</span>;</div><div class="line">    img.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">var</span> ptrn = ctx.createPattern(img,<span class="string">'no-repeat'</span>);</div><div class="line">        ctx.fillStyle = ptrn;</div><div class="line">        ctx.fillRect(<span class="number">0</span>,<span class="number">0</span>,<span class="number">320</span>,<span class="number">180</span>);</div><div class="line">    &#125;;</div></pre></td></tr></table></figure><h2 id="4-6-阴影"><a href="#4-6-阴影" class="headerlink" title="4.6 阴影"></a>4.6 阴影</h2><p>ctx.shadowColor  // 阴影颜色<br>ctx.shadowOffsetX  // X偏移值<br>ctx.shadowOffsetY  // Y偏移值<br>ctx.shadowBlur  // 模糊度</p><p><canvas id="canvas15" style="border: 1px solid #bbb;">当前浏览器不支持canvas！</canvas></p><script type="text/javascript">    var canvas15 = document.getElementById("canvas15");    canvas15.width = 320;    canvas15.height = 180;    var ctx = canvas15.getContext('2d');    ctx.shadowColor = "#bbb";    ctx.shadowOffsetX = 10;    ctx.shadowOffsetY = 10;    ctx.shadowBlur = 5;    ctx.fillRect(30,30,100,120);    ctx.shadowOffsetX = -5;    ctx.shadowOffsetY = -5;    ctx.shadowBlur = 10;    ctx.fillRect(190,30,100,120);</script><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">ctx.shadowColor = <span class="string">"#bbb"</span>;</div><div class="line">ctx.shadowOffsetX = <span class="number">10</span>;</div><div class="line">ctx.shadowOffsetY = <span class="number">10</span>;</div><div class="line">ctx.shadowBlur = <span class="number">5</span>;</div><div class="line">ctx.fillRect(<span class="number">30</span>,<span class="number">30</span>,<span class="number">100</span>,<span class="number">120</span>);</div><div class="line"></div><div class="line">ctx.shadowOffsetX = <span class="number">-5</span>;</div><div class="line">ctx.shadowOffsetY = <span class="number">-5</span>;</div><div class="line">ctx.shadowBlur = <span class="number">10</span>;</div><div class="line">ctx.fillRect(<span class="number">190</span>,<span class="number">30</span>,<span class="number">100</span>,<span class="number">120</span>);</div></pre></td></tr></table></figure><h2 id="4-7-globalAlpha（透明度）"><a href="#4-7-globalAlpha（透明度）" class="headerlink" title="4.7 globalAlpha（透明度）"></a>4.7 globalAlpha（透明度）</h2><p>ctx.globalAlpha = 1; (Default)</p><h2 id="4-8-globalCompositeOperation（图形重叠效果）"><a href="#4-8-globalCompositeOperation（图形重叠效果）" class="headerlink" title="4.8 globalCompositeOperation（图形重叠效果）"></a>4.8 globalCompositeOperation（图形重叠效果）</h2><p><img src="/images/17424(3).png" style="width: 690px;"><br>图片来自MDN</p><p><canvas id="canvas16" style="border: 1px solid #bbb;">当前浏览器不支持canvas！</canvas></p><p></p><p id="canvas16-composition"><br>    <a href="javascript:void(0)" target="_blank" rel="external">source-over</a><br>    <a href="javascript:void(0)" target="_blank" rel="external">source-in</a><br>    <a href="javascript:void(0)" target="_blank" rel="external">source-out</a><br>    <a href="javascript:void(0)" target="_blank" rel="external">source-atop</a><br>    <a href="javascript:void(0)" target="_blank" rel="external">destination-over</a><br>    <a href="javascript:void(0)" target="_blank" rel="external">destination-in</a><br>    <a href="javascript:void(0)" target="_blank" rel="external">destination-out</a><br>    <a href="javascript:void(0)" target="_blank" rel="external">destination-atop</a><br>    <a href="javascript:void(0)" target="_blank" rel="external">lighter</a><br>    <a href="javascript:void(0)" target="_blank" rel="external">copy</a><br>    <a href="javascript:void(0)" target="_blank" rel="external">xor</a><br></p><p></p><script>    window.onload = function () {        var a = document.getElementById('canvas16-composition').getElementsByTagName('a');        for (let i = 0; i < a.length; i++) {            a[i].addEventListener("click",function () {                drawComposition(this.text);                return false;            });        }        drawComposition("source-over");    }    function drawComposition(composition) {        var canvas16 = document.getElementById('canvas16');        canvas16.width = 1024;        canvas16.height = 400;        var ctx = canvas16.getContext('2d');        ctx.clearRect(0, 0, canvas16.width, canvas16.height);        ctx.save();        ctx.font = "30px bold Arial";        ctx.textAlign = "center";        ctx.textBaseline = "middle";        ctx.fillStyle = "#058";        ctx.fillText("globalCompositionOperation:" + composition, canvas16.width/2, 20);        ctx.restore();        ctx.beginPath();        ctx.moveTo(0, 50);        ctx.lineTo(canvas16.width, 50);        ctx.lineTo(canvas16.width, canvas16.height);        ctx.lineTo(0, canvas16.height);        ctx.closePath();        ctx.clip();        ctx.fillStyle = "blue";        ctx.fillRect(500, 175, 200, 200);        ctx.globalCompositeOperation = composition;        ctx.beginPath();        ctx.moveTo(500, 100);        ctx.lineTo(350, 250);        ctx.lineTo(650, 250);        ctx.closePath();        ctx.fillStyle = "red";        ctx.fill();    }</script><h2 id="4-9-clip-剪切区域"><a href="#4-9-clip-剪切区域" class="headerlink" title="4.9 clip() 剪切区域"></a>4.9 clip() 剪切区域</h2><p>使用 clip() 方法来创建一个新的裁切路径。默认情况下，canvas 有一个与它自身一样大的裁切路径（也就是没有裁切效果）<br>它的作用是遮罩，用来隐藏不需要的部分然后将上面路径剪切作为当前绘制环境</p><p><canvas id="canvas17" style="border: 1px solid #bbb;">当前浏览器不支持canvas！</canvas></p><script type="text/javascript">    var canvas17 = document.getElementById("canvas17");    canvas17.width = 320;    canvas17.height = 320;    var ctx = canvas17.getContext('2d');    ctx.beginPath();    ctx.fillStyle = "#000";    ctx.fillRect(0,0,canvas17.width,canvas17.height);    ctx.beginPath();    ctx.arc(canvas17.width/2,canvas17.height/2,canvas17.height/2,0,2*Math.PI);    var grd = ctx.createLinearGradient(canvas17.width/2,0,canvas17.width/2,canvas17.height*2);    grd.addColorStop(0.0,"#058");    grd.addColorStop(1.0,"#fff");    ctx.fillStyle = grd;    ctx.fill();    ctx.clip();    for (let i=0;i<50;i++){        ctx.save();        ctx.fillStyle = "#fff";        ctx.translate(Math.floor(Math.random()*canvas17.width),Math.floor(Math.random()*canvas17.height));        drawStar(ctx,Math.floor(Math.random()*6)+2);        ctx.restore();    }    function drawStar(ctx,r){        ctx.save();        ctx.beginPath()        ctx.moveTo(r,0);        for (var i=0;i<9;i++){            ctx.rotate(Math.PI/5);            if(i%2 == 0) {              ctx.lineTo((r/0.525731)*0.200811,0);            } else {              ctx.lineTo(r,0);            }        }        ctx.closePath();        ctx.fill();        ctx.restore();    }</script><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 遮罩</span></div><div class="line">ctx.beginPath();</div><div class="line">ctx.fillStyle = <span class="string">"#000"</span>;</div><div class="line">ctx.fillRect(<span class="number">0</span>,<span class="number">0</span>,canvas17.width,canvas17.height);</div><div class="line"></div><div class="line"><span class="comment">// 背景</span></div><div class="line">ctx.beginPath();</div><div class="line">ctx.arc(canvas17.width/<span class="number">2</span>,canvas17.height/<span class="number">2</span>,canvas17.height/<span class="number">2</span>,<span class="number">0</span>,<span class="number">2</span>*<span class="built_in">Math</span>.PI);</div><div class="line"><span class="keyword">var</span> grd = ctx.createLinearGradient(canvas17.width/<span class="number">2</span>,<span class="number">0</span>,canvas17.width/<span class="number">2</span>,canvas17.height*<span class="number">2</span>);</div><div class="line">grd.addColorStop(<span class="number">0.0</span>,<span class="string">"#058"</span>);</div><div class="line">grd.addColorStop(<span class="number">1.0</span>,<span class="string">"#fff"</span>);</div><div class="line">ctx.fillStyle = grd;</div><div class="line">ctx.fill();</div><div class="line">ctx.clip();</div><div class="line"></div><div class="line"><span class="comment">// 星星</span></div><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;<span class="number">50</span>;i++)&#123;</div><div class="line">    ctx.save();</div><div class="line">    ctx.fillStyle = <span class="string">"#fff"</span>;</div><div class="line">    ctx.translate(<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random()*canvas17.width),<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random()*canvas17.height));</div><div class="line">    drawStar(ctx,<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random()*<span class="number">6</span>)+<span class="number">2</span>);</div><div class="line">    ctx.restore();</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">drawStar</span>(<span class="params">ctx,r</span>)</span>&#123;</div><div class="line">    ctx.save();</div><div class="line">    ctx.beginPath()</div><div class="line">    ctx.moveTo(r,<span class="number">0</span>);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">9</span>;i++)&#123;</div><div class="line">        ctx.rotate(<span class="built_in">Math</span>.PI/<span class="number">5</span>);</div><div class="line">        <span class="keyword">if</span>(i%<span class="number">2</span> == <span class="number">0</span>) &#123;</div><div class="line">          ctx.lineTo((r/<span class="number">0.525731</span>)*<span class="number">0.200811</span>,<span class="number">0</span>);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">          ctx.lineTo(r,<span class="number">0</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    ctx.closePath();</div><div class="line">    ctx.fill();</div><div class="line">    ctx.restore();</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="4-10-剪纸效果（非零环绕原则）"><a href="#4-10-剪纸效果（非零环绕原则）" class="headerlink" title="4.10 剪纸效果（非零环绕原则）"></a>4.10 剪纸效果（非零环绕原则）</h2><p>对于一个复杂的路径调用fill()，浏览器怎么分辨哪些区域填充颜色，哪些区域不填充颜色<br>这时候就要靠canvas采用的非零环绕原则<br>非零环绕原则：从平面中任意区域内引出一条射线（不穿过交点），使射线穿过区域范围外，然后将多边形的边矢量化，规定多边形的边如果从射线的左边穿过则加1，如果从射线的右边穿过则减1，最终结果累加，如果为0，则点P在多边的外面；如果非0则点P在多边形的内部<br><img src="/images/17424(4).png" style="width: 600px;"><br>对于上边那条射线，路径从射线右边穿过，记-1，计数和为非零，所以该区域在多边形内部<br>对于左下边那条射线，路径先是从射线右边穿过，记-1，然后路径从射线左边穿过，记+1，-1+1=0，计数和为零，所以该区域在多边形外部<br>对于右下边那条射线，路径先是从射线右边穿过，记-1，然后路径从射线右边穿过，记-1，-1-1=-2，计数和为非零，所以该区域在多边形内部</p><p>所以我们可以用这个特性画出剪纸效果</p><p><canvas id="canvas18" style="border: 1px solid #bbb;">当前浏览器不支持canvas！</canvas></p><script type="text/javascript">    var canvas18 = document.getElementById("canvas18");    canvas18.width = 320;    canvas18.height = 320;    var ctx = canvas18.getContext('2d');    ctx.save();    ctx.beginPath();    ctx.arc(160,160,120,0,Math.PI*2,false);    ctx.arc(160,160,60,0,Math.PI*2,true);    ctx.fillStyle = "#058";    ctx.shadowColor = "#bbb";    ctx.shadowOffsetX = 10;    ctx.shadowOffsetY = 10;    ctx.shadowBlur = 5;    ctx.fill();    ctx.restore();    ctx.beginPath();    ctx.moveTo(30,190);    ctx.lineTo(30,130);    ctx.lineTo(25,135);    ctx.lineTo(35,135);    ctx.lineTo(30,130);    ctx.stroke();    ctx.beginPath();    ctx.moveTo(120,130);    ctx.lineTo(120,190);    ctx.lineTo(115,185);    ctx.lineTo(125,185);    ctx.lineTo(120,190);    ctx.stroke();</script><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">ctx.save();</div><div class="line">ctx.beginPath();</div><div class="line">ctx.arc(<span class="number">160</span>,<span class="number">160</span>,<span class="number">120</span>,<span class="number">0</span>,<span class="built_in">Math</span>.PI*<span class="number">2</span>,<span class="literal">false</span>);</div><div class="line">ctx.arc(<span class="number">160</span>,<span class="number">160</span>,<span class="number">60</span>,<span class="number">0</span>,<span class="built_in">Math</span>.PI*<span class="number">2</span>,<span class="literal">true</span>);</div><div class="line">ctx.fillStyle = <span class="string">"#058"</span>;</div><div class="line">ctx.shadowColor = <span class="string">"#bbb"</span>;</div><div class="line">ctx.shadowOffsetX = <span class="number">10</span>;</div><div class="line">ctx.shadowOffsetY = <span class="number">10</span>;</div><div class="line">ctx.shadowBlur = <span class="number">5</span>;</div><div class="line">ctx.fill();</div><div class="line">ctx.restore();</div><div class="line"></div><div class="line">ctx.beginPath();</div><div class="line">ctx.moveTo(<span class="number">30</span>,<span class="number">190</span>);</div><div class="line">ctx.lineTo(<span class="number">30</span>,<span class="number">130</span>);</div><div class="line">ctx.lineTo(<span class="number">25</span>,<span class="number">135</span>);</div><div class="line">ctx.lineTo(<span class="number">35</span>,<span class="number">135</span>);</div><div class="line">ctx.lineTo(<span class="number">30</span>,<span class="number">130</span>);</div><div class="line">ctx.stroke();</div><div class="line"></div><div class="line">ctx.beginPath();</div><div class="line">ctx.moveTo(<span class="number">120</span>,<span class="number">130</span>);</div><div class="line">ctx.lineTo(<span class="number">120</span>,<span class="number">190</span>);</div><div class="line">ctx.lineTo(<span class="number">115</span>,<span class="number">185</span>);</div><div class="line">ctx.lineTo(<span class="number">125</span>,<span class="number">185</span>);</div><div class="line">ctx.lineTo(<span class="number">120</span>,<span class="number">190</span>);</div><div class="line">ctx.stroke();</div></pre></td></tr></table></figure><h2 id="4-11-clearRect-清空画布"><a href="#4-11-clearRect-清空画布" class="headerlink" title="4.11 clearRect() 清空画布"></a>4.11 clearRect() 清空画布</h2><p>ctx.clearRect( x , y , width , height )<br>一般用于动画、游戏制作</p><hr><p>以上就是Canvas中一些基础的api（当然还有很多），canvas也一直在更新，更多更新的api请参考Canvas标准</p><h1 id="Canvas-标准"><a href="#Canvas-标准" class="headerlink" title="Canvas 标准"></a>Canvas 标准</h1><p><a href="http://www.w3c.org/TR/2dcontext/" target="_blank" rel="external">w3c canvas标准</a><br><a href="https://html.spec.whatwg.org/" target="_blank" rel="external">WHATWG</a></p><h1 id="Canvas-图形库"><a href="#Canvas-图形库" class="headerlink" title="Canvas 图形库"></a>Canvas 图形库</h1><p><a href="https://code.google.com/p/canvasplus/" target="_blank" rel="external">canvasplus</a><br><a href="http://artisanjs.com/" target="_blank" rel="external">Artisan JS</a><br><a href="https://roopons.com.au/wp-content/plugins/viral-optins/js/rgraph/" target="_blank" rel="external">Rgraph</a></p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="http://www.imooc.com/learn/185" target="_blank" rel="external">Canvas绘图详解</a><br><a href="http://baike.baidu.com/link?url=OwId2oNkz7LSxwJhL4lq39HAH7BquExCye9d4FSBKSoxlsQaJh56Poz8aYHwUA9M1p333dwgafk0AhmqQAFJUK" target="_blank" rel="external">canvas百度百科</a><br><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Canvas_API/Tutorial" target="_blank" rel="external">MDN Canvas</a><br><a href="https://www.rgraph.net/blog/an-example-of-the-html5-canvas-quadraticcurveto-function.html" target="_blank" rel="external">quadraticCurveTo demo</a><br><a href="http://blogs.sitepointstatic.com/examples/tech/canvas-curves/bezier-curve.html" target="_blank" rel="external">bezierCurveTo demo</a><br><a href="http://www.j--d.com/bezier" target="_blank" rel="external">quadraticCurveTo or bezierCurveTo</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-canvas&quot;&gt;&lt;a href=&quot;#1-canvas&quot; class=&quot;headerlink&quot; title=&quot;1.canvas&quot;&gt;&lt;/a&gt;1.canvas&lt;/h1&gt;&lt;p&gt;Canvas API（画布）是在HTML5中新增的标签用于在网页实时生成图像，并且可以操作图像内容，基本上它是一个可以用JavaScript操作的位图（bitmap）。&lt;/p&gt;
&lt;h2 id=&quot;1-1SVG-以及VML之间的差异编辑&quot;&gt;&lt;a href=&quot;#1-1SVG-以及VML之间的差异编辑&quot; class=&quot;headerlink&quot; title=&quot;1.1SVG 以及VML之间的差异编辑:&quot;&gt;&lt;/a&gt;1.1SVG 以及VML之间的差异编辑:&lt;/h2&gt;&lt;p&gt;&lt;code&gt;&amp;lt;canvas&amp;gt;&lt;/code&gt; 标记和 SVG以及 VML 之间的一个重要的不同是，&lt;code&gt;&amp;lt;canvas&amp;gt;&lt;/code&gt; 有一个基于 JavaScript 的绘图 API，而 SVG 和 VML 使用一个 XML 文档来描述绘图。&lt;br&gt;这两种方式在功能上是等同的，任何一种都可以用另一种来模拟。从表面上看，它们很不相同，可是，每一种都有强项和弱点。例如，SVG 绘图很容易编辑，只要从其描述中移除元素就行。&lt;br&gt;要从同一图形的一个 &lt;code&gt;&amp;lt;canvas&amp;gt;&lt;/code&gt; 标记中移除元素，往往需要擦掉绘图重新绘制它。&lt;/p&gt;
&lt;h2 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;
    
    </summary>
    
      <category term="canvas" scheme="http://yoursite.com/categories/canvas/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="canvas" scheme="http://yoursite.com/tags/canvas/"/>
    
  </entry>
  
  <entry>
    <title>CSS3实现3D轮播图</title>
    <link href="http://yoursite.com/2017/04/22/ife2017/CSS3%E5%AE%9E%E7%8E%B03D%E8%BD%AE%E6%92%AD%E5%9B%BE/"/>
    <id>http://yoursite.com/2017/04/22/ife2017/CSS3实现3D轮播图/</id>
    <published>2017-04-22T15:19:00.000Z</published>
    <updated>2017-04-23T07:09:25.610Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CSS3实现3D轮播图"><a href="#CSS3实现3D轮播图" class="headerlink" title="CSS3实现3D轮播图"></a>CSS3实现3D轮播图</h1><p><a href="http://ife.baidu.com/course/detail/id/51" target="_blank" rel="external">题目地址</a></p><blockquote><p>任务描述</p></blockquote><ul><li>实现图示效果<a href="https://ww1.sinaimg.cn/large/006tNbRwly1fcr5jr0994g30w30gx4qz.gif" target="_blank" rel="external">点击查看</a></li><li>只需要完成HTML，CSS代码编写，需要写一点JavaScript</li><li>需要有一定的数学计算</li><li>可以尝试不同的逻辑处理：如点击切换，滑动切换等等</li><li>示例图仅为参考，不需要完全实现一致，其中的图片、文案均可自行设定</li><li>尽可能多地尝试不同的、更多的样式设定来实践各种CSS属性</li><li>HTML 及 CSS 代码结构清晰、规范</li></ul><p><a href="https://github.com/Lexokid/ife/blob/master/6-13/index.html" target="_blank" rel="external">source</a></p><p><a href="https://lexokid.github.io/ife/6-13/index.html" target="_blank" rel="external">demo</a></p><a id="more"></a><p>要完成这题需要两个css3属性：<br>1.transform-style: preserve-3d;<br>2.perspective;<br>下面有两个参考资料写的很详细，只要能认真看完，这题就没什么难度了<br>我讲一下我做题遇到的坑<br>那就是transfrom属性的translate、rotate、scale、skew执行起来貌似是有顺序<br><code>transform:translateX(100px) scale(2)</code>与<code>transform:scale(2) translateX(100px)</code>效果不一样<br>我在写这题的时候给每个img是这么赋值的<code>transform: translateZ(500px) rotateY(N*60deg);</code><br>结果img除了变大点跟<code>transform: rotateY(60deg);</code>没区别（前提父元素有perspective，且没有overflow:hidden）<br>个人认为简单来说原因是坐标轴变换了（详细参考参考资料）<br><code>transform: translateZ(500px) rotateY(60deg);</code>先向屏幕方向（Z轴）移动了500px在旋转<br><code>transform: rotateY(60deg)translateZ(500px);</code>先旋转，在向旋转过的方向向Z轴移动了500px<br>所以效果会不一样<br>总之简单点说就是<strong>transform属性的书写顺序会影响最终的变换效果</strong>切记切记</p><p>记一个元素大小与perspective（px）和translateZ（px）的放大关系：<br>元素的初始宽为X,初始高为Y<br><strong>放大后的X=X*(1+translateZ/(perspective-translateZ))</strong><br>X与Y可互换<br>可以看得出perspective趋于无穷大或translateZ趋于0 3d效果越不明显</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="http://www.zhangxinxu.com/wordpress/2012/09/css3-3d-transform-perspective-animate-transition/" target="_blank" rel="external">好吧，CSS3 3D transform变换，不过如此！</a><br><a href="http://www.w3cplus.com/css3/transform-basic-property.html" target="_blank" rel="external">Transform-style和Perspective属性</a><br><a href="https://blog.yiminghe.me/2013/12/03/decomposing-css-2d-transform-matrix-into-simple-transformations/" target="_blank" rel="external">decomposing css 2d transform matrix into simple transformations</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;CSS3实现3D轮播图&quot;&gt;&lt;a href=&quot;#CSS3实现3D轮播图&quot; class=&quot;headerlink&quot; title=&quot;CSS3实现3D轮播图&quot;&gt;&lt;/a&gt;CSS3实现3D轮播图&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;http://ife.baidu.com/course/detail/id/51&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;题目地址&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;任务描述&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;实现图示效果&lt;a href=&quot;https://ww1.sinaimg.cn/large/006tNbRwly1fcr5jr0994g30w30gx4qz.gif&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;点击查看&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;只需要完成HTML，CSS代码编写，需要写一点JavaScript&lt;/li&gt;
&lt;li&gt;需要有一定的数学计算&lt;/li&gt;
&lt;li&gt;可以尝试不同的逻辑处理：如点击切换，滑动切换等等&lt;/li&gt;
&lt;li&gt;示例图仅为参考，不需要完全实现一致，其中的图片、文案均可自行设定&lt;/li&gt;
&lt;li&gt;尽可能多地尝试不同的、更多的样式设定来实践各种CSS属性&lt;/li&gt;
&lt;li&gt;HTML 及 CSS 代码结构清晰、规范&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/Lexokid/ife/blob/master/6-13/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;source&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://lexokid.github.io/ife/6-13/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;demo&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="ife" scheme="http://yoursite.com/categories/ife/"/>
    
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
      <category term="ife" scheme="http://yoursite.com/tags/ife/"/>
    
      <category term="css3d" scheme="http://yoursite.com/tags/css3d/"/>
    
  </entry>
  
  <entry>
    <title>CSS3饼状loading效果</title>
    <link href="http://yoursite.com/2017/04/21/ife2017/CSS3%E9%A5%BC%E7%8A%B6loading%E6%95%88%E6%9E%9C/"/>
    <id>http://yoursite.com/2017/04/21/ife2017/CSS3饼状loading效果/</id>
    <published>2017-04-21T09:36:00.000Z</published>
    <updated>2017-04-21T09:53:55.073Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CSS3饼状loading效果"><a href="#CSS3饼状loading效果" class="headerlink" title="CSS3饼状loading效果"></a>CSS3饼状loading效果</h1><p><a href="http://ife.baidu.com/course/detail/id/36" target="_blank" rel="external">题目地址</a></p><blockquote><p>任务描述</p></blockquote><ul><li>实现图示效果。<a href="https://ww2.sinaimg.cn/large/006tNbRwly1fcr4ycdb9cg30d80dm0tf.gif" target="_blank" rel="external">点击查看</a></li><li>需要使用HTML和CSS实现半圆和四分之三圆环</li><li>longding动画页面上下左右剧中</li><li>所有的动画元素采用HTML和CSS实现</li></ul><p><a href="https://github.com/Lexokid/ife/blob/master/6-12/index.html" target="_blank" rel="external">source</a></p><p><a href="https://lexokid.github.io/ife/6-12/index.html" target="_blank" rel="external">demo</a></p><a id="more"></a><p>这玩意比想象中的有难度啊<br>至于原理还是看看代码吧（不会作图(┬＿┬)）<br>css画图能力LEVEL+1！！</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="http://www.zhangxinxu.com/wordpress/?p=4144" target="_blank" rel="external">CSS3实现鸡蛋饼饼状图loading等待转转转</a><br><a href="http://codepen.io/CreativeJuiz/pen/vFBIh" target="_blank" rel="external">CSS Loading</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;CSS3饼状loading效果&quot;&gt;&lt;a href=&quot;#CSS3饼状loading效果&quot; class=&quot;headerlink&quot; title=&quot;CSS3饼状loading效果&quot;&gt;&lt;/a&gt;CSS3饼状loading效果&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;http://ife.baidu.com/course/detail/id/36&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;题目地址&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;任务描述&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;实现图示效果。&lt;a href=&quot;https://ww2.sinaimg.cn/large/006tNbRwly1fcr4ycdb9cg30d80dm0tf.gif&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;点击查看&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;需要使用HTML和CSS实现半圆和四分之三圆环&lt;/li&gt;
&lt;li&gt;longding动画页面上下左右剧中&lt;/li&gt;
&lt;li&gt;所有的动画元素采用HTML和CSS实现&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/Lexokid/ife/blob/master/6-12/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;source&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://lexokid.github.io/ife/6-12/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;demo&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="ife" scheme="http://yoursite.com/categories/ife/"/>
    
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
      <category term="ife" scheme="http://yoursite.com/tags/ife/"/>
    
      <category term="loading" scheme="http://yoursite.com/tags/loading/"/>
    
  </entry>
  
  <entry>
    <title>正则表达式之入门</title>
    <link href="http://yoursite.com/2017/04/20/ife2017/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E4%B9%8B%E5%85%A5%E9%97%A8/"/>
    <id>http://yoursite.com/2017/04/20/ife2017/正则表达式之入门/</id>
    <published>2017-04-20T11:20:00.000Z</published>
    <updated>2017-04-20T11:34:33.082Z</updated>
    
    <content type="html"><![CDATA[<h1 id="正则表达式之入门"><a href="#正则表达式之入门" class="headerlink" title="正则表达式之入门"></a>正则表达式之入门</h1><p><a href="http://ife.baidu.com/course/detail/id/29" target="_blank" rel="external">题目地址</a></p><blockquote><p>任务描述</p></blockquote><ul><li>编写一个判断给定数字是否为手机号码的正则表达式，测试用例参照但不限于：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">18812011232  // 测试结果应该为 true</div><div class="line">18812312     // false</div><div class="line">12345678909  // false</div></pre></td></tr></table></figure><ul><li>编写一个判断输入的字符串是否有相邻重复单词的正则表达式，测试用例可以参考但不限于：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">foo foo bar       // true</div><div class="line">foo bar foo       // false  有重复单词但是不相邻</div><div class="line">foo  barbar bar   // false</div></pre></td></tr></table></figure><p><a href="https://github.com/Lexokid/ife/blob/master/6-10/index.html" target="_blank" rel="external">source</a></p><p><a href="https://lexokid.github.io/ife/6-10/index.html" target="_blank" rel="external">demo</a></p><a id="more"></a><p>手机号码正则表达式：\^1[3|4|5|7|8]\d{9}$\<br>相邻重复单词的正则表达式：\(\b[A-Za-z]+)\s+\1\  (不带连字符)<br>/((?:[^|\s])<em>([A-Za-z]+[A-Za-z-]</em>))\s+\1(?=[$|\s])/(带连字符，有BUG)<br>由于JavaScript不支持后顾，有点难目前还不知道怎么写</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions" target="_blank" rel="external">MDN Regular Expressions</a><br><a href="http://deerchao.net/tutorials/regex/regex-1.htm" target="_blank" rel="external">正则表达式30分钟入门教程</a><br><a href="https://regexper.com/" target="_blank" rel="external">正则表达式可视化</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;正则表达式之入门&quot;&gt;&lt;a href=&quot;#正则表达式之入门&quot; class=&quot;headerlink&quot; title=&quot;正则表达式之入门&quot;&gt;&lt;/a&gt;正则表达式之入门&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;http://ife.baidu.com/course/detail/id/29&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;题目地址&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;任务描述&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;编写一个判断给定数字是否为手机号码的正则表达式，测试用例参照但不限于：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;18812011232  // 测试结果应该为 true&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18812312     // false&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12345678909  // false&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;编写一个判断输入的字符串是否有相邻重复单词的正则表达式，测试用例可以参考但不限于：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;foo foo bar       // true&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;foo bar foo       // false  有重复单词但是不相邻&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;foo  barbar bar   // false&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/Lexokid/ife/blob/master/6-10/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;source&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://lexokid.github.io/ife/6-10/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;demo&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="ife" scheme="http://yoursite.com/categories/ife/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="ife" scheme="http://yoursite.com/tags/ife/"/>
    
      <category term="正则表达式" scheme="http://yoursite.com/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>使用CSS实现折叠面板</title>
    <link href="http://yoursite.com/2017/04/19/ife2017/%E4%BD%BF%E7%94%A8CSS%E5%AE%9E%E7%8E%B0%E6%8A%98%E5%8F%A0%E9%9D%A2%E6%9D%BF/"/>
    <id>http://yoursite.com/2017/04/19/ife2017/使用CSS实现折叠面板/</id>
    <published>2017-04-19T13:00:00.000Z</published>
    <updated>2017-04-19T13:16:08.668Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使用CSS实现折叠面板"><a href="#使用CSS实现折叠面板" class="headerlink" title="使用CSS实现折叠面板"></a>使用CSS实现折叠面板</h1><p><a href="http://ife.baidu.com/course/detail/id/27" target="_blank" rel="external">题目地址</a></p><blockquote><p>任务描述</p></blockquote><ul><li>深入理解html中radio的特性</li><li>深入理解CSS选择器以及伪元素的使用</li><li>使用input的radio单选框特性结合CSS中的伪元素实现bootstrap中折叠面板<a href="http://v3.bootcss.com/javascript/#collapse-example-accordion" target="_blank" rel="external">点击查看样例</a>，要求样式一致。</li><li>当其中一个面对折叠时，其他面板需要隐藏</li><li>只能使用HTML，CSS，不允许使用JavaScript</li><li>注意测试不同情况，尤其是极端情况下的效果</li><li>有能力的同学在面板折叠或者展开时添加动画效果*</li></ul><p><a href="https://github.com/Lexokid/ife/blob/master/6-9/index.html" target="_blank" rel="external">source</a></p><p><a href="https://lexokid.github.io/ife/6-9/index.html" target="_blank" rel="external">demo</a></p><a id="more"></a><p>讲真这题怎么写一开始真的没有头绪，但仔细阅读题目会发现<strong>深入理解html中radio的特性</strong>和底下参考资料<strong>MDN label</strong><br>现在马上就知道怎么写了，有木有；就像自定义radio的那题一样，无非就是radio+label、checkbox+label配合:checked伪类选择器的应用<br>感觉写css就要脑洞大开,信我<strong>:checked+label</strong>能实现很多效果</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/label" target="_blank" rel="external">MDN label</a><br><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Adjacent_sibling_selectors" target="_blank" rel="external">MDN Adjacent sibling selectors</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;使用CSS实现折叠面板&quot;&gt;&lt;a href=&quot;#使用CSS实现折叠面板&quot; class=&quot;headerlink&quot; title=&quot;使用CSS实现折叠面板&quot;&gt;&lt;/a&gt;使用CSS实现折叠面板&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;http://ife.baidu.com/course/detail/id/27&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;题目地址&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;任务描述&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;深入理解html中radio的特性&lt;/li&gt;
&lt;li&gt;深入理解CSS选择器以及伪元素的使用&lt;/li&gt;
&lt;li&gt;使用input的radio单选框特性结合CSS中的伪元素实现bootstrap中折叠面板&lt;a href=&quot;http://v3.bootcss.com/javascript/#collapse-example-accordion&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;点击查看样例&lt;/a&gt;，要求样式一致。&lt;/li&gt;
&lt;li&gt;当其中一个面对折叠时，其他面板需要隐藏&lt;/li&gt;
&lt;li&gt;只能使用HTML，CSS，不允许使用JavaScript&lt;/li&gt;
&lt;li&gt;注意测试不同情况，尤其是极端情况下的效果&lt;/li&gt;
&lt;li&gt;有能力的同学在面板折叠或者展开时添加动画效果*&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/Lexokid/ife/blob/master/6-9/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;source&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://lexokid.github.io/ife/6-9/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;demo&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="ife" scheme="http://yoursite.com/categories/ife/"/>
    
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
      <category term="ife" scheme="http://yoursite.com/tags/ife/"/>
    
  </entry>
  
  <entry>
    <title>自定义网页右键菜单</title>
    <link href="http://yoursite.com/2017/04/18/ife2017/%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BD%91%E9%A1%B5%E5%8F%B3%E9%94%AE%E8%8F%9C%E5%8D%95/"/>
    <id>http://yoursite.com/2017/04/18/ife2017/自定义网页右键菜单/</id>
    <published>2017-04-18T13:26:00.000Z</published>
    <updated>2017-04-18T13:45:42.410Z</updated>
    
    <content type="html"><![CDATA[<h1 id="自定义网页右键菜单"><a href="#自定义网页右键菜单" class="headerlink" title="自定义网页右键菜单"></a>自定义网页右键菜单</h1><p><a href="http://ife.baidu.com/course/detail/id/26" target="_blank" rel="external">题目地址</a></p><blockquote><p>任务描述</p></blockquote><ul><li>实现鼠标右击时，出现自定义菜单。点击非自定义菜单区域时，隐藏自定义菜单。</li><li>点击自定义菜单条目时，弹出菜单条目名称。</li><li>自定义菜单出现在鼠标指针右下方，当右边区域不够大，展示在左下方，同理，当下方区域不够时，展示在鼠标指针上方</li><li>注意测试不同情况，尤其是极端情况下的效果</li></ul><p><a href="https://github.com/Lexokid/ife/blob/master/6-8/index.html" target="_blank" rel="external">source</a></p><p><a href="https://lexokid.github.io/ife/6-8/index.html" target="_blank" rel="external">demo</a></p><a id="more"></a><p>Event.page[X|Y]; //鼠标相对页面(html)的位置<br>Event.client[X|Y] //鼠标相对可视区的位置<br>Element.offset[Width|Height] //元素的宽高（包括边框）<br>document.documentElement（html).client[Width|Height] //窗口（html）可视宽高<br>window.inner[Width|Height] //窗口可视宽高</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="http://www.runoob.com/jsref/event-oncontextmenu.html" target="_blank" rel="external">oncontextmenu事件</a><br><a href="http://xchb.work/2016/07/25/event%E9%82%A3%E4%BA%9B%E4%BA%8B/" target="_blank" rel="external">event那些事</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;自定义网页右键菜单&quot;&gt;&lt;a href=&quot;#自定义网页右键菜单&quot; class=&quot;headerlink&quot; title=&quot;自定义网页右键菜单&quot;&gt;&lt;/a&gt;自定义网页右键菜单&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;http://ife.baidu.com/course/detail/id/26&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;题目地址&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;任务描述&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;实现鼠标右击时，出现自定义菜单。点击非自定义菜单区域时，隐藏自定义菜单。&lt;/li&gt;
&lt;li&gt;点击自定义菜单条目时，弹出菜单条目名称。&lt;/li&gt;
&lt;li&gt;自定义菜单出现在鼠标指针右下方，当右边区域不够大，展示在左下方，同理，当下方区域不够时，展示在鼠标指针上方&lt;/li&gt;
&lt;li&gt;注意测试不同情况，尤其是极端情况下的效果&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/Lexokid/ife/blob/master/6-8/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;source&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://lexokid.github.io/ife/6-8/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;demo&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="ife" scheme="http://yoursite.com/categories/ife/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="ife" scheme="http://yoursite.com/tags/ife/"/>
    
  </entry>
  
  <entry>
    <title>自定义checkbox、radio样式</title>
    <link href="http://yoursite.com/2017/04/17/ife2017/%E8%87%AA%E5%AE%9A%E4%B9%89checkbox%E3%80%81radio%E6%A0%B7%E5%BC%8F/"/>
    <id>http://yoursite.com/2017/04/17/ife2017/自定义checkbox、radio样式/</id>
    <published>2017-04-17T12:39:00.000Z</published>
    <updated>2017-04-17T14:35:39.019Z</updated>
    
    <content type="html"><![CDATA[<h1 id="自定义checkbox、radio样式"><a href="#自定义checkbox、radio样式" class="headerlink" title="自定义checkbox、radio样式"></a>自定义checkbox、radio样式</h1><p><a href="http://ife.baidu.com/course/detail/id/23" target="_blank" rel="external">题目地址</a></p><blockquote><p>任务描述</p></blockquote><ul><li>深入了解html label标签</li><li>了解CSS边框、背景、伪元素、伪类（注意和伪元素区分）等属性的设置</li><li>了解CSS中常见的雪碧图，并能自己制作使用雪碧图</li></ul><p><a href="https://github.com/Lexokid/ife/blob/master/6-6/index.html" target="_blank" rel="external">source</a></p><p><a href="https://lexokid.github.io/ife/6-6/index.html" target="_blank" rel="external">demo</a></p><a id="more"></a><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="css">    <span class="selector-id">#chkbox</span>&#123;</span></div><div class="line"><span class="undefined">        display: none;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="css">    <span class="selector-id">#chkbox</span>+<span class="selector-tag">label</span>&#123;</span></div><div class="line"><span class="undefined">        //style</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="css">    <span class="selector-id">#chkbox</span><span class="selector-pseudo">:checked+label</span>&#123;</span></div><div class="line"><span class="undefined">        //checked style</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">id</span>=<span class="string">"chkbox"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"chkbox"</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></div></pre></td></tr></table></figure><p>使input为none<br>for属性关联input<br>设计label的样式</p><p>css3<br>优点：减少http请求数据提高网络性能<br>缺点：代码量大，编写复杂，复杂图形没办法（可引入Font Awesome缓解，其他fonticon也行）<br>sprite<br>优点：可使用任何图标<br>缺点：请求数据量较大，放大会模糊，调整位置麻烦</p><p>具体效果看demo！</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;自定义checkbox、radio样式&quot;&gt;&lt;a href=&quot;#自定义checkbox、radio样式&quot; class=&quot;headerlink&quot; title=&quot;自定义checkbox、radio样式&quot;&gt;&lt;/a&gt;自定义checkbox、radio样式&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;http://ife.baidu.com/course/detail/id/23&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;题目地址&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;任务描述&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;深入了解html label标签&lt;/li&gt;
&lt;li&gt;了解CSS边框、背景、伪元素、伪类（注意和伪元素区分）等属性的设置&lt;/li&gt;
&lt;li&gt;了解CSS中常见的雪碧图，并能自己制作使用雪碧图&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/Lexokid/ife/blob/master/6-6/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;source&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://lexokid.github.io/ife/6-6/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;demo&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="ife" scheme="http://yoursite.com/categories/ife/"/>
    
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
      <category term="ife" scheme="http://yoursite.com/tags/ife/"/>
    
  </entry>
  
  <entry>
    <title>排序表格</title>
    <link href="http://yoursite.com/2017/04/16/ife2017/%E6%8E%92%E5%BA%8F%E8%A1%A8%E6%A0%BC/"/>
    <id>http://yoursite.com/2017/04/16/ife2017/排序表格/</id>
    <published>2017-04-16T13:52:00.000Z</published>
    <updated>2017-04-17T09:33:32.111Z</updated>
    
    <content type="html"><![CDATA[<h1 id="排序表格"><a href="#排序表格" class="headerlink" title="排序表格"></a>排序表格</h1><p><a href="http://ife.baidu.com/course/detail/id/118" target="_blank" rel="external">题目地址</a></p><blockquote><p>任务描述</p></blockquote><ul><li>实现一个支持列排序的表格组件</li><li>提供生成表格的接口，表格中的数据，表格样式尽量低耦合</li><li>可以配置对哪些列支持排序功能，并在表头进行排序按钮的显示，图中的样式为示意参考，可自行设定样式及交互方式</li><li>提供点击排序按钮后的响应接口，并提供默认的排序方法，当提供的接口没有具体实现时，按默认的排序方法进行排序操作，并更新表格中的数据显示。</li></ul><p><a href="https://github.com/Lexokid/ife/blob/master/3-7/index.html" target="_blank" rel="external">source</a></p><p><a href="https://lexokid.github.io/ife/3-7/index.html" target="_blank" rel="external">demo</a></p><a id="more"></a><p>关于这题讲讲两点</p><p>1.由于这题需要表格排序，每一次排序都会涉及到大量DOM的更新渲染（我不知道有没有更好的办法），所以我使用innerHTML拼接字符串的方式以提高性能</p><blockquote><p>对于小的DOM更改而言，两种方法（createElement()、innerHTML）效率都差不多。然而，对于大的DOM更改，使用innerHTML要比使用标准DOM方法创建同样的DOM结构快得多。————《JavaScript高级程序设计》24.2.4.2</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> list = <span class="built_in">document</span>.getElementById(<span class="string">"myList"</span>);</div><div class="line"><span class="keyword">var</span> html = <span class="string">""</span>;</div><div class="line"><span class="keyword">var</span> i;</div><div class="line"></div><div class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;</div><div class="line">    html += <span class="string">"&lt;li&gt;Item "</span> + i + <span class="string">"&lt;/li&gt;"</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">list.innerHTML = html;</div></pre></td></tr></table></figure><p>2.根据数组对象的某一个属性进行排序<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sortByProperty</span>(<span class="params">PropertyName, dir</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">obj1, obj2</span>) </span>&#123;</div><div class="line">        <span class="keyword">let</span> val1 = obj1[PropertyName];</div><div class="line">        <span class="keyword">let</span> val2 = obj2[PropertyName];</div><div class="line"></div><div class="line">        dir = dir || <span class="string">"stb"</span>;</div><div class="line">        <span class="keyword">if</span>(dir === <span class="string">"stb"</span>)&#123;</div><div class="line">            <span class="keyword">return</span> val1-val2;<span class="comment">// 小到大</span></div><div class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(dir === <span class="string">"bts"</span>)&#123;</div><div class="line">            <span class="keyword">return</span> val2-val1 ;<span class="comment">// 大到小</span></div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> data = [&#123;</div><div class="line">    <span class="string">"age"</span>: <span class="number">10</span></div><div class="line">    &#125;,&#123;</div><div class="line">    <span class="string">"age"</span>: <span class="number">20</span></div><div class="line">    &#125;,&#123;</div><div class="line">    <span class="string">"age"</span>: <span class="number">30</span></div><div class="line">&#125;];</div><div class="line"></div><div class="line">data.sort(sortByProperty(<span class="string">"age"</span>,<span class="string">"bts"</span>));</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;排序表格&quot;&gt;&lt;a href=&quot;#排序表格&quot; class=&quot;headerlink&quot; title=&quot;排序表格&quot;&gt;&lt;/a&gt;排序表格&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;http://ife.baidu.com/course/detail/id/118&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;题目地址&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;任务描述&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;实现一个支持列排序的表格组件&lt;/li&gt;
&lt;li&gt;提供生成表格的接口，表格中的数据，表格样式尽量低耦合&lt;/li&gt;
&lt;li&gt;可以配置对哪些列支持排序功能，并在表头进行排序按钮的显示，图中的样式为示意参考，可自行设定样式及交互方式&lt;/li&gt;
&lt;li&gt;提供点击排序按钮后的响应接口，并提供默认的排序方法，当提供的接口没有具体实现时，按默认的排序方法进行排序操作，并更新表格中的数据显示。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/Lexokid/ife/blob/master/3-7/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;source&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://lexokid.github.io/ife/3-7/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;demo&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="ife" scheme="http://yoursite.com/categories/ife/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="ife" scheme="http://yoursite.com/tags/ife/"/>
    
      <category term="排序表格" scheme="http://yoursite.com/tags/%E6%8E%92%E5%BA%8F%E8%A1%A8%E6%A0%BC/"/>
    
  </entry>
  
  <entry>
    <title>浮出层</title>
    <link href="http://yoursite.com/2017/04/13/ife2017/%E6%B5%AE%E5%87%BA%E5%B1%82/"/>
    <id>http://yoursite.com/2017/04/13/ife2017/浮出层/</id>
    <published>2017-04-13T14:35:00.000Z</published>
    <updated>2017-04-14T12:37:12.984Z</updated>
    
    <content type="html"><![CDATA[<h1 id="浮出层"><a href="#浮出层" class="headerlink" title="浮出层"></a>浮出层</h1><p><a href="http://ife.baidu.com/course/detail/id/115" target="_blank" rel="external">题目地址</a></p><blockquote><p>任务描述</p></blockquote><ul><li>实现一个浮出层的UI组件实现</li><li>浮出层的中心默认在屏幕正中</li><li>当浮出层显示时，屏幕滚动时，浮出层始终保持位置固定在屏幕正中，不随屏幕滚动而变化位置。或者禁止页面在有浮出层出现时滚动</li><li>当浮出层显示时，点击浮出层以外的部分，默认为关闭浮出层。可以实现一个半透明的遮罩来挡住浮出层外的部分</li><li>浮出层的样式、内容和逻辑尽量解耦</li><li>提供使用JavaScript控制浮出层展现和关闭的接口</li><li>浮出层的窗口大小可以是一个默认固定值，也可以是随内容变化而自适应变化，也可以是通过接口参数进行调整，自行根据自己能力进行选择</li><li>有能力的同学可以实现浮出层的拖拽移动浮出窗口位置以及拖拽边缘来放大缩小浮出窗口的功能</li></ul><p><a href="https://github.com/Lexokid/ife/blob/master/3-6/index.html" target="_blank" rel="external">source</a></p><p><a href="https://lexokid.github.io/ife/3-6/index.html" target="_blank" rel="external">demo</a></p><a id="more"></a><p>好吧，功能性的要求我都完成了<br>就差如何做到尽量解耦和如何优化代码了<br>这题的难点就是怎么实现拖拽移动浮窗口和拖拽边缘来放大缩小浮出窗口的逻辑<br>没什么好讲的，看代码吧！</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;浮出层&quot;&gt;&lt;a href=&quot;#浮出层&quot; class=&quot;headerlink&quot; title=&quot;浮出层&quot;&gt;&lt;/a&gt;浮出层&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;http://ife.baidu.com/course/detail/id/115&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;题目地址&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;任务描述&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;实现一个浮出层的UI组件实现&lt;/li&gt;
&lt;li&gt;浮出层的中心默认在屏幕正中&lt;/li&gt;
&lt;li&gt;当浮出层显示时，屏幕滚动时，浮出层始终保持位置固定在屏幕正中，不随屏幕滚动而变化位置。或者禁止页面在有浮出层出现时滚动&lt;/li&gt;
&lt;li&gt;当浮出层显示时，点击浮出层以外的部分，默认为关闭浮出层。可以实现一个半透明的遮罩来挡住浮出层外的部分&lt;/li&gt;
&lt;li&gt;浮出层的样式、内容和逻辑尽量解耦&lt;/li&gt;
&lt;li&gt;提供使用JavaScript控制浮出层展现和关闭的接口&lt;/li&gt;
&lt;li&gt;浮出层的窗口大小可以是一个默认固定值，也可以是随内容变化而自适应变化，也可以是通过接口参数进行调整，自行根据自己能力进行选择&lt;/li&gt;
&lt;li&gt;有能力的同学可以实现浮出层的拖拽移动浮出窗口位置以及拖拽边缘来放大缩小浮出窗口的功能&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/Lexokid/ife/blob/master/3-6/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;source&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://lexokid.github.io/ife/3-6/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;demo&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="ife" scheme="http://yoursite.com/categories/ife/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="ife" scheme="http://yoursite.com/tags/ife/"/>
    
      <category term="浮出层" scheme="http://yoursite.com/tags/%E6%B5%AE%E5%87%BA%E5%B1%82/"/>
    
  </entry>
  
  <entry>
    <title>js对象方法</title>
    <link href="http://yoursite.com/2017/04/10/JavaScript/js%E5%AF%B9%E8%B1%A1%E6%96%B9%E6%B3%95/"/>
    <id>http://yoursite.com/2017/04/10/JavaScript/js对象方法/</id>
    <published>2017-04-10T11:50:00.000Z</published>
    <updated>2017-04-13T14:39:20.629Z</updated>
    
    <content type="html"><![CDATA[<p>以下内容参考自《深入理解JavaScript》<br><a id="more"></a></p><h1 id="公有方法"><a href="#公有方法" class="headerlink" title="公有方法"></a>公有方法</h1><p>公有方法可以被此构造函数生成的所有实例化对象访问<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Constr</span>(<span class="params">...</span>)</span>&#123;</div><div class="line">    <span class="comment">// 公有属性</span></div><div class="line">    <span class="keyword">this</span>.publicData = ...;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 公有方法</span></div><div class="line">Constr.prototype.publicMethod = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;...&#125;;</div><div class="line"><span class="comment">// or</span></div><div class="line">Constr.prototype = &#123;</div><div class="line">    <span class="keyword">constructor</span>: Constr,</div><div class="line">    publicMethod: function()&#123;...&#125;,</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>demo</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">User</span>(<span class="params">name</span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.name = name;</div><div class="line">&#125;</div><div class="line">User.prototype.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">let</span> man = <span class="keyword">new</span> User(<span class="string">"jack"</span>);</div><div class="line">man.getName();  <span class="comment">// jack</span></div><div class="line"><span class="keyword">let</span> man1 = <span class="keyword">new</span> User(<span class="string">"jack"</span>);</div><div class="line"><span class="built_in">console</span>.log(man.getName === man1.getName);  <span class="comment">// true</span></div></pre></td></tr></table></figure><h1 id="私有方法"><a href="#私有方法" class="headerlink" title="私有方法"></a>私有方法</h1><p>只能从构造函数内部访问，原型方法也不能访问<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Constr</span>(<span class="params">...</span>)</span>&#123;</div><div class="line">    <span class="comment">// 私有属性</span></div><div class="line">    <span class="keyword">let</span> privateData = ...;</div><div class="line"></div><div class="line">    <span class="comment">// 私有方法</span></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">privateMethod</span>(<span class="params"></span>)</span>&#123;...&#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>demo</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">User</span>(<span class="params">name</span>)</span>&#123;</div><div class="line">    <span class="keyword">let</span> _name = name;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">getName</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(_name);</div><div class="line">    &#125;</div><div class="line">    getName();  <span class="comment">// jack</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> man = <span class="keyword">new</span> User(<span class="string">"jack"</span>);</div><div class="line">man.getName();  <span class="comment">//Uncaught TypeError: man.getName is not a function</span></div></pre></td></tr></table></figure><h1 id="特权方法"><a href="#特权方法" class="headerlink" title="特权方法"></a>特权方法</h1><p>函数在构造函数内部创建，并被添加作为实的方法。这意味着，一方面，这种函数可以访问私有数据，另一方面，它是公有的因此对原型方法可见。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Constr</span>(<span class="params">...</span>)</span>&#123;</div><div class="line">    <span class="comment">// 私有方法</span></div><div class="line">    <span class="keyword">this</span>.privilegedMethod = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;...&#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>demo</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">User</span>(<span class="params">name</span>)</span>&#123;</div><div class="line">    <span class="keyword">let</span> _name = name;</div><div class="line"></div><div class="line">    <span class="keyword">this</span>.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(_name);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> man = <span class="keyword">new</span> User(<span class="string">"jack"</span>);</div><div class="line">man.getName();  <span class="comment">// jack</span></div><div class="line"><span class="keyword">let</span> man1 = <span class="keyword">new</span> User(<span class="string">"jack"</span>);</div><div class="line"><span class="built_in">console</span>.log(man.getName === man1.getName);  <span class="comment">// false</span></div></pre></td></tr></table></figure><h1 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h1><p>静态方法和静态属性就是我们无需实例化就可以调用<br>静态方法既只允许构造函数调用，其他的实例均无法访问和调用的方法和属性。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">User</span>(<span class="params">name</span>) </span>&#123;</div><div class="line">    <span class="keyword">let</span> vname = name;</div><div class="line">    <span class="keyword">this</span>._name = name;</div><div class="line">&#125;</div><div class="line">User.cname = <span class="string">"tom"</span>;</div><div class="line">User.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// this === User</span></div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.cname);</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>._name);</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.vname);</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">let</span> man = <span class="keyword">new</span> User(<span class="string">"jack"</span>);</div><div class="line">User.getName(); <span class="comment">// tom undefined undefined</span></div><div class="line">man.getName(); <span class="comment">// Uncaught TypeError: man.getName is not a function</span></div></pre></td></tr></table></figure></p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://github.com/Wscats/Good-text-Share/issues/85" target="_blank" rel="external">前端程序员经常忽视的一个JavaScript面试题</a><br><a href="http://javascript.crockford.com/private.html" target="_blank" rel="external">Private Members in JavaScript</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;以下内容参考自《深入理解JavaScript》&lt;br&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="面向对象" scheme="http://yoursite.com/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>听指令的小方块</title>
    <link href="http://yoursite.com/2017/04/10/ife2017/%E5%90%AC%E6%8C%87%E4%BB%A4%E7%9A%84%E5%B0%8F%E6%96%B9%E5%9D%97/"/>
    <id>http://yoursite.com/2017/04/10/ife2017/听指令的小方块/</id>
    <published>2017-04-10T05:29:00.000Z</published>
    <updated>2017-04-10T11:19:52.155Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一"><a href="#一" class="headerlink" title="一"></a>一</h1><p><a href="http://ife.baidu.com/course/detail/id/109" target="_blank" rel="external">题目地址</a></p><blockquote><p>任务描述</p></blockquote><ul><li>实现一个类似棋盘的格子空间，每个格子用两个数字可以定位，一个红正方形的DOM在这个空间内，正方形中的蓝色边表示这是他的正面，有一个input输入框</li><li>在输入框中允许输入如下指令，按下按钮后，使得正方形做相应动作<ul><li>GO：向蓝色边所面向的方向前进一格（一格等同于正方形的边长）</li><li>TUN LEF：向左转（逆时针旋转90度）</li><li>TUN RIG：向右转（顺时针旋转90度）</li><li>TUN BAC：向右转（旋转180度）</li></ul></li><li>移动不能超出格子空间</li></ul><p><a href="https://github.com/Lexokid/ife/blob/master/3-4/index.html" target="_blank" rel="external">source</a></p><p><a href="https://lexokid.github.io/ife/3-4/index.html" target="_blank" rel="external">demo</a></p><a id="more"></a><p>第一次尝试用面向对象的方式去做题<br>这也算是一种进步吧<br>在做这题时，当我把棋盘画完时（100个div。。。）就觉得好蠢<br>应该把棋盘当作一个对象用js动态创建的，并能调整大小<br>鉴于已经写了就算了，如果下次遇到类似的题就应该动态创建地图</p><p>接下来来谈谈这题的小知识</p><p>1.当我们用<code>element.style.XXX</code>获取样式时获取的是行内样式<br>这时我们应该用<code>getComputedStyle()</code>来获取元素的样式</p><blockquote><p>在“DOM2 级样式”中提供了 <code>getComputedStyle()</code> 方法。这个方法接受两个参数：要取得计算样式的元素和一个伪元素字符串（例如”:after”）。如果不需要伪元素信息，第二个参数可以是 null。<code>getComputedStyle()</code> 方法返回一个 CSSStyleDeclaration 对象（与 style 属性的类型相同），其中包含当前元素的所有计算的样式。———— 以上来自《JavaScript 高级程序设计》</p></blockquote><p><strong>getComputedStyle与style的区别</strong></p><ul><li><code>getComputedStyle()</code>方法是只读的，只能获取样式，不能设置；而<code>element.style</code>能读能写</li><li><code>getComputedStyle()</code>方法获取的是最终应用在元素上的所有CSS属性对象；而<code>element.style</code>只能获取元素style属性中的CSS样式</li></ul><p>例如：我们获取元素的left属性可以这样<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> block = <span class="built_in">document</span>.getElementById(<span class="string">"block"</span>);</div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.getComputedStyle(block, <span class="literal">null</span>).left);</div><div class="line"></div><div class="line"><span class="comment">//如果元素有伪类</span></div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.getComputedStyle(block, <span class="string">":after"</span>).left);</div></pre></td></tr></table></figure></p><p>2.用<code>getComputedStyle()</code>来获取元素的transform样式时得到的是matrix<br>所以我们需要把matrix进行转换<br>从网上找到一个可以转换为scale和rotate和translate</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getAngle</span>(<span class="params">el</span>) </span>&#123;</div><div class="line">    <span class="comment">//var el = document.getElementById("divTransform");</span></div><div class="line">    <span class="keyword">var</span> st = <span class="built_in">window</span>.getComputedStyle(el, <span class="literal">null</span>);</div><div class="line">    <span class="keyword">var</span> tr = st.getPropertyValue(<span class="string">"-webkit-transform"</span>) ||</div><div class="line">        st.getPropertyValue(<span class="string">"-moz-transform"</span>) ||</div><div class="line">        st.getPropertyValue(<span class="string">"-ms-transform"</span>) ||</div><div class="line">        st.getPropertyValue(<span class="string">"-o-transform"</span>) ||</div><div class="line">        st.getPropertyValue(<span class="string">"transform"</span>) ||</div><div class="line">        <span class="string">"FAIL"</span>;</div><div class="line"></div><div class="line">    <span class="comment">// With rotate(30deg)...</span></div><div class="line">    <span class="comment">// matrix(0.866025, 0.5, -0.5, 0.866025, 0px, 0px)</span></div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'Matrix: '</span> + tr);</div><div class="line"></div><div class="line">    <span class="comment">// rotation matrix - http://en.wikipedia.org/wiki/Rotation_matrix</span></div><div class="line"></div><div class="line">    <span class="keyword">var</span> values = tr.split(<span class="string">'('</span>)[<span class="number">1</span>].split(<span class="string">')'</span>)[<span class="number">0</span>].split(<span class="string">','</span>);</div><div class="line">    <span class="keyword">var</span> a = values[<span class="number">0</span>];</div><div class="line">    <span class="keyword">var</span> b = values[<span class="number">1</span>];</div><div class="line">    <span class="keyword">var</span> c = values[<span class="number">2</span>];</div><div class="line">    <span class="keyword">var</span> d = values[<span class="number">3</span>];</div><div class="line"></div><div class="line">    <span class="keyword">var</span> scale = <span class="built_in">Math</span>.sqrt(a * a + b * b);</div><div class="line"></div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'Scale: '</span> + scale);</div><div class="line"></div><div class="line">    <span class="comment">// arc sin, convert from radians to degrees, round</span></div><div class="line">    <span class="keyword">var</span> sin = b / scale;</div><div class="line">    <span class="comment">// next line works for 30deg but not 130deg (returns 50);</span></div><div class="line">    <span class="keyword">var</span> angle = <span class="built_in">Math</span>.round(<span class="built_in">Math</span>.asin(sin) * (<span class="number">180</span> / <span class="built_in">Math</span>.PI));</div><div class="line">    <span class="comment">// var angle = Math.round(Math.atan2(b, a) * (180 / Math.PI));</span></div><div class="line"></div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'Rotate: '</span> + angle + <span class="string">'deg'</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这题我并没有用到这个方法<br>先记下方便日后参考</p><h1 id="二"><a href="#二" class="headerlink" title="二"></a>二</h1><p><a href="http://ife.baidu.com/course/detail/id/112" target="_blank" rel="external">题目地址</a></p><blockquote><p>任务描述</p></blockquote><ul><li>对于正方形的移动增加相应动画，包括移动和旋转</li><li>每个指令的执行时间是1s（可以自己调整）</li><li>增加新的指令如下：<ul><li>TRA LEF：向屏幕的左侧移动一格，方向不变</li><li>TRA TOP：向屏幕的上面移动一格，方向不变</li><li>TRA RIG：向屏幕的右侧移动一格，方向不变</li><li>TRA BOT：向屏幕的下面移动一格，方向不变</li><li>MOV LEF：方向转向屏幕左侧，并向屏幕的左侧移动一格</li><li>MOV TOP：方向转向屏幕上面，向屏幕的上面移动一格</li><li>MOV RIG：方向转向屏幕右侧，向屏幕的右侧移动一格</li><li>MOV BOT：方向转向屏幕下面，向屏幕的下面移动一格</li></ul></li></ul><p><a href="https://github.com/Lexokid/ife/blob/master/3-5/index.html" target="_blank" rel="external">source</a></p><p><a href="https://lexokid.github.io/ife/3-5/index.html" target="_blank" rel="external">demo</a></p><p>这题在上题的基础上新加入了几个命令<br>用上题的几个命令组合使用即可实现这题几个命令</p><p>js面向对象基础<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">User</span>(<span class="params">name</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> name = name; <span class="comment">//私有属性</span></div><div class="line">    <span class="keyword">this</span>.name = name; <span class="comment">//公有属性</span></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">getName</span>(<span class="params"></span>) </span>&#123; <span class="comment">//私有方法</span></div><div class="line">        <span class="keyword">return</span> name;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">User.prototype.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="comment">//公有方法</span></div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name;</div><div class="line">&#125;</div><div class="line">User.name = <span class="string">'Wscats'</span>; <span class="comment">//静态属性</span></div><div class="line">User.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="comment">//静态方法</span></div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> Wscat = <span class="keyword">new</span> User(<span class="string">'Wscats'</span>); <span class="comment">//实例化</span></div></pre></td></tr></table></figure></p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="http://www.zhangxinxu.com/wordpress/?p=2378" target="_blank" rel="external">获取元素CSS值之getComputedStyle方法熟悉</a><br><a href="http://www.zhangxinxu.com/wordpress/?p=2427" target="_blank" rel="external">理解CSS3 transform中的Matrix(矩阵)</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一&quot;&gt;&lt;a href=&quot;#一&quot; class=&quot;headerlink&quot; title=&quot;一&quot;&gt;&lt;/a&gt;一&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;http://ife.baidu.com/course/detail/id/109&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;题目地址&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;任务描述&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;实现一个类似棋盘的格子空间，每个格子用两个数字可以定位，一个红正方形的DOM在这个空间内，正方形中的蓝色边表示这是他的正面，有一个input输入框&lt;/li&gt;
&lt;li&gt;在输入框中允许输入如下指令，按下按钮后，使得正方形做相应动作&lt;ul&gt;
&lt;li&gt;GO：向蓝色边所面向的方向前进一格（一格等同于正方形的边长）&lt;/li&gt;
&lt;li&gt;TUN LEF：向左转（逆时针旋转90度）&lt;/li&gt;
&lt;li&gt;TUN RIG：向右转（顺时针旋转90度）&lt;/li&gt;
&lt;li&gt;TUN BAC：向右转（旋转180度）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;移动不能超出格子空间&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/Lexokid/ife/blob/master/3-4/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;source&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://lexokid.github.io/ife/3-4/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;demo&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="ife" scheme="http://yoursite.com/categories/ife/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="ife" scheme="http://yoursite.com/tags/ife/"/>
    
  </entry>
  
  <entry>
    <title>表单</title>
    <link href="http://yoursite.com/2017/03/29/ife2017/%E8%A1%A8%E5%8D%95/"/>
    <id>http://yoursite.com/2017/03/29/ife2017/表单/</id>
    <published>2017-03-29T14:51:00.000Z</published>
    <updated>2017-04-05T12:36:33.912Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一"><a href="#一" class="headerlink" title="一"></a>一</h1><p><a href="http://ife.baidu.com/course/detail/id/97" target="_blank" rel="external">题目地址</a></p><blockquote><p>任务描述</p></blockquote><ul><li>在页面中实现一个输入框与按钮，要求点击验证按钮后，对输入框中内容进行格式校验，并在其下方显示校验结果</li><li>校验规则：<ul><li>1.字符数为4~16位</li><li>2.每个英文字母、数字、英文符号长度为1</li><li>3.每个汉字，中文符号长度为2</li></ul></li></ul><p><a href="https://github.com/Lexokid/ife/blob/master/3-1/index.html" target="_blank" rel="external">source</a></p><p><a href="https://lexokid.github.io/ife/3-1/index.html" target="_blank" rel="external">demo</a></p><a id="more"></a><p>计算字符串长度（英文1中文2）<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getStrLen</span>(<span class="params">str</span>) </span>&#123;</div><div class="line">    <span class="keyword">let</span> len = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">of</span> str) &#123;</div><div class="line">        i.codePointAt(<span class="number">0</span>) &lt;= <span class="number">0xFF</span> ? len++ : len += <span class="number">2</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> len;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h1 id="二"><a href="#二" class="headerlink" title="二"></a>二</h1><p><a href="http://ife.baidu.com/course/detail/id/101" target="_blank" rel="external">题目地址</a></p><blockquote><p>任务描述</p></blockquote><ul><li>基于上一个任务，在页面中添加多个表单</li><li>要求:<ul><li>表单获得焦点时，下方显示表单填写规则</li><li>表单失去焦点时校验表单内容</li><li>校验结果正确时，表单边框显示绿色，并在下方显示验证通过的描述文字</li><li>校验结果错误时，表单边框显示红色，并在下方显示验证错误的描述文字</li><li>点击提交按钮时，对页面中所有输入进行校验，校验结果显示方式同上。若所有表单校验通过，弹窗显示“提交成功”，否则显示“提交失败”</li></ul></li></ul><p><a href="https://github.com/Lexokid/ife/blob/master/3-2/index.html" target="_blank" rel="external">source</a></p><p><a href="https://lexokid.github.io/ife/3-2/index.html" target="_blank" rel="external">demo</a></p><p>很常规的验证表单的题，不难，有点繁琐<br>ps：命名真是一件痛苦的事</p><h1 id="三"><a href="#三" class="headerlink" title="三"></a>三</h1><p><a href="http://ife.baidu.com/course/detail/id/106" target="_blank" rel="external">题目地址</a></p><blockquote><p>任务描述</p></blockquote><ul><li>在页面中完成两个单选框，切换单选框的不同选项时下方显示的表单随之切换。</li><li>当选择在校生时，出现两个select下拉菜单，一个选择城市，一个选择学校，当选择非在校生时，出一个文本输入框</li><li>学校下拉菜单里的学校名单均为城市下拉菜单中所选的城市中的大学，当城市发生变化时，学校一起发生变化</li><li>城市及学校的数据随意编造即可，无需真实完整</li></ul><p><a href="https://github.com/Lexokid/ife/blob/master/3-3/index.html" target="_blank" rel="external">source</a></p><p><a href="https://lexokid.github.io/ife/3-3/index.html" target="_blank" rel="external">demo</a></p><p>感觉这题完成度不高，纯粹为了完成而完成，不方便日后的拓展ヽ(●-`Д´-)ノ</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/Guide/HTML/Forms" target="_blank" rel="external">HTML表单指南</a><br><a href="http://ife.baidu.com/note/detail/id/583" target="_blank" rel="external">如何判断中文字符</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一&quot;&gt;&lt;a href=&quot;#一&quot; class=&quot;headerlink&quot; title=&quot;一&quot;&gt;&lt;/a&gt;一&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;http://ife.baidu.com/course/detail/id/97&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;题目地址&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;任务描述&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;在页面中实现一个输入框与按钮，要求点击验证按钮后，对输入框中内容进行格式校验，并在其下方显示校验结果&lt;/li&gt;
&lt;li&gt;校验规则：&lt;ul&gt;
&lt;li&gt;1.字符数为4~16位&lt;/li&gt;
&lt;li&gt;2.每个英文字母、数字、英文符号长度为1&lt;/li&gt;
&lt;li&gt;3.每个汉字，中文符号长度为2&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/Lexokid/ife/blob/master/3-1/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;source&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://lexokid.github.io/ife/3-1/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;demo&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="ife" scheme="http://yoursite.com/categories/ife/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="ife" scheme="http://yoursite.com/tags/ife/"/>
    
      <category term="表单" scheme="http://yoursite.com/tags/%E8%A1%A8%E5%8D%95/"/>
    
  </entry>
  
  <entry>
    <title>悬浮模糊效果</title>
    <link href="http://yoursite.com/2017/03/27/ife2017/%E6%82%AC%E6%B5%AE%E6%A8%A1%E7%B3%8A%E6%95%88%E6%9E%9C/"/>
    <id>http://yoursite.com/2017/03/27/ife2017/悬浮模糊效果/</id>
    <published>2017-03-27T13:39:00.000Z</published>
    <updated>2017-08-16T09:33:24.402Z</updated>
    
    <content type="html"><![CDATA[<h1 id="悬浮模糊效果"><a href="#悬浮模糊效果" class="headerlink" title="悬浮模糊效果"></a>悬浮模糊效果</h1><p><a href="http://ife.baidu.com/course/detail/id/14" target="_blank" rel="external">题目地址</a></p><blockquote><p>任务描述</p></blockquote><ul><li>实现文字的流光渐变动画</li><li>背景图需要进行模糊处理</li><li>实现按钮边框的从中间到两边扩展开</li></ul><p><a href="https://github.com/Lexokid/ife/blob/master/6-1/index.html" target="_blank" rel="external">source</a></p><p><a href="https://lexokid.github.io/ife/6-1/index.html" target="_blank" rel="external">demo</a></p><a id="more"></a><p>这题主要的难点就是文字的流光渐变效果<br>主要跟这五个属性有关<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.demo</span>&#123;</div><div class="line">    <span class="comment">/*前50%颜色组要与后50%颜色组一样且最后100%的颜色要和开头0%的颜色相等*/</span></div><div class="line">    <span class="attribute">background-image</span>: <span class="built_in">-webkit-linear-gradient</span>(left, blue, red 25%, blue 50%, red 75%, blue 100%);</div><div class="line"></div><div class="line">    <span class="comment">/*背景裁剪至文字形状*/</span></div><div class="line">    <span class="attribute">-webkit-background-clip</span>: text;</div><div class="line"></div><div class="line">    <span class="comment">/*文字透明，使背景颜色显示出来*/</span></div><div class="line">    <span class="attribute">color</span>: transparent;</div><div class="line"></div><div class="line">    <span class="comment">/*将背景图宽度拉长至两倍，之前设置background-image的两份相同的颜色组，就是为了能在此拉长后只显示一份颜色组，另外超出的半截颜色组用来实现流光效果*/</span></div><div class="line">    <span class="attribute">background-size</span>: <span class="number">200%</span> <span class="number">100%</span>;</div><div class="line"></div><div class="line">    <span class="comment">/*将背景从0移动到-100%的位置，无限重复即可得到流光渐变效果*/</span></div><div class="line">    <span class="attribute">animation</span>: streamer <span class="number">3s</span> infinite linear;</div><div class="line">&#125;</div><div class="line">@<span class="keyword">keyframes</span> streamer&#123;</div><div class="line">    <span class="selector-tag">from</span>&#123;</div><div class="line">        <span class="attribute">background-position</span>: <span class="number">0</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="selector-tag">to</span>&#123;</div><div class="line">        <span class="attribute">background-position</span>: -<span class="number">100%</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>关于background-clip的text选项估计很多人都不知道，我也是遇到这题才知道有这个值<br>而且w3school上也没有这个值（估计是没更新吧，毕竟前端发展蛮快的）<br>关于这题，你仔细观察题目demo会发现有2个细节</p><ol><li>鼠标放上图片时文字有几十像素的向上移动</li><li>边框变长的贝塞尔曲线（一开始很快然后变得很慢，边框并不是匀速变长的）<br>主要看了一些同学的demo，发现有好多都没有注意细节<br>前端嘛，主要就是细心<br>边框的上下与左右的边框宽度不一样，我感觉不好看就没做了</li></ol><p>关于背景图我用的不是gif<br>而是用把几张图拼接成一张长图，通过改变background-position-x来形成类似gif的效果<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.gif</span>&#123;</div><div class="line">    <span class="attribute">background-image</span>: <span class="built_in">url</span>();</div><div class="line">    <span class="attribute">background-repeat</span>: no-repeat;</div><div class="line">    <span class="attribute">background-position</span>: <span class="number">0</span> <span class="number">0</span>;</div><div class="line">    <span class="attribute">animation</span>: gif <span class="number">8s</span> <span class="built_in">steps</span>(11) infinite;</div><div class="line">    <span class="comment">/*steps(n) n为图片数量*/</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">@<span class="keyword">keyframes</span> gif&#123;</div><div class="line">    <span class="selector-tag">to</span>&#123;</div><div class="line">        <span class="attribute">background-position</span>: -<span class="number">3665px</span> <span class="number">0</span>;</div><div class="line">        <span class="comment">/*图片的总长*/</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>下方这是张鑫旭大神的gif实现方法（底部有链接）<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.love</span> &#123;</div><div class="line">    <span class="attribute">display</span>: block;</div><div class="line">    <span class="attribute">width</span>: <span class="number">100px</span>; <span class="attribute">height</span>: <span class="number">100px</span>;</div><div class="line">    <span class="attribute">background</span>: <span class="built_in">url</span>(web_heart_animation.png) <span class="number">0</span> <span class="number">0</span> no-repeat;</div><div class="line">    <span class="attribute">background-size</span>: <span class="number">2900%</span>;</div><div class="line">    <span class="attribute">animation</span>: heart-burst <span class="built_in">steps</span>(28) <span class="number">0.8s</span> infinite both;</div><div class="line">&#125;</div><div class="line"></div><div class="line">@<span class="keyword">keyframes</span> heart-burst &#123;</div><div class="line">  0% &#123;</div><div class="line">    <span class="attribute">background-position</span>: <span class="number">0%</span>;</div><div class="line">  &#125;</div><div class="line">  100% &#123;</div><div class="line">    <span class="attribute">background-position</span>: <span class="number">100%</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>一开始用张大神的写法发现图片会少一帧<br>至于为什么少一帧，很好目前我也不懂</p><p>这个还是蛮需要想象力的，但这就是它的有趣之处<br>另外用这个方法还可以实现ktv歌词的滚动效果<br>也许还能做出更炫酷的效果，这就需要想象力了<br>总之这题挺有趣的<br>（PS：一开始为了找背景图就去贴吧下cg，7g多因为百度云限速下了一天多，结果cg都是H的，后面才知道这玩意叫sd，才几百m ORZ 白白浪费一天时间下载）</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="http://www.w3cplus.com/" target="_blank" rel="external">w3cplus</a><br><a href="https://tympanus.net/codrops/category/playground/page/2/" target="_blank" rel="external">Codrops</a><br><a href="http://www.alloyteam.com/" target="_blank" rel="external">AlloyTeam</a><br><a href="http://www.zhangxinxu.com/wordpress/?p=5081" target="_blank" rel="external">CSS或JS实现gif动态图片的停止与播放</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;悬浮模糊效果&quot;&gt;&lt;a href=&quot;#悬浮模糊效果&quot; class=&quot;headerlink&quot; title=&quot;悬浮模糊效果&quot;&gt;&lt;/a&gt;悬浮模糊效果&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;http://ife.baidu.com/course/detail/id/14&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;题目地址&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;任务描述&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;实现文字的流光渐变动画&lt;/li&gt;
&lt;li&gt;背景图需要进行模糊处理&lt;/li&gt;
&lt;li&gt;实现按钮边框的从中间到两边扩展开&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/Lexokid/ife/blob/master/6-1/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;source&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://lexokid.github.io/ife/6-1/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;demo&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="ife" scheme="http://yoursite.com/categories/ife/"/>
    
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
      <category term="ife" scheme="http://yoursite.com/tags/ife/"/>
    
  </entry>
  
</feed>
