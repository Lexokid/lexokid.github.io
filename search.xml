<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[牛客网—剑指offer（4）]]></title>
    <url>%2F2018%2F04%2F12%2FJavaScript%2F%E7%89%9B%E5%AE%A2%E7%BD%91%E2%80%94%E5%89%91%E6%8C%87offer%EF%BC%884%EF%BC%89%2F</url>
    <content type="text"><![CDATA[1.顺时针打印矩阵题目描述输入一个矩阵，按照从外向里以顺时针的顺序依次打印出每一个数字，例如，如果输入如下矩阵：12341 2 3 45 6 7 89 10 11 1213 14 15 16 则依次打印出数字1,2,3,4,8,12,16,15,14,13,9,5,6,7,11,10. 123function printMatrix(matrix)&#123;&#125; 思路 2.链表中倒数第k个结点题目描述 12 思路 3.反转链表题目描述 12 思路 4.合并两个排序的链表题目描述 12 思路 5.树的子结构题目描述 12 思路 6.二叉树的镜像题目描述 12 思路]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[牛客网—剑指offer（3）]]></title>
    <url>%2F2018%2F03%2F23%2FJavaScript%2F%E7%89%9B%E5%AE%A2%E7%BD%91%E2%80%94%E5%89%91%E6%8C%87offer%EF%BC%883%EF%BC%89%2F</url>
    <content type="text"><![CDATA[1.调整数组顺序使奇数位于偶数前面题目描述输入一个整数数组，实现一个函数来调整该数组中数字的顺序，使得所有的奇数位于数组的前半部分，所有的偶数位于位于数组的后半部分，并保证奇数和奇数，偶数和偶数之间的相对位置不变。 12345678function reOrderArray(array)&#123; var odd=[]; var even=[]; array.forEach(function(item)&#123; item &amp; 1 ? odd.push(item) : even.push(item); &#125;); return odd.concat(even);&#125; 思路null 2.链表中倒数第k个结点题目描述输入一个链表，输出该链表中倒数第k个结点。 1234567891011121314151617181920/*function ListNode(x)&#123; this.val = x; this.next = null;&#125;*/function FindKthToTail(head, k)&#123; var p1 = head; var p2 = head; if(head === null || k &lt;= 0) return null; while(p1 !== null)&#123; p1 = p1.next; if(k&lt;1)&#123; p2 = p2.next; &#125; k--; &#125; return k &gt;= 1 ? null : p2;&#125; 思路两个指针，先让第一个指针和第二个指针都指向头结点，首先让第一个指针走(k-1)步，到达第k个节点。然后两个指针同时往后移动，当第一个结点到达末尾的时候，第二个结点所在位置就是倒数第k个节点了，如果k最终的值大于等于1，则k的值已经超出链表的长度了这里没说清楚那就当第1个节点为1吧(k&gt;=1) 3.反转链表题目描述输入一个链表，反转链表后，输出链表的所有元素。 123456789101112131415161718/*function ListNode(x)&#123; this.val = x; this.next = null;&#125;*/function ReverseList(pHead)&#123; if(pHead === null) return null; var pre = null; var next = null; while(pHead !== null)&#123; next = pHead.next; pHead.next = pre; pre = pHead; pHead = next; &#125; return pre;&#125; 思路改变节点的指向p1-&gt;p2-&gt;p3-&gt;p4p1&lt;-p2&lt;-p3&lt;-p4 4.合并两个排序的链表题目描述输入两个单调递增的链表，输出两个链表合成后的链表，当然我们需要合成后的链表满足单调不减规则。 12345678910111213141516171819202122232425262728293031323334353637383940414243/*function ListNode(x)&#123; this.val = x; this.next = null;&#125;*/function Merge(pHead1, pHead2)&#123; if(pHead1 === null) return pHead2; if(pHead2 === null) return pHead1; var pHead = null; var pCurrent = null; // 区小值作为链头 if(pHead1.val &lt;= pHead2.val)&#123; pHead = pHead1; pHead1 = pHead1.next; &#125;else&#123; pHead = pHead2; pHead2 = pHead2.next; &#125; pCurrent = pHead; // 当有一个链表到结尾时，循环结束 while(pHead1 !== null &amp;&amp; pHead2 !== null)&#123; if(pHead1.val &lt;= pHead2.val)&#123; pCurrent.next = pHead1; // 把这个节点加入合并列表 pCurrent = pCurrent.next; // 工作制作后移一位 pHead1 = pHead1.next; // 链表后移一位 &#125;else&#123; pCurrent.next = pHead2; pCurrent = pCurrent.next; pHead2 = pHead2.next; &#125; &#125; // 判断是那个链表到结尾了，把另外一个链表拼接上合并的链表 if(pHead1 === null)&#123; pCurrent.next = pHead2; &#125;else&#123; pCurrent.next = pHead1; &#125; return pHead;&#125; 思路比较链表的两个值，较小的一个值链接到合并链表上并且链表后移一位。看不懂可以尝试理解以下代码12345678910function A()&#123; this.x = 0;&#125;var a = new A();var b = a;console.log(a.x,b.x); // 0 0a.x++;console.log(a.x,b.x); // 1 1a = new A();console.log(a.x,b.x); // 0 1 5.树的子结构题目描述输入两棵二叉树A，B，判断B是不是A的子结构。（ps：我们约定空树不是任意一个树的子结构） 1234567891011121314151617181920212223242526/* function TreeNode(x) &#123; this.val = x; this.left = null; this.right = null;&#125; */function HasSubtree(pRoot1, pRoot2)&#123; // 如果Tree1或Tree2为null，返回false if(pRoot1 === null || pRoot2 === null) return false; // 判断以当前根节点的树是否等于Tree2 return isSubtree(pRoot1, pRoot2) || // 递归左子树 HasSubtree(pRoot1.left, pRoot2) || // 递归右子树 HasSubtree(pRoot1.right, pRoot2);&#125;function isSubtree(pRoot1, pRoot2)&#123; // 如果Tree2已经遍历完了都能对应的上，返回true if(pRoot2 === null) return true; // 如果Tree2还没有遍历完，Tree1却遍历完了，返回false if(pRoot1 === null) return false; // 如果其中有一个点没有对应上，返回false if(pRoot1.val !== pRoot2.val) return false; // 如果根节点对应的上，那么就分别去子节点里面匹配 return isSubtree(pRoot1.left, pRoot2.left) &amp;&amp; isSubtree(pRoot1.right, pRoot2.right);&#125; 思路注释 6.二叉树的镜像题目描述操作给定的二叉树，将其变换为源二叉树的镜像。输入描述:12345678910111213二叉树的镜像定义：源二叉树 8 / \ 6 10 / \ / \5 7 9 11镜像二叉树 8 / \ 10 6 / \ / \11 9 7 5 12345678910111213/* function TreeNode(x) &#123; this.val = x; this.left = null; this.right = null;&#125; */function Mirror(root)&#123; if(root === null) return null; var temp = root.left; root.left = root.right; root.right = temp; Mirror(root.left); Mirror(root.right);&#125; 思路交换值，递归]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[牛客网—剑指offer（2）]]></title>
    <url>%2F2018%2F03%2F21%2FJavaScript%2F%E7%89%9B%E5%AE%A2%E7%BD%91%E2%80%94%E5%89%91%E6%8C%87offer%EF%BC%882%EF%BC%89%2F</url>
    <content type="text"><![CDATA[1.斐波那契数列题目描述大家都知道斐波那契数列，现在要求输入一个整数n，请你输出斐波那契数列的第n项。n&lt;=39 1234567891011121314151617181920// stackoverflow// function Fibonacci(n)&#123;// if(n === 0)&#123;// return 0;// &#125;else if(n === 1)&#123;// return 1;// &#125;else&#123;// return Fibonacci(n-1)+Fibonacci(n-2);// &#125;// &#125;function Fibonacci(n)&#123; var f = 0; var g = 1; while(n--)&#123; g += f; f = g - f; &#125; return f;&#125; 思路斐波那契数列F(0)=0，F(1)=1, F(n)=F(n-1)+F(n-2)（n&gt;=2，n∈N*）在这里用递归是行不通的，测试用例会有个非常大的值会导致stackoverflow首先什么是动态规划，了解一下什么是动态规划？动态规划的意义是什么？ - 知乎看完了貌似懂了一点点，又貌似什么都不懂反正对于这题来讲就是以一定的空间代价换取重复的大量计算1234567n&gt;=1根据前两个状态计算下一个状态f g gf(n-1) + f(n) = f(n+1)更新f变量g f ff(n+1) - f(n-1) = f(n) 2.跳台阶题目描述一只青蛙一次可以跳上1级台阶，也可以跳上2级。求该青蛙跳上一个n级的台阶总共有多少种跳法。 123456789function jumpFloor(number)&#123; var f = 1; var g = 2; while(--number)&#123; g += f; f = g - f; &#125; return f;&#125; 思路 f(1) = 1 f(2) = 2 f(3) = 3 f(4) = 5 f(5) = 8 … | 1 (n=1) f(n) = | 2 (n=2) | f(n-1) + f(n-2) (n&gt;2，n∈N*)依旧类似斐波那契数列 3.变态跳台阶题目描述一只青蛙一次可以跳上1级台阶，也可以跳上2级……它也可以跳上n级。求该青蛙跳上一个n级的台阶总共有多少种跳法。 123function jumpFloorII(number)&#123; return 1&lt;&lt;(--number);&#125; 思路因为n级台阶，第一步有n种跳法：跳1级、跳2级、到跳n级跳1级，剩下n-1级，则剩下跳法是f(n-1)跳2级，剩下n-2级，则剩下跳法是f(n-2)f(1) = 1所以f(n)=f(n-1)+f(n-2)+…+f(1)因为f(n-1)=f(n-2)+f(n-3)+…+f(1)所以f(n)=2*f(n-1)f(n) = 2^(n-1) 4.矩形覆盖题目描述我们可以用2*1的小矩形横着或者竖着去覆盖更大的矩形。请问用n个2*1的小矩形无重叠地覆盖一个2*n的大矩形，总共有多少种方法？ 12345678910function rectCover(number)&#123; var f = 1; var g = 2; if(number === 0) return 0; while(--number)&#123; g += f; f = g - f; &#125; return f;&#125; 思路2*n的大矩形，和n个2*1的小矩形其中target*2为大矩阵的大小有以下几种情形：1.target &lt;= 0 大矩形为&lt;= 2*0,直接return 02.target = 1 大矩形为2*1，只有一种摆放方法，return13.target = 2 大矩形为2*2，有两种摆放方法，return24.target = n 分为两步考虑：(1)第一次摆放一块 2*1 的小矩阵，则摆放方法总共为f(target - 1)(2)第一次摆放一块 1*2 的小矩阵，因为，摆放了一块1*2的小矩阵，对应下方的1*2摆放方法就确定了，则摆放方法总共为f(target - 2)@Follow所以公式为： f(n) = | n (n&gt;=0，n&lt;2，n∈N*) | f(n-1) + f(n-2) (n&gt;2，n∈N*) 答案与跳台阶类似 5.二进制中1的个数题目描述输入一个整数，输出该数二进制表示中1的个数。其中负数用补码表示。 12345678function NumberOf1(n)&#123; var count = 0; while(n) &#123; ++count; n = (n - 1) &amp; n; &#125; return count;&#125; 思路如果一个整数不为0，那么这个整数至少有一位是1。如果我们把这个整数减1，那么原来处在整数最右边的1就会变为0，原来在1后面的所有的0都会变成1(如果最右边的1后面还有0的话)。其余所有位将不会受到影响。举个例子：一个二进制数1100，从右边数起第三位是处于最右边的一个1。减去1后，第三位变成0，它后面的两位0变成了1，而前面的1保持不变，因此得到的结果是1011.我们发现减1的结果是把最右边的一个1开始的所有位都取反了。这个时候如果我们再把原来的整数和减去1之后的结果做与运算，从原来整数最右边一个1那一位开始所有位都会变成0。如1100&amp;1011=1000.也就是说，把一个整数减去1，再和原整数做与运算，会把该整数最右边一个1变成0.那么一个整数的二进制有多少个1，就可以进行多少次这样的操作。@菩提旭光 6.数值的整数次方题目描述给定一个double类型的浮点数base和int类型的整数exponent。求base的exponent次方。 123456789101112131415// 这可不是很好呢function Power(base, exponent)&#123; return Math.pow(base,exponent);&#125;// 快速幂function Power(base, exponent)&#123; var r = 1; var b = Math.abs(exponent); while(b)&#123; if(b &amp; 1) r *= base; base *= base; b &gt;&gt;= 1; &#125; return exponent &lt; 0 ? 1/r : r;&#125; 思路快速幂_百度百科]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[牛客网—剑指offer（1）]]></title>
    <url>%2F2018%2F03%2F20%2FJavaScript%2F%E7%89%9B%E5%AE%A2%E7%BD%91%E2%80%94%E5%89%91%E6%8C%87offer%EF%BC%881%EF%BC%89%2F</url>
    <content type="text"><![CDATA[最近面临找工作的事，就准备写些关于数据结构的题。题目地址：剑指Offer_编程题_牛客网一共66题，题目不提供测试用例有时都不知道怎么写。 1.二维数组中的查找题目描述在一个二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。 12345678910111213141516function Find(target, array)&#123; var row = array.length; var col = array[0].length; if(row === 0 || col === 0)return false; var i = row - 1; var j = 0; while(i &gt;= 0 &amp;&amp; j &lt; col)&#123; if(array[i][j] &gt; target) i--; else if(array[i][j] &lt; target) j++; else return true; &#125; return false;&#125; 思路利用二维数组由上到下，由左到右递增的规律那么选取右上角或者左下角的元素array[row][col]与target进行比较当target小于元素array[row][col]时，那么target必定在元素a所在行的左边,即col--当target大于元素array[row][col]时，那么target必定在元素a所在列的下边,即row++ 2.替换空格题目描述请实现一个函数，将一个字符串中的空格替换成“%20”。例如，当字符串为We Are Happy.则经过替换之后的字符串为We%20Are%20Happy。 123function replaceSpace(str)&#123; return str.replace(/\s/g,'%20');&#125; 思路无f**k可说。 3.从尾到头打印链表题目描述输入一个链表，从尾到头打印链表每个节点的值。 12345678910111213function ListNode(x)&#123; this.val = x; this.next = null;&#125;function printListFromTailToHead(head)&#123; var array = []; while(head)&#123; array.push(head.val); head = head.next; &#125; return array.reverse();&#125; 思路null 4.重建二叉树题目描述输入某二叉树的前序遍历和中序遍历的结果，请重建出该二叉树。假设输入的前序遍历和中序遍历的结果中都不含重复的数字。例如输入前序遍历序列{1,2,4,7,3,5,6,8}和中序遍历序列{4,7,2,1,5,3,8,6}，则重建二叉树并返回。 12345678910111213141516171819function TreeNode(x) &#123; this.val = x; this.left = null; this.right = null;&#125;function reConstructBinaryTree(pre, vin)&#123; if(pre.length === 0 || vin.length === 0) return null; var tree = new TreeNode(pre[0]); var root = vin.indexOf(pre[0]); var left = vin.slice(0,root); var right = vin.slice(root+1); pre.shift(); tree.left = reConstructBinaryTree(pre,left); tree.right = reConstructBinaryTree(pre,right); return tree;&#125; 思路首先重构二叉树需要有前序遍历+中序遍历或者中序遍历+后序遍历以题目提供的例子前序遍历+中序遍历为例前序遍历的顺序是：根-&gt;左子树-&gt;右子树中序遍历的顺序是：左子树-&gt;根-&gt;右子树前序遍历的第一个元素是整颗树的根节点根据根节点和中序遍历来划分左子树和右子树左子树:{4,7,2}根:{1}右子树:{5,3,8,6}如果左子树有值，则前序遍历第二个值为左子树的根左子树:{4,7}根:{2}右子树:{}如果左子树有值，则前序遍历第三个值为左子树的根左子树:{}根:{4}右子树:{7}以此类推中序遍历+后序遍历同理重构后的树1234567 1 / \ 2 3 / / \4 5 6 \ / 7 8 5.用两个栈实现队列题目描述用两个栈来实现一个队列，完成队列的Push和Pop操作。 队列中的元素为int类型。 1234567891011121314151617var stackA = [];var stackB = [];function push(node)&#123; stackA.push(node);&#125;function pop()&#123; if(stackA.length === 0 &amp;&amp; stackB.length === 0) return null; if(stackB.length === 0)&#123; while(stackA.length &gt; 0)&#123; stackB.push(stackA.pop()); &#125; &#125; return stackB.pop();&#125; 思路这题是让我们用两个栈来模拟一个队列的push和pop操作首先栈是LIFO（Last in, First out,后进先出），队列是（First in, First out,先进先出）push：将元素进stackApop：判断stackB是否为空，如果为空，则将stackA中的所有元素pop并push进stackB，stackB出栈如果不为空，则直接stackB出栈 6.旋转数组的最小数字题目描述把一个数组最开始的若干个元素搬到数组的末尾，我们称之为数组的旋转。 输入一个非递减排序的数组的一个旋转，输出旋转数组的最小元素。 例如数组{3,4,5,1,2}为{1,2,3,4,5}的一个旋转，该数组的最小值为1。 NOTE：给出的所有元素都大于0，若数组大小为0，请返回0。 1234567891011121314151617181920212223242526272829303132// 虽然可以这么做，但这题很明显不是让我们这么做function minNumberInRotateArray(rotateArray)&#123; if(rotateArray.length === 0) return 0; return Math.min.apply(Math,rotateArray);&#125;// 二分法function minNumberInRotateArray(rotateArray)&#123; var left = 0; var mid = 0; var right = rotateArray.length-1; // 数组大小为0返回0 if(rotateArray.length === 0) return 0; while(rotateArray[left] &gt;= rotateArray[right])&#123; // 如果两个指针相邻，则最小值为right指针 if(right - left === 1)&#123; mid = right; break; &#125; mid = Math.ceil((left + right) / 2); if(rotateArray[mid] &gt;= rotateArray[left])&#123; left = mid; &#125;else&#123; right = mid; &#125; &#125; return rotateArray[mid];&#125; 思路这是一道二分查找的变形的题目。旋转之后的数组实际上可以划分成两个有序的子数组：前面子数组的大小都大于后面子数组中的元素注意到实际上最小的元素就是两个子数组的分界线。本题目给出的数组一定程度上是排序的，因此我们试着用二分查找法寻找这个最小的元素。思路：（1）我们用两个指针left,right分别指向数组的第一个元素和最后一个元素。按照题目的旋转的规则，第一个元素应该是大于最后一个元素的（没有重复的元素）。但是如果不是旋转，第一个元素肯定小于最后一个元素。（2）找到数组的中间元素。中间元素大于第一个元素，则中间元素位于前面的递增子数组，此时最小元素位于中间元素的后面。我们可以让第一个指针left指向中间元素。移动之后，第一个指针仍然位于前面的递增数组中。中间元素小于第一个元素，则中间元素位于后面的递增子数组，此时最小元素位于中间元素的前面。我们可以让第二个指针right指向中间元素。移动之后，第二个指针仍然位于后面的递增数组中。这样可以缩小寻找的范围。（3）按照以上思路，第一个指针left总是指向前面递增数组的元素，第二个指针right总是指向后面递增的数组元素。最终第一个指针将指向前面数组的最后一个元素，第二个指针指向后面数组中的第一个元素。也就是说他们将指向两个相邻的元素，而第二个指针指向的刚好是最小的元素，这就是循环的结束条件。@念润]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[2017年终吐槽]]></title>
    <url>%2F2017%2F12%2F24%2Fessay%2F2017%E5%B9%B4%E7%BB%88%E5%90%90%E6%A7%BD%2F</url>
    <content type="text"><![CDATA[&emsp;&emsp;好久没进行更新了，已经有两个月没写过代码了，这两个月一直忙着学英语（都是四级的锅），不过经过这两个月的英语学习我也发现了，英语对我今后的发展还是很重要的，所以今后的英语的学习是要一直持续下去的。四级已经考完了希望能过吧，毕竟大学的最后一次考试我还想考一次六级呢(☄⊙ω⊙)☄万一过了呢。 &emsp;&emsp;好扯回正题，17年是我正式步入前端的一年，之前的学习就像是在小打小闹，正式的入门是从今年百度ife活动开始的，我一步步跟着ife的任务进行学习，遇到困难问题只能自己解决没人指导，学起来有点痛苦，不过我认为这也是一种锻炼。ife上的任务我觉得挺适合给自学的初学者，我已经安利给好几位同学了，不过貌似他们都不怎么在意。在持续了两个月的学习之后又得去忙学校的各种实验、实训，暑假还得去学校安排的培训机构去学习，说实话那些培训机构挺水的，貌似停留在几年前的那种水平。然后今年大四上学期也就学习了两个月，后两个月在学英语了，从我github上的contributions也就能看出我今年学习的时间了。 &emsp;&emsp;好在接下来没课了，也有了大把时间来进行学习了，找工作的事在往后延延，趁现在寒假有时间想做完毕业设计，目前毕业设计打算做一个canvas的球球大作战游戏，在这之前先完成一个TODOlist，用于记录下自己想完成的东西，以后可以很方便的回顾自己做了什么、学到了什么。先给自己寒假定个小目标：完成TODOlist、完成毕业设计、坚持学英语。毕业目标就是月薪达到10k以上。 &emsp;&emsp;今年对我来讲算是一个转折点了，清楚自己想干什么，今后的发展以及目标都定好了，大学四年转眼间就过去了，仔细回想起来这四年过的很失败，貌似啥也没学会，还是以前的那个我。临近毕业了，学生生涯将要结束了，这意味着走向社会了，今后主要是靠自己，总之加油吧。]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[webpack 3.x]]></title>
    <url>%2F2017%2F10%2F16%2Fwebpack%2Fwebpack%203.x%2F</url>
    <content type="text"><![CDATA[今天有时间仔细的学习一下webpack，将简单的整理一下官网的内容webpack测试版本 简介webpack 是一个现代 JavaScript 应用程序的模块打包器(module bundler)。当 webpack 处理应用程序时，它会递归地构建一个依赖关系图(dependency graph)，其中包含应用程序需要的每个模块，然后将所有这些模块打包成少量的 bundle - 通常只有一个，由浏览器加载。 安装在开始之前，请确保安装了 Node.js 的最新版本。要安装最新版本或特定版本，请运行以下命令之一： 12npm install --save-dev webpacknpm install --save-dev webpack@&lt;version&gt; 对于大多数项目，我们建议本地安装。这可以使我们在引入破坏式变更(breaking change)的依赖时，更容易分别升级项目。不推荐全局安装 webpack。这会将您项目中的 webpack 锁定到指定版本，并且在使用不同的 webpack 版本的项目中，可能会导致构建失败。 开始123mkdir webpack-demo &amp;&amp; cd webpack-demonpm init -ynpm install --save-dev webpack 首先新建一个index.htmlindex.html:123456789101112&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt; &lt;meta http-equiv="X-UA-Compatible" content="ie=edge"&gt; &lt;title&gt;Document&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;script src="./dist/bundle.js"&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 接下来在src文件夹下新建一个index.js文件这个js文件就是我们写js代码的入口文件 index.js:1234567function component() &#123; var element = document.createElement('div'); element.innerHTML = 'hello webpack!'; return element;&#125;document.body.appendChild(component()); 虽然webpack有几种配置方法，但大多数项目会需要很复杂的设置，所以大多情况下都采用写webpack的配置文件。这比在终端(terminal)中输入大量命令要高效的多。 webpack.config.js:123456789const path = require('path');module.exports = &#123; entry: './src/index.js',// 入口文件 output: &#123; filename: 'bundle.js',// 输出的文件名 path: path.resolve(__dirname, 'dist')// 输出的文件路径 &#125;&#125;; 由于webpack不是全局安装，所以不能直接在cmd里运行webpack命令，所以可以在package.json的scripts中加入”build”: “webpack”，接下来就可以在cmd里运行1npm run build 不用package.json的方法也可以直接：1node_modules/.bin/webpack --config webpack.config.js 接着就可以看到目录下多了一个dist文件夹和bundle.js文件目录： 12345678910webpack-demo |- index.html |- package.json |- package-lock.json |- webpack.config.js |- /dist |- bundle.js |- /src |- index.js |- node_modules 最后在html里引入bundle.js即可，最简单的demo就完成了 Entry、Output、Loader、Plugins在接着往下之前先学习四个核心概念：入口(entry)、输出(output)、loader、插件(plugins) 入口(entry)入口起点(entry point)告诉 webpack 从哪里开始，并根据依赖关系图确定需要打包的内容。可以将应用程序的入口起点认为是根上下文(contextual root) 或 app 第一个启动文件。 在 webpack 中，我们使用 webpack 配置对象(webpack configuration object) 中的 entry 属性来定义入口。 在上面的例子中的webpack.config.js: 123module.exports = &#123; entry: './src/index.js',// 入口文件&#125; 根据不同应用程序的需要，声明 entry 属性有多种方式。 了解更多！ 输出(output)将所有的资源(assets)归拢在一起后，还需要告诉 webpack 在哪里打包应用程序。webpack 的 output 属性描述了如何处理归拢在一起的代码(bundled code)。 在上面的例子中的webpack.config.js: 123456789const path = require('path');module.exports = &#123; entry: './src/index.js',// 入口文件 output: &#123; path: path.resolve(__dirname, 'dist')// 输出的文件路径 filename: 'bundle.js',// 输出的文件名 &#125;&#125;; 在上面的例子中，我们通过 output.filename 和 output.path 属性，来告诉 webpack bundle 的名称，以及我们想要生成(emit)到哪里。 output 属性还有更多可配置的特性，但让我们花一些时间先了解一些 output 属性最常见的用例。 了解更多！ Loaderloader 用于对模块的源代码进行转换。loader 可以使你在 import 或”加载”模块时预处理文件。因此，loader 类似于其他构建工具中“任务(task)”，并提供了处理前端构建步骤的强大方法。loader 可以将文件从不同的语言（如 TypeScript）转换为 JavaScript，或将内联图像转换为 data URL。loader 甚至允许你直接在 JavaScript 模块中 import CSS文件！ 在 webpack 的配置中 loader 有两个目标： 识别出(identify)应该被对应的 loader 进行转换(transform)的那些文件。(test 属性) 转换这些文件，从而使其能够被添加到依赖图中（并且最终添加到 bundle 中）(use 属性) 在刚刚上面那个例子的基础上我们要用sass来写css，可是浏览器不能直接运行sass，要进行转换后才可以运行，这时就需要sass-loder来对sass文件转换为css文件，还要用PostCSS的插件Autoprefixer来处理css前缀 那么怎么用呢？ 要转换sass文件需要sass-loader style-loader css-loader node-sass处理前缀需要postcss-loader autoprefixer 12npm i -D sass-loader style-loader css-loader node-sass postcss-loader autoprefixer// 报错就cnpm或设置镜像或FQ 接下来在src下新建一个index.scss文件 index.scs:123456$red-color: #f00;div&#123; color: $red-color; display: flex;&#125; 然后在index.js中import scss index.js:123456789import './index.scss';function component() &#123; var element = document.createElement('div'); element.innerHTML = 'hello webpack!'; return element;&#125;document.body.appendChild(component()); webpack.config.js:1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162const path = require('path');module.exports = &#123; entry: './src/index.js', output: &#123; filename: 'bundle.js', path: path.resolve(__dirname, 'dist') &#125;, module: &#123; rules: [// rules新语法，有些旧语法是loaders &#123; test: /\.(scss|sass)$/, // 正则表达式匹配文件 // use用于写多个loader // loader应用有先后顺序，从后往前（从右往左）应用 // loader: 'style-loader!css-loader!sass-loder' use: [ &#123; loader: 'style-loader' // style-loader 能够注入&lt;style&gt;标签将CSS添加到DOM // https://github.com/webpack-contrib/style-loader options: &#123; sourceMap: true &#125; &#125;, &#123; loader: 'css-loader', // css-loader 能够将@import和url()的方法解析为类似import/require()的功能 // options: https://github.com/webpack-contrib/css-loader options: &#123; modules: true, sourceMap: true, importLoaders: 2, // 0 =&gt; no loaders (default); 1 =&gt; postcss-loader; 2 =&gt; postcss-loader, sass-loader // localIdentName http://www.w3cplus.com/react/css-modules-for-react.html localIdentName: '[name]__[local]-[hash:base64:5]' &#125; &#125;, &#123; loader: 'postcss-loader', // 使用autoprefixer插件自动处理理浏览器前缀 // postcss-loader https://github.com/postcss/postcss-loader#examples options: &#123; sourceMap: true, plugins: [ // autoprefixer https://github.com/postcss/autoprefixer#options require('autoprefixer')(&#123;browserslist: 'last 2 versions or &gt; 5%'&#125;) ] &#125; &#125;, &#123; loader: 'sass-loader', // 处理scss文件 // options: https://github.com/sass/node-sass options: &#123; outputStyle: 'compressed', sourceMap: true, &#125; &#125; ] &#125; ] &#125;&#125;; 接下来build一下就可以打开html看效果了 目录结构：1234567891011webpack-demo |- index.html |- package.json |- package-lock.json |- webpack.config.js |- /dist |- bundle.js |- /src |- index.js+ |- index.scss |- node_modules 但是打开网页就会发现css和js没有分离开来，而是合成在js里了，这就需要插件(Plugins)来处理了 插件(Plugins)为什么会有插件呢？插件目的在于解决 loader 无法实现的其他事。 对于上个例子如果想把css单独打包出来的话就要用到extract-text-webpack-plugin然后用html-webpack-plugin将css和js文件自动插入html文件 12345678# for webpack 3npm install --save-dev extract-text-webpack-plugin# for webpack 2npm install --save-dev extract-text-webpack-plugin@2.1.2# for webpack 1npm install --save-dev extract-text-webpack-plugin@1.0.1npm install --save-dev html-webpack-plugin 首先我们先修改html，删除之前的script标签 index.html:1234567891011&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt; &lt;meta http-equiv="X-UA-Compatible" content="ie=edge"&gt; &lt;title&gt;Document&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt; 接下来修改webpack.config.js webpack.config.js:123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869const path = require('path');const ExtractTextPlugin = require('extract-text-webpack-plugin')const HtmlWebpackPlugin = require('html-webpack-plugin');module.exports = &#123; entry: './src/index.js', output: &#123; filename: 'bundle.js', path: path.resolve(__dirname, 'dist/js') &#125;, devtool: "source-map", // 可以开启生成sourceMap module: &#123; rules: [ &#123; test: /\.(scss|sass)$/, // https://github.com/webpack-contrib/extract-text-webpack-plugin#extract use: ExtractTextPlugin.extract(&#123; fallback: 'style-loader', // 当CSS未被提取时应该使用的loader use: [ &#123; loader: 'css-loader', options: &#123; modules: true, sourceMap: true, importLoaders: 2, localIdentName: '[name]__[local]-[hash:base64:5]' &#125; &#125;, &#123; loader: 'postcss-loader', options: &#123; sourceMap: true, plugins: [ require('autoprefixer')(&#123;browserslist: 'last 2 versions or &gt; 5%'&#125;) ] &#125; &#125;, &#123; loader: 'sass-loader', options: &#123; outputStyle: 'compressed', sourceMap: true, &#125; &#125; ] &#125;) &#125; ] &#125;, plugins: [ // more options: // https://github.com/webpack-contrib/extract-text-webpack-plugin#options new ExtractTextPlugin('css/style.css'), // more options: // https://github.com/jantimon/html-webpack-plugin#configuration new HtmlWebpackPlugin(&#123; filename: 'index.html', // 生成的文件名 template: 'index.html', // html模板 inject: true, // 文件注入位置（js在body，css在head） minify: &#123; // 开启html压缩，开发环境下可以不开启压缩 removeComments: true, collapseWhitespace: true, removeAttributeQuotes: true // more options: // https://github.com/kangax/html-minifier#options-quick-reference &#125; &#125;) ]&#125;; build一下 目录结构：12345678910111213141516webpack-demo |- index.html |- package.json |- package-lock.json |- webpack.config.js |- /dist |- bundle.js+ |- bundle.js.map+ |- index.html+ |- /css+ |- style.css+ |- style.css.map |- /src |- index.js |- index.scss |- node_modules 到此为止webpack四个重要的东西已经学习完了（更详细的用法参考官方文档），当然plugin和loader可不止这么点，还有很多好用的plugin和loader我这没列出来了 总结关于webpack就暂时写到这里了，还有很多更好用功能就不详细说明了，webpack更新太快了，从我开始写这些内容到写完时就已经更新两个版本了，现在是3.8.1版本。写太多太详细没用，谁懂哪天就改的面目全非，最好还是用到的时候在学习，最好去官网学习，官方文档不仅写的详细而且用法还是最新的，百度到的很多人写的关于webpack教程的内容都过时了，用法已经大不一样了。好了吐槽就到这里了，在这上面已经用了较多的时间了。 参考资料webpack 中文文档webpack githubmore pluginsmore plugins(中)more loadersmore loaders(中)style-loadercss-loaderpostcss-loaderautoprefixersass-loadernode-sassextract-text-webpack-pluginhtml-webpack-plugin入门Webpack，看这篇就够了]]></content>
      <categories>
        <category>webpack</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[vue仿网易云音乐]]></title>
    <url>%2F2017%2F10%2F14%2Fvue%2Fvue%E4%BB%BF%E7%BD%91%E6%98%93%E4%BA%91%E9%9F%B3%E4%B9%90%2F</url>
    <content type="text"><![CDATA[简介本项目是一个从零开始学习vue的练手项目，用了vue全家桶（vue+vue-router+vuex） 想在学习vue时配合实践，做的是一个仿照网易云音乐（andriod）app的spa，用了网易云音乐的api，可以进行登录（只能用手机号进行登录），可以播放歌单里的歌等，只完成了播放器最基本的功能 感受对于这个项目前前后后用了20天左右才完成，比想象的时间要多，因为从零接触要学习的也比较多，先是看了一遍vue的教程，接着是学习webpack和插件的用法，接下来才是正式开始写，在这之中真是遇到了许多大大小小的问题，由于身边没有可以请教的人，解决问题起来可是麻烦了，只能靠自己上网寻求解决方案和一些自己想当然得做法，对于有些逻辑没有用到最优的解决方案，会产生这些问题都是因为自己的经验不足造成的 虽然做的内容并不多但我从之中学到了许多的知识，除了对vue的基本用法和概念，还有html5的audio标签的使用和localStorage的使用和跨域的知识，对spa也有了基本的认识，以后有时间将会对以上知识进行整理写成文章 在线预览建议用手机的chrome浏览器进行预览（未做浏览器之间的兼容）由于云主机的带宽小，所有加载会比较慢 http://123.207.98.119 界面预览登录 歌单 播放 改变进度 切换歌曲 中、英歌词 参考资料vue教程vue-router教程vuex教程网易云音乐的apilocalStorage APIaudio标签audio事件audio APIaxios 中文说明History 模式下的静态服务器HTTP访问控制（CORS）IFmiss/vue-music]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>vue</tag>
        <tag>audio</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[网页抓取分析服务系列]]></title>
    <url>%2F2017%2F08%2F16%2Fife2017%2F%E7%BD%91%E9%A1%B5%E6%8A%93%E5%8F%96%E5%88%86%E6%9E%90%E6%9C%8D%E5%8A%A1%E7%B3%BB%E5%88%97%2F</url>
    <content type="text"><![CDATA[网页抓取分析服务系列之一（基础分析）题目地址 任务描述 编写一个task.js脚本，参考官网的includeJs方法，实现根据传入的参数（关键字），抓取百度第一页对应该关键字的搜索结果。 将结果输出为json string回显。 回显的格式为 1234567891011121314&#123; code: 1, //返回状态码，1为成功，0为失败 msg: &apos;抓取成功&apos;, //返回的信息 word: &apos;示例关键字&apos;, //抓取的关键字 time: 2000, //任务的时间 dataList:[ //抓取结果列表 &#123; title: &apos;&apos;, //结果条目的标题 info: &apos;&apos;, //摘要 link: &apos;&apos;, //链接 pic: &apos;&apos; //缩略图地址 &#125; ]&#125; source 距离上一次的发文已经距离三个月了，学校的事情比较多就一直没时间继续刷ife的题（感觉是因为懒），现在放假在家有时间学习想学的了好了不废话了，这一次的学习内容貌似是学习用phantomjs来进行网页抓取分析服务phantomjs是一个基于QTwebkit的没有UI界面的无头浏览器，具体是什么百度一下就有很多内容了，我就不说了关于使用方法和api我也不说了看官方文档就行底下有我要说的是遇到的坑： 1.不能用es6的语法。一开始我用es6的语法去写结果运行就会假死，也没有任何提示，一下子就不知道是什么原因造成的，最后对比别人写的去找原因才发现是不能用es6的语法，个人认为是QTwebkit2.2不支持es6的语法 2.在page.includeJs()方法时phantom.exit()要放在page.includeJs()的回调函数之中。这问题我也找了很久，直到看到了阮一峰的的博客才发现，啊。。page.includeJs()的回调函数是异步的啊，如果写在page.open()中就会导致外部脚本还未加载就提前退出程序了 3.在page.evaluate()无法访问phantom的对象（也就是回调函数无法访问外层的变量）也许是因为page.evaluate()是在在沙箱中执行,所有无法访问phantom的对象，但可以通过传递多个参数进行访问 网页抓取分析服务系列之二（设备模拟）题目地址 任务描述 观察chrome开发者工具中device toolbar，切换到不同的device，查看浏览器BOM数据有何变化 把device toolbar中不同的device名对应的ua和尺寸信息记录下来，保存为配置文件 在任务1的基础上，增加一个参数，表示device信息，taskjs中，解析该参数并从配置文件找到对应的ua和尺寸，完成设置后再抓取 在结果中也增加一个device字段保存传入的设备名 source 这题在上一题的基础上增加了设备模拟功能，唯一的麻烦在于不同分辨率的设备要获取的内容的类名不一样，这时只需要给每个设备增加一个字段进行区别，然后根据不同的类名获取内容即可 网页抓取分析服务系列之三（服务封装）题目地址 任务描述 安装nodejs和mongodb 利用nodejs的HTTP模块封装一个node服务，监听8000端口，接受一个参数（关键字），http模块示例参考如下： 12345678var http = require("http");http.createServer(function(request, response) &#123; console.log('request received'); response.writeHead(200, &#123;"Content-Type": "text/plain"&#125;); response.write("Hello World"); response.end();&#125;).listen(8000);console.log('server started'); 收到请求后，启动phantomjs进程执行taskjs，并将接受到的参数传递给phantomjs phantomjs执行完后告诉node服务，并传回抓取的json结果 node服务将结果存到mongodb中（使用mogoose） source 在这题中又多用到了两个软件，一个是nodejs，另一个是mongoDB nodejs 下载mongoDB 下载 这两个软件安装都不难，nodejs装完就可以用了，mongoDB装完后还需要配置数据库路径，记得将这两个软件添加到环境变量中 mongoDB安装MongoDB服务器命令提示符下运行：1.前期的安装不会生成数据目录，需要自己创建，选区一个磁盘创建路径X:\data\db（X代表盘符）2.运行cmd执行 mongod --dbpath x:\data\db（前提你已经将mongoDB的bin目录添加至环境变量中）执行成功会输出一大堆日志信息3.保持之前的cmd窗口，再打开一个cmd窗口来运行mongo，这样就可以进行数据库的操作了 由于每次运行都要重复2、3步，并且运行mongod的cmd不能退出，不然mongo就无法连接到数据库因此将mongodb服务器安装为windows服务可以解决此问题 4.新建一个日志目录X:\data\log5.必须是以管理员身份运行cmd6.mongod --logpath &quot;X:\data\log\mongodb.log&quot; --logappend --dbpath &quot;X:\data\db&quot; --serviceName &quot;MongoDB&quot; --install7.net start mongodb即可运行服务，可以访问localhost:27017来查看是否开启服务8.net stop mongodb可停止服务以后重复5、7、8步即可 注：如果操作过程中，出现服务器无法正常启动的问题，尝试删除X:\data\db里面的mongod.lock这个文件，因为在上次服务器退出异常时，这个文件会将服务器锁住 这题最大的坑是cmd中文的编码问题，当然不解决也没什么大问题，本着尽量完美的原则，我想了几个办法： 1.响应头增加charset=gbk使浏览器用gbk的编码打开网页，执行exec()的第二个参数为{encoding:’buffer’}，这样可以拿到为buffer类型的结果，然后response.write(stdout)12345678response.writeHead(200, &#123; 'Content-Type': 'application/json;charset=gbk',&#125;);...exec(cmdstr,&#123;encoding:'buffer'&#125;,(err, stdout, stderr) =&gt;&#123; ... res.write(stdout);&#125;) 但是这种方法并不理想，因为数据库存储的的还是gbk编码的中文还是会乱码，而且浏览器用gbk的编码打开网页就会造成其他utf8编码的中文会乱码 2.使用iconv-lite模块可以将gbk编码真正转化为utf8编码，iconv-lite还支持其他的编码Supported Encodings在这题中我用的就是这个方法首先安装该模块1npm install iconv-lite --save 然后exec依旧采用buffer编码方便iconv-lite转码，官方文档说decode最好为buffer类型123456const iconv = require('iconv-lite');exec(cmdstr,&#123;encoding:'buffer'&#125;,(err, stdout, stderr) =&gt;&#123; ... let utf8str = iconv.decode(stdout, 'gbk'); ...&#125;) 接下来就可以存进数据库里了 引入phantom模块，用phantom爬取数据 网页抓取分析服务系列之四（数据交互）题目地址 任务描述 开发对应的前端界面，使用技术栈不限，越简单越好。输入包含一个输入框（输入关键字），一个下拉列表（选择对应的UL），一个提交按钮。 关键字输入做不能为空的校验，输入后发起异步请求，请求上阶段的服务。 在上阶段的服务中增加一个数据二次处理功能，对于返回的结果中有缩略图片的，下载图片到本地，并确保下载后的图片能被访问。 入库后，返回信息给前端，前端展示对应的抓取结果，以表格展示，图片加载本地已下载的图片 source 预览： 这题相对于上题改动看起来貌似不多，但实现起来却有些麻烦首先我采用了MVC的设计模式，对上一个任务进行了简单的重构其次我将phantomjs改用了node的phantom模块，这样可以不用对中文转码上面都不是我想说的，我想说的是我这次最大的收获就是稍微理解了点异步编程的思想，了解了async函数和Promise的用法至于这次我遇到的坑和注意点我都在代码的注释里写有，程序猿还是靠代码说话比较靠谱 引入phantom模块，用phantom爬取数据 网页抓取分析服务系列之五（并发控制）题目地址 任务描述 在4的基础上前端增加一个输入选项（页码），表面需要抓取的页数，另外设备输入值由下拉框改为多选框。 单个用户可以选择多个设备的模拟任务，并且每个设备需要抓取多页。 服务器端根据选择的情况，生成任务待执行队列，每个phantomjs任务只执行一次抓取。同时允许nodejs调起最大5个phantomjs的进程。 前后端改为通过web socket通信，使用socket.io库，每完成一个抓取，将结果追加到页面中。同时在页面的最上方显示当前的进度（完成数/总任务数）。 任务注意事项phantomjs进程的最大5个并发需要考虑多人同时提交和任务积压的情况：即两个用户A、B同时提交了4个任务到服务端，服务端只能执行A的4个、和B的1个，等前面有执行完毕的，B的剩下的再执行。 source 简单的分析一下这题对于上题的改动，首先改为多个设备需要抓去多页内容，将前后端的通讯改为socket.io，且nodejs只能同时进行5个爬取任务（多个用户提交时最大也只进行5个爬取任务） 实现思路：首先从前端获取要查询的关键字以及选项，并把这些对象转化为一个个的任务对象方便后端爬取数据1234567891011121314151617181920212223//前端获取的对象//&#123;// keyword: 'xxx',// page: '2',// device: ['ipad','iphone5','iphone6']//&#125;//转化为//[&#123;// keyword: 'xxx',// page: '1',// device: 'ipad'//&#125;,//&#123;// keyword: 'xxx',// page: '2',// device: 'ipad'//&#125;,//&#123;// keyword: 'xxx',// page: '1',// device: 'iphone5'//&#125;,//...] 后端通过socket.io拿到数据后，接下来要对这个数组对象添加一个字段用于存储这个对象的socket（区分是哪一个客户端）12345678910io.on('connection', function (socket) &#123; socket.on('query', function (data) &#123; //insert socket item for each data to distinguish connection data = data.map(i =&gt; &#123; i.socket = socket; return i; &#125;); q.push(data); &#125;);&#125;); 拿到任务对象就可以开始爬取数据了，但是要对nodejs进行并发控制，控制并发可以引入async模块用async.mapList或async.queue控制并发，但是个人发现这两个函数有着稍微区别，在执行async.mapList的异步任务时貌似不能动态将异步任务添加进执行队列，而async.queue可以，所以这里我采用async.queue控制并发123456789101112131415161718192021//use async.queue control Concurrencyconst q = async.queue(async function (task, callback) &#123; console.log(`current concurrentNumber:$&#123;++i&#125;`); let results = await getResult(task); console.log(`current concurrentNumber:$&#123;--i&#125;`); //send html template string task.socket.emit('result', &#123; html: render('crawlerResult.html', &#123; dataList: results.dataList, num: ++n &#125;), device: results.device, keyword: results.word &#125;); callback || callback();&#125;, concurrentNumber);q.drain = function () &#123; console.log('all tasks have been processed');&#125;; 效果： ok，至此网页抓取分析服务系列完成，接下来打算去学习vue和react，以后的代码格式将采用eslint的airbnb，毕业设计打算做一个可联机的游戏，所以socket.io还要认真的去学好，好就酱 参考资料phantomjs api来自《JavaScript 标准参考教程（alpha）》，by 阮一峰nodejs v8.x apinodejs 中文文档mongodb 安装mongodb 教程mongoose 文档MongoDB 极简实践入门使用MVCasync 函数nunjucks document百度搜索URL参数bootstrap 4.0 documentasync documentsocket.io document]]></content>
      <categories>
        <category>ife</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>ife</tag>
        <tag>PhantomJS</tag>
        <tag>MongoDB</tag>
        <tag>Nodejs</tag>
        <tag>socket.io</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[色彩选择器]]></title>
    <url>%2F2017%2F05%2F13%2Fife2017%2F%E8%89%B2%E5%BD%A9%E9%80%89%E6%8B%A9%E5%99%A8%2F</url>
    <content type="text"><![CDATA[色彩选择器题目地址 任务描述 参考并实现一个色彩选择器： 组件默认一直呈显示状态 可以通过点击左侧色彩区域选择色彩，在右侧的输入框中会显示对应的色值，包括RGB和HSL值 可以通过调节右侧输入框的各数值，来查看对应的颜色 可以通过在中间的色带上点击来确定大致的颜色区域 提供设定颜色值的接口，指定具体颜色，左侧色区和右侧输入框显示对应数值 提供获取颜色值的接口，可获取色彩选择器选中的颜色值，可返回CSS color、RGB、HSL三种格式的色值 source demo 这个看似有点简单，做起来还是有点难度的首先是rgb与hsl与hsv互算的算法还有调色板的取色逻辑（我是根据点击时的坐标求得大约的hsv值然后换算为rgb或hsl。PS：这样的取色不是很精确，可以用canvas的getImageData的方法获得rgb值）以及其他各种的事件逻辑不过最耗时的是思考怎样做到面向对象的编程、模块化编程不幸的是最终我写的代码看起来依旧不怎么优雅，我想只有我能看懂吧（苦笑） 接下来讲讲rgb与hsl与hsv互算的算法 1.从RGB到HSL或HSV的转换设 (r, g, b)分别是一个颜色的红、绿和蓝坐标，它们的值是在0到1之间的实数。设max等价于r, g和b中的最大者。设min等于这些值中的最小者。要找到在HSL空间中的 (h, s, l)值，这里的h ∈ [0, 360）度是角度的色相角，而s, l ∈ [0,1]是饱和度和亮度，计算为：h的值通常规范化到位于0到360°之间。而h = 0用于max = min的（就是灰色）时候而不是留下h未定义。HSL和HSV有同样的色相定义，但是其他分量不同。HSV颜色的s和v的值定义如下： 2.从HSL到RGB的转换给定HSL空间中的 (h, s, l)值定义的一个颜色，带有h在指示色相角度的值域[0, 360）中，分别表示饱和度和亮度的s和l在值域[0, 1]中，相应在RGB空间中的 (r, g, b)三原色，带有分别对应于红色、绿色和蓝色的r, g和b也在值域[0, 1]中，它们可计算为：首先，如果s = 0，则结果的颜色是非彩色的、或灰色的。在这个特殊情况，r, g和b都等于l。注意h的值在这种情况下是未定义的。当s ≠ 0的时候，可以使用下列过程：对于每个颜色向量Color = (ColorR, ColorG, ColorB) = (r, g, b), 3.从HSV到RGB的转换类似的，给定在HSV中 (h, s, v)值定义的一个颜色，带有如上的h，和分别表示饱和度和明度的s和v变化于0到1之间，在RGB空间中对应的 (r, g, b)三原色可以计算为（R,G,B变化于0到1之间）：对于每个颜色向量 (r, g, b), 4.js代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122function rgb2hsl([r, g, b]) &#123; [r, g, b] = [].map.call([r, g, b], function(item) &#123; return item / 255; &#125;); let max = Math.max.apply(Array, [r, g, b]); let min = Math.min.apply(Array, [r, g, b]); let h, s, l = (max + min) / 2; if (max == min) &#123; h = 0; s = 0; &#125; else &#123; let m = max - min; s = l &gt; 0.5 ? m / (2 - 2 * l) : m / (2 * l); switch (max) &#123; case r: h = 60 * (g - b) / m + (g &lt; b ? 360 : 0); break; case g: h = 60 * (b - r) / m + 120; break; case b: h = 60 * (r - g) / m + 240; break; &#125; &#125; return [Math.round(h), Math.round(s * 100) / 100, Math.round(l * 100) / 100];&#125;function rgb2hsv([r, g, b]) &#123; [r, g, b] = [].map.call([r, g, b], function(item) &#123; return item / 255; &#125;); let max = Math.max.apply(Array, [r, g, b]); let min = Math.min.apply(Array, [r, g, b]); let h, s, v = max; let m = max - min; s = max == 0 ? 0 : m / max; switch (max) &#123; case min: h = 0; break; case r: h = 60 * (g - b) / m + (g &lt; b ? 360 : 0); break; case g: h = 60 * (b - r) / m + 120; break; case b: h = 60 * (r - g) / m + 240; break; &#125; return [Math.round(h), Math.round(s * 100) / 100, Math.round(v * 100) / 100];&#125;function hsl2rgb([h, s, l]) &#123; [h, s, l] = [h, s, l].map(function(item)&#123; return parseFloat(item); &#125;); let r, g, b; if (s == 0) &#123; r = g = b = l; &#125; else &#123; let q = l &lt; 0.5 ? l * (1 + s) : l + s - (l * s); let p = 2 * l - q; h /= 360; function eachColor(q, p, t) &#123; if (t &lt; 0) &#123; t += 1; &#125; else if (t &gt; 1) &#123; t -= 1; &#125; switch (true) &#123; case t &lt; (1 / 6): return p + ((q - p) * 6 * t); case (t &gt;= (1 / 6)) &amp;&amp; (t &lt; (1 / 2)): return q; case (t &gt;= (1 / 2)) &amp;&amp; (t &lt; (2 / 3)): return p + ((q - p) * 6 * (2 / 3 - t)); default: return p; &#125; &#125; r = eachColor(q, p, h + 1 / 3); g = eachColor(q, p, h); b = eachColor(q, p, h - 1 / 3); &#125; return [Math.round(r * 255), Math.round(g * 255), Math.round(b * 255)];&#125;function hsv2rgb([h, s, v]) &#123; [h, s, v] = [h, s, v].map(function(item)&#123; return parseFloat(item); &#125;); let r, g, b; h %= 360; let i = Math.floor(h / 60); let f = h / 60 - i; let p = v * (1 - s); let q = v * (1 - f * s); let t = v * (1 - (1 - f) * s); switch (i) &#123; case 0: r = v, g = t, b = p; break; case 1: r = q, g = v, b = p; break; case 2: r = p, g = v, b = t; break; case 3: r = p, g = q, b = v; break; case 4: r = t, g = p, b = v; break; case 5: r = v, g = p, b = q; break; &#125; return [Math.round(r * 255), Math.round(g * 255), Math.round(b * 255)];&#125; 参考资料wiki HSL和HSV色彩空间颜色空间RGB与HSV(HSL)的转换]]></content>
      <categories>
        <category>ife</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>ife</tag>
        <tag>RGB</tag>
        <tag>Graphics</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[canvas基础]]></title>
    <url>%2F2017%2F04%2F24%2Fcanvas%2Fcanvas%E5%9F%BA%E7%A1%80%2F</url>
    <content type="text"><![CDATA[1.canvasCanvas API（画布）是在HTML5中新增的标签用于在网页实时生成图像，并且可以操作图像内容，基本上它是一个可以用JavaScript操作的位图（bitmap）。 1.1SVG 以及VML之间的差异编辑:&lt;canvas&gt; 标记和 SVG以及 VML 之间的一个重要的不同是，&lt;canvas&gt; 有一个基于 JavaScript 的绘图 API，而 SVG 和 VML 使用一个 XML 文档来描述绘图。这两种方式在功能上是等同的，任何一种都可以用另一种来模拟。从表面上看，它们很不相同，可是，每一种都有强项和弱点。例如，SVG 绘图很容易编辑，只要从其描述中移除元素就行。要从同一图形的一个 &lt;canvas&gt; 标记中移除元素，往往需要擦掉绘图重新绘制它。 2.创建 Canvas 元素向 HTML5 页面添加 canvas 元素。规定元素的 id： 1&lt;canvas id="canvas"&gt;当前浏览器不支持canvas&lt;/canvas&gt; canvas 元素本身是没有绘图能力的。所有的绘制工作必须在 JavaScript 内部完成： 1234var canvas = document.getElementById("canvas");canvas.width = 1024;canvas.height = 768;var ctx = canvas.getContext('2d'); 当没有设置宽度和高度的时候，canvas会初始化宽度为300像素和高度为150像素。该元素可以使用CSS来定义大小，但在绘制时图像会伸缩以适应它的框架尺寸：如果CSS的尺寸与初始画布的比例不一致，它会出现扭曲。 3.基本绘制3.1 beginPath1.beginPath()开始新的绘制路径。在beginPath()之后改变的状态，不会影响到beginPath()之前定义的状态。如果某个状态一直没有改变，就会一直延续的使用下去，而不会再beginPath()之后恢复为默认。2.beginPath()的调用相当于清除之前的绘制状态（包括线条颜色，绘制点的位置等等），所以beginPath()之后的moveTo可以改为lineTo，因为调用的beginPath()，所以之前的绘制点相当于不存在。 当前浏览器不支持canvas！ var canvas1 = document.getElementById("canvas1"); canvas1.width = 320; canvas1.height = 180; var ctx = canvas1.getContext('2d'); ctx.lineWidth = 5; ctx.beginPath(); ctx.lineTo(10,10); ctx.lineTo(100,90); ctx.lineTo(10,170); ctx.strokeStyle = "red"; ctx.stroke(); ctx.beginPath(); ctx.lineTo(110,10); ctx.lineTo(200,90); ctx.lineTo(110,170); ctx.stroke(); ctx.beginPath(); ctx.lineTo(210,10); ctx.lineTo(300,90); ctx.lineTo(210,170); ctx.strokeStyle = "blue"; ctx.stroke(); 123456789101112131415161718192021ctx.lineWidth = 5;ctx.beginPath();ctx.lineTo(10,10);ctx.lineTo(100,90);ctx.lineTo(10,170);ctx.strokeStyle = "red"; // 如果某个状态一直没有改变，就会一直延续的使用下去，而不会再beginPath()之后恢复为默认ctx.stroke();ctx.beginPath();ctx.lineTo(110,10);ctx.lineTo(200,90);ctx.lineTo(110,170);ctx.stroke();ctx.beginPath();ctx.lineTo(210,10);ctx.lineTo(300,90);ctx.lineTo(210,170);ctx.strokeStyle = "blue"; // 在beginPath()之后改变的状态，不会影响到beginPath()之前定义的状态ctx.stroke(); 3.2 closePath1.closePath()会自动将未封闭的图形用一条直线连接起来2.当我们不想让图形封闭起来只需要用beginPath()就行了3.beginPath()和closePath()不一定要同时出现4.closePath()对fill()没用 当前浏览器不支持canvas！ var canvas2 = document.getElementById("canvas2"); canvas2.width = 320; canvas2.height = 180; var ctx = canvas2.getContext('2d'); ctx.lineWidth = 15; ctx.beginPath(); ctx.lineTo(30,30); ctx.lineTo(100,30); ctx.lineTo(100,150); ctx.lineTo(30,150); ctx.lineTo(30,30); ctx.strokeStyle = "red"; ctx.stroke(); ctx.beginPath(); ctx.lineTo(130,30); ctx.lineTo(200,30); ctx.lineTo(200,150); ctx.lineTo(130,150); ctx.lineTo(130,30); ctx.strokeStyle = "blue"; ctx.closePath(); ctx.stroke(); ctx.beginPath(); ctx.lineTo(230,30); ctx.lineTo(300,30); ctx.lineTo(300,150); ctx.lineTo(230,150); ctx.strokeStyle = "green"; ctx.closePath(); ctx.stroke(); 1234567891011121314151617181920212223242526272829ctx.lineWidth = 15;ctx.beginPath();ctx.lineTo(30,30);ctx.lineTo(100,30);ctx.lineTo(100,150);ctx.lineTo(30,150);ctx.lineTo(30,30);ctx.strokeStyle = "red";ctx.stroke();ctx.beginPath();ctx.lineTo(130,30);ctx.lineTo(200,30);ctx.lineTo(200,150);ctx.lineTo(130,150);ctx.lineTo(130,30);ctx.strokeStyle = "blue";ctx.closePath();ctx.stroke();ctx.beginPath();ctx.lineTo(230,30);ctx.lineTo(300,30);ctx.lineTo(300,150);ctx.lineTo(230,150);ctx.strokeStyle = "blue";ctx.closePath();ctx.stroke(); 我们看到第一个图形未写closePath()，所以线条连接处没有完全闭合第二个用了closePath()使线条连接处完全闭合因为closePath()会自动将未封闭的图形用一条直线连接起来，所以使用closePath时，最后一个连接到起始点的lineTo()是可以省略的，会自动连接到起始点 3.3 绘制直线canvas 是基于状态绘制的，即先定义状态，后绘制 当前浏览器不支持canvas！ var canvas3 = document.getElementById("canvas3"); canvas3.width = 320; canvas3.height = 180; var ctx = canvas3.getContext('2d'); ctx.beginPath(); ctx.moveTo(10,10); ctx.lineTo(310,170); ctx.lineWidth = 2; ctx.strokeStyle = "orange"; ctx.closePath(); ctx.stroke(); 1234567ctx.beginPath(); // 路径绘制开始ctx.moveTo(10,10); // 起始ctx.lineTo(310,170); // 终止ctx.lineWidth = 2; // 线宽ctx.strokeStyle = "orange"; // 颜色ctx.closePath(); // 路径绘制结束ctx.stroke(); // 线条 3.4 绘制图形当前浏览器不支持canvas！ var canvas4 = document.getElementById("canvas4"); canvas4.width = 320; canvas4.height = 180; var ctx = canvas4.getContext('2d'); ctx.beginPath(); ctx.moveTo(10,10); ctx.lineTo(310,170); ctx.lineTo(10,170); ctx.lineTo(10,10); ctx.closePath(); ctx.lineWidth = 5; ctx.strokeStyle = "red"; ctx.stroke(); ctx.fillStyle = "green"; ctx.fill(); 123456789101112ctx.beginPath(); // 路径绘制开始ctx.moveTo(100,100); // 起始ctx.lineTo(700,700); // 终止ctx.lineTo(100,700); // 终止ctx.closePath(); // 路径绘制结束ctx.lineWidth = 5; // 线宽ctx.strokeStyle = "orange"; // 线条颜色ctx.stroke(); // 绘制线条ctx.fillStyle = "green"; // 填充颜色ctx.fill(); // 填充 3.5 绘制弧3.5.1 arc()context.arc( centerx,centery,radius, startingAngle,endingAngle, anticlockwise = false);centerx:原点x坐标centery:原点y坐标radius:半径startingAngle:起始弧度(固定位置)endingAngle:结束弧度(固定位置)anticlockwise:绘制方向(默认false 顺时针) 当前浏览器不支持canvas！ var canvas5 = document.getElementById("canvas5"); canvas5.width = 640; canvas5.height = 180; var ctx = canvas5.getContext('2d'); ctx.beginPath(); ctx.arc(80,90,50,0,1.5*Math.PI); ctx.lineWidth = 5; ctx.strokeStyle = "red"; ctx.closePath(); ctx.stroke(); ctx.beginPath(); ctx.arc(240,90,50,0,1.5*Math.PI,true); ctx.lineWidth = 5; ctx.strokeStyle = "blue"; ctx.stroke(); ctx.beginPath(); ctx.arc(400,90,50,0,1.5*Math.PI); ctx.fillStyle = "yellow"; ctx.closePath(); ctx.fill(); ctx.beginPath(); ctx.arc(560,90,50,0,1.5*Math.PI); ctx.fillStyle = "yellow"; ctx.fill(); 12345678910111213141516171819202122232425ctx.beginPath();ctx.arc(80,90,50,0,1.5*Math.PI); // 顺时针ctx.lineWidth = 5;ctx.strokeStyle = "red";ctx.closePath();ctx.stroke();ctx.beginPath();ctx.arc(240,90,50,0,1.5*Math.PI,true); // 逆时针ctx.lineWidth = 5;ctx.strokeStyle = "blue";ctx.stroke();//closePath()对fill()没用ctx.beginPath();ctx.arc(400,90,50,0,1.5*Math.PI); // 顺时针ctx.fillStyle = "yellow";ctx.closePath();ctx.fill();ctx.beginPath();ctx.arc(560,90,50,0,1.5*Math.PI); // 顺时针ctx.fillStyle = "yellow";ctx.fill(); 3.5.2 arcTo()context.arcTo( x1 , y1 , x2 , y2 ,radius );绘制起点是( x0, y0 )，但是( x0, y0 )不一定是切点，arcTo 方法在( x0, y0 )( x1, y1 )和( x1, y1 )( x2, y2 )两条线段上寻找切点，绘制圆弧（圆弧终止于( x1, y1 )( x2, y2 )这条线段的切点），而且，( x2, y2 )不一定是所绘制圆弧的终点，只是作为辅助线的结束位置，其中( x0, y0 )是上一个点的位置。 3.5.3 二次贝塞尔曲线quadraticCurveTo()context.moveTo( x0 , y0 );context.quadraticCurveTo( x1, y1, x2, y2 ); (x0,y0)起始点(x1,y1)控制点(x2,y2)终止点圆弧起于起始点，终于终止点，与起始点、终止点与控制点的连线相切参考以下demo便于理解quadraticCurveTo demo 3.5.4 三次贝塞尔曲线bezierCurveTo()context.moveTo( x0 , y0 );context.bezierCurveTo( x1, y1, x2, y2, x3, y3 ); (x0,y0)起始点(x1,y1)控制点1(x1,y1)控制点2(x3,y3)终止点 三次贝塞尔曲线比二次贝塞尔曲线多了一个控制点，所有更加灵活参考以下demo便于理解bezierCurveTo demoquadraticCurveTo or bezierCurveTo 3.6 绘制矩形ctx.rect(x,y,width,,height); // 绘制矩形路径ctx.fillRect(x,y,width,height); // 绘制填充矩形ctx.strokeRect(x,y,width,height); // 绘制边框矩形 当前浏览器不支持canvas！ var canvas6 = document.getElementById("canvas6"); canvas6.width = 320; canvas6.height = 180; var ctx = canvas6.getContext('2d'); ctx.beginPath(); ctx.rect(20,20,80,140); ctx.stroke(); ctx.beginPath(); ctx.fillRect(120,20,80,140); ctx.beginPath(); ctx.strokeRect(220,20,80,140); 123456789ctx.beginPath();ctx.rect(20,20,80,140);ctx.stroke();ctx.beginPath();ctx.fillRect(120,20,80,140);ctx.beginPath();ctx.strokeRect(220,20,80,140); 3.7 绘制文字3.7.1 fontctx.font = font-style font-variant font-weight font-size font-family font-style: normal ( Default ), italic ( 斜体字 ), oblique ( 倾斜字体 ) font-variant: normal ( Default ), small-caps (应用于小写字母，显示小型的大写字母) font-weight: lighter, normal ( Default ), bold, bolder,100 , 200 , 300 , 400 (normal) ,500 , 600 , 700 (bold) ,800 , 900 font-size: 20px ( Default ), 2em, 150%,xx-small, x-small,medium, large,x-large, xx-large font-family: 设置多种字体备选, 支持 @font-face, Web安全字体 3.7.2 textAlignctx.textAlign = left, center, right 3.7.3 textBaselinectx.textBaseline = top, middle, bottom,alphabetic (Default), ideographic, hanging后面三个分别表示拉丁文的垂直方向基准线、日语中文等方块字的垂直方向基准线、印度文的垂直方向基准线 3.7.4 fillText()ctx.fillText( string , x , y , [maxlen] );string:需要显示的文字x,y:位置maxlen:文字渲染的最大宽度 3.7.5 strokeText()ctx.strokeText( string , x , y , [maxlen] );同上 3.7.6 measureText().width文本的度量ctx.measureText( string ).width 3.7.7 demo当前浏览器不支持canvas！ var canvas7 = document.getElementById("canvas7"); canvas7.width = 640; canvas7.height = 360; var ctx = canvas7.getContext('2d'); ctx.fillStyle = "#f00"; ctx.font = "30px bold Arial"; ctx.fillText("CANVAS!",30,30); var w = ctx.measureText("CANVAS!").width; ctx.fillText("以上字符宽度为" + w + "px",30,60); ctx.strokeText("CANVAS!",30,90,100); ctx.textAlign = "left"; ctx.fillText("textAlign:left",320,120); ctx.textAlign = "center"; ctx.fillText("textAlign:center",320,150); ctx.textAlign = "right"; ctx.fillText("textAlign:right",320,180); ctx.strokeStyle = "#bbb"; ctx.moveTo(320,90); ctx.lineTo(320,180); ctx.stroke(); ctx.textAlign = "center"; ctx.textBaseline = "top"; ctx.fillText("你好！textBaseline:top",320,210); ctx.moveTo(0,210); ctx.lineTo(640,210); ctx.stroke(); ctx.textBaseline = "middle"; ctx.fillText("你好！textBaseline:middle",320,270); ctx.moveTo(0,270); ctx.lineTo(640,270); ctx.stroke(); ctx.textBaseline = "bottom"; ctx.fillText("你好！textBaseline:bottom",320,330); ctx.moveTo(0,330); ctx.lineTo(640,330); ctx.stroke(); 123456789101112131415161718192021222324252627282930313233343536373839404142ctx.fillStyle = "#f00";ctx.font = "30px bold Arial";ctx.fillText("CANVAS!",30,30);var w = ctx.measureText("CANVAS!").width;ctx.fillText("以上字符宽度为" + w + "px",30,60);ctx.strokeText("CANVAS!",30,90,100);ctx.textAlign = "left";ctx.fillText("textAlign:left",320,120);ctx.textAlign = "center";ctx.fillText("textAlign:center",320,150);ctx.textAlign = "right";ctx.fillText("textAlign:right",320,180);// 辅助线ctx.strokeStyle = "#bbb";ctx.moveTo(320,90);ctx.lineTo(320,180);ctx.stroke();ctx.textAlign = "center";ctx.textBaseline = "top";ctx.fillText("你好！textBaseline:top",320,210);ctx.moveTo(0,210);ctx.lineTo(640,210);ctx.stroke();ctx.textBaseline = "middle";ctx.fillText("你好！textBaseline:middle",320,270);ctx.moveTo(0,270);ctx.lineTo(640,270);ctx.stroke();ctx.textBaseline = "bottom";ctx.fillText("你好！textBaseline:bottom",320,330);ctx.moveTo(0,330);ctx.lineTo(640,330);ctx.stroke(); 4.样式4.1 lineCaplineCap = “butt”(defalut)|”round”|”square” 标准型，圆形，方形lineCap只在线段的两端处有作用，在线段的连接处没用 当前浏览器不支持canvas！ var canvas8 = document.getElementById("canvas8"); canvas8.width = 320; canvas8.height = 180; var ctx = canvas8.getContext('2d'); ctx.lineWidth = 25; ctx.strokeStyle = "rgba(255,0,0,.5)"; ctx.beginPath(); ctx.moveTo(20,30); ctx.lineTo(300,30); ctx.lineCap = "butt"; ctx.stroke(); ctx.beginPath(); ctx.moveTo(20,90); ctx.lineTo(300,90); ctx.lineCap = "round"; ctx.stroke(); ctx.beginPath(); ctx.moveTo(20,150); ctx.lineTo(300,150); ctx.lineCap = "square"; ctx.stroke(); ctx.beginPath(); ctx.lineWidth = 1; ctx.moveTo(20,10); ctx.lineTo(20,170); ctx.moveTo(300,10); ctx.lineTo(300,170); ctx.stroke(); 1234567891011121314151617181920212223242526272829303132ctx.lineWidth = 25;ctx.strokeStyle = "rgba(255,0,0,.5)";// butt(defalut)ctx.beginPath();ctx.moveTo(20,30);ctx.lineTo(300,30);ctx.lineCap = "butt";ctx.stroke();// roundctx.beginPath();ctx.moveTo(20,90);ctx.lineTo(300,90);ctx.lineCap = "round";ctx.stroke();// squarectx.beginPath();ctx.moveTo(20,150);ctx.lineTo(300,150);ctx.lineCap = "square";ctx.stroke();// 基线ctx.beginPath();ctx.lineWidth = 1;ctx.moveTo(20,10);ctx.lineTo(20,170);ctx.moveTo(300,10);ctx.lineTo(300,170);ctx.stroke(); 4.2 lineJoinlineJoin是线条相交时呈现出来的效果lineJoin = “miter”(defalut)|”bevel”|”round” 当前浏览器不支持canvas！ var canvas9 = document.getElementById("canvas9"); canvas9.width = 320; canvas9.height = 180; var ctx = canvas9.getContext('2d'); ctx.lineWidth = 10; ctx.beginPath(); ctx.moveTo(10,20); ctx.lineTo(50,160); ctx.lineTo(90,20); ctx.lineJoin = "miter"; ctx.stroke(); ctx.beginPath(); ctx.moveTo(110,20); ctx.lineTo(150,160); ctx.lineTo(190,20); ctx.lineJoin = "bevel"; ctx.stroke(); ctx.beginPath(); ctx.moveTo(210,20); ctx.lineTo(250,160); ctx.lineTo(290,20); ctx.lineJoin = "round"; ctx.stroke(); 12345678910111213141516171819202122ctx.lineWidth = 10;ctx.beginPath();ctx.moveTo(10,20);ctx.lineTo(50,160);ctx.lineTo(90,20);ctx.lineJoin = "miter";ctx.stroke();ctx.beginPath();ctx.moveTo(110,20);ctx.lineTo(150,160);ctx.lineTo(190,20);ctx.lineJoin = "bevel";ctx.stroke();ctx.beginPath();ctx.moveTo(210,20);ctx.lineTo(250,160);ctx.lineTo(290,20);ctx.lineJoin = "round";ctx.stroke(); miterLimitmiterLimit = 10(默认值);//只有当linejoin的值为miter时才有效，值越大，允许角度越尖锐 当前浏览器不支持canvas！ var canvas10 = document.getElementById("canvas10"); canvas10.width = 320; canvas10.height = 180; var ctx = canvas10.getContext('2d'); ctx.lineWidth = 10; ctx.beginPath(); ctx.moveTo(10,30); ctx.lineTo(250,50); ctx.lineTo(10,70); ctx.lineJoin = "miter"; ctx.stroke(); ctx.beginPath(); ctx.moveTo(10,120); ctx.lineTo(250,140); ctx.lineTo(10,160); ctx.lineJoin = "miter"; ctx.miterLimit = 30; ctx.stroke(); 12345678910111213141516ctx.lineWidth = 10;ctx.beginPath();ctx.moveTo(10,30);ctx.lineTo(250,50);ctx.lineTo(10,70);ctx.lineJoin = "miter";ctx.stroke();ctx.beginPath();ctx.moveTo(10,120);ctx.lineTo(250,140);ctx.lineTo(10,160);ctx.lineJoin = "miter";ctx.miterLimit = 30;ctx.stroke(); 4.3 图形变换位移 translate( x , y )x 是左右偏移量，y 是上下偏移量 旋转 rotate( rot )rot = deg/180*Math.PI它是顺时针方向的，以弧度为单位的值 缩放 scale( sx , sy )sx,sy 分别是横轴和纵轴的缩放因子，它们都必须是正值注：变换是叠加的 变形 setTransform(m11, m12, m21, m22, dx, dy)类似css matirxsetTransform可忽略之前的变换（translate、rotate、scale）m11：水平方向的缩放(1)m12：水平方向的倾斜(0)m21：竖直方向的倾斜(0)m22：竖直方向的缩放(1)dx：水平方向的移动(0)dy：竖直方向的移动(0) 可以用save()和restore()储存、还原canvas环境类似css transform 属性应用先后不同，效果不同 当前浏览器不支持canvas！ var canvas11 = document.getElementById("canvas11"); canvas11.width = 320; canvas11.height = 180; var ctx = canvas11.getContext('2d'); ctx.save(); ctx.fillStyle = "red"; ctx.translate(20,20); ctx.fillRect(0,0,100,100); ctx.fillStyle = "green"; ctx.translate(40,40); ctx.fillRect(0,0,100,100); ctx.restore(); ctx.save(); ctx.fillStyle = "red"; ctx.translate(180,20); ctx.fillRect(0,0,100,100); ctx.restore(); ctx.save(); ctx.fillStyle = "green"; ctx.translate(200,40); ctx.fillRect(0,0,100,100); ctx.restore(); 1234567891011121314151617181920212223// 第一个环境ctx.save();ctx.fillStyle = "red";ctx.translate(20,20);ctx.fillRect(0,0,100,100);ctx.fillStyle = "green";ctx.translate(40,40);ctx.fillRect(0,0,100,100);ctx.restore();// 第二个环境ctx.save();ctx.fillStyle = "red";ctx.translate(180,20);ctx.fillRect(0,0,100,100);ctx.restore();// 第三个环境ctx.save();ctx.fillStyle = "green";ctx.translate(200,40);ctx.fillRect(0,0,100,100);ctx.restore(); 4.4 渐变4.4.1 线性渐变 createLinearGradient()createLinearGradient( x1 , y1, x2 , y2 );渐变的起点 (x1,y1) 与终点 (x2,y2) 当前浏览器不支持canvas！ var canvas12 = document.getElementById("canvas12"); canvas12.width = 320; canvas12.height = 180; var ctx = canvas12.getContext('2d'); var grd = ctx.createLinearGradient(0,0,320,180); grd.addColorStop(0.0,"red"); grd.addColorStop(0.25,"green"); grd.addColorStop(0.5,"blue"); grd.addColorStop(0.75,"white"); grd.addColorStop(1.0,"black"); ctx.fillStyle = grd; ctx.fillRect(0,0,320,180); 12345678var grd = ctx.createLinearGradient(0,0,320,180);grd.addColorStop(0.0,"red");grd.addColorStop(0.25,"green");grd.addColorStop(0.5,"blue");grd.addColorStop(0.75,"white");grd.addColorStop(1.0,"black");ctx.fillStyle = grd;ctx.fillRect(0,0,320,180); 4.4.2 径向渐变 createRadialGradient()createRadialGradient(x1, y1, r1, x2, y2, r2)前三个定义一个以 (x1,y1) 为原点，半径为 r1 的圆，后三个参数则定义另一个以 (x2,y2) 为原点，半径为 r2 的圆 当前浏览器不支持canvas！ var canvas13 = document.getElementById("canvas13"); canvas13.width = 320; canvas13.height = 180; var ctx = canvas13.getContext('2d'); var grd = ctx.createRadialGradient(160,90,0,160,90,160); grd.addColorStop(0.0,"black"); grd.addColorStop(0.25,"red"); grd.addColorStop(0.5,"yellow"); grd.addColorStop(0.75,"blue"); grd.addColorStop(1.0,"white"); ctx.fillStyle = grd; ctx.fillRect(0,0,320,180); 12345678var grd = ctx.createRadialGradient(160,90,0,160,90,160);grd.addColorStop(0.0,"black");grd.addColorStop(0.25,"red");grd.addColorStop(0.5,"yellow");grd.addColorStop(0.75,"blue");grd.addColorStop(1.0,"white");ctx.fillStyle = grd;ctx.fillRect(0,0,320,180); 4.5 图案样式createPattern(img/canvas/video, repeat-style)repeat-style:no-repeat 不重复repeat-x：X轴方向重复repeat-y：Y轴方向重复repeat：X，Y轴方向都重复 当前浏览器不支持canvas！ var canvas14 = document.getElementById("canvas14"); canvas14.width = 320; canvas14.height = 180; var ctx = canvas14.getContext('2d'); var img = new Image(); img.src = "/images/avatar.png"; img.onload = function(){ var ptrn = ctx.createPattern(img,'no-repeat'); ctx.fillStyle = ptrn; ctx.fillRect(0,0,320,180); }; 1234567var img = new Image(); img.src = "/images/avatar.png"; img.onload = function()&#123; var ptrn = ctx.createPattern(img,'no-repeat'); ctx.fillStyle = ptrn; ctx.fillRect(0,0,320,180); &#125;; 4.6 阴影ctx.shadowColor // 阴影颜色ctx.shadowOffsetX // X偏移值ctx.shadowOffsetY // Y偏移值ctx.shadowBlur // 模糊度 当前浏览器不支持canvas！ var canvas15 = document.getElementById("canvas15"); canvas15.width = 320; canvas15.height = 180; var ctx = canvas15.getContext('2d'); ctx.shadowColor = "#bbb"; ctx.shadowOffsetX = 10; ctx.shadowOffsetY = 10; ctx.shadowBlur = 5; ctx.fillRect(30,30,100,120); ctx.shadowOffsetX = -5; ctx.shadowOffsetY = -5; ctx.shadowBlur = 10; ctx.fillRect(190,30,100,120); 12345678910ctx.shadowColor = "#bbb";ctx.shadowOffsetX = 10;ctx.shadowOffsetY = 10;ctx.shadowBlur = 5;ctx.fillRect(30,30,100,120);ctx.shadowOffsetX = -5;ctx.shadowOffsetY = -5;ctx.shadowBlur = 10;ctx.fillRect(190,30,100,120); 4.7 globalAlpha（透明度）ctx.globalAlpha = 1; (Default) 4.8 globalCompositeOperation（图形重叠效果）图片来自MDN 当前浏览器不支持canvas！ source-over source-in source-out source-atop destination-over destination-in destination-out destination-atop lighter copy xor window.onload = function () { var a = document.getElementById('canvas16-composition').getElementsByTagName('a'); for (let i = 0; i < a.length; i++) { a[i].addEventListener("click",function () { drawComposition(this.text); return false; }); } drawComposition("source-over"); } function drawComposition(composition) { var canvas16 = document.getElementById('canvas16'); canvas16.width = 1024; canvas16.height = 400; var ctx = canvas16.getContext('2d'); ctx.clearRect(0, 0, canvas16.width, canvas16.height); ctx.save(); ctx.font = "30px bold Arial"; ctx.textAlign = "center"; ctx.textBaseline = "middle"; ctx.fillStyle = "#058"; ctx.fillText("globalCompositionOperation:" + composition, canvas16.width/2, 20); ctx.restore(); ctx.beginPath(); ctx.moveTo(0, 50); ctx.lineTo(canvas16.width, 50); ctx.lineTo(canvas16.width, canvas16.height); ctx.lineTo(0, canvas16.height); ctx.closePath(); ctx.clip(); ctx.fillStyle = "blue"; ctx.fillRect(500, 175, 200, 200); ctx.globalCompositeOperation = composition; ctx.beginPath(); ctx.moveTo(500, 100); ctx.lineTo(350, 250); ctx.lineTo(650, 250); ctx.closePath(); ctx.fillStyle = "red"; ctx.fill(); } 4.9 clip() 剪切区域使用 clip() 方法来创建一个新的裁切路径。默认情况下，canvas 有一个与它自身一样大的裁切路径（也就是没有裁切效果）它的作用是遮罩，用来隐藏不需要的部分然后将上面路径剪切作为当前绘制环境 当前浏览器不支持canvas！ var canvas17 = document.getElementById("canvas17"); canvas17.width = 320; canvas17.height = 320; var ctx = canvas17.getContext('2d'); ctx.beginPath(); ctx.fillStyle = "#000"; ctx.fillRect(0,0,canvas17.width,canvas17.height); ctx.beginPath(); ctx.arc(canvas17.width/2,canvas17.height/2,canvas17.height/2,0,2*Math.PI); var grd = ctx.createLinearGradient(canvas17.width/2,0,canvas17.width/2,canvas17.height*2); grd.addColorStop(0.0,"#058"); grd.addColorStop(1.0,"#fff"); ctx.fillStyle = grd; ctx.fill(); ctx.clip(); for (let i=0;i]]></content>
      <categories>
        <category>canvas</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>canvas</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSS3实现3D轮播图]]></title>
    <url>%2F2017%2F04%2F22%2Fife2017%2FCSS3%E5%AE%9E%E7%8E%B03D%E8%BD%AE%E6%92%AD%E5%9B%BE%2F</url>
    <content type="text"><![CDATA[CSS3实现3D轮播图题目地址 任务描述 实现图示效果点击查看 只需要完成HTML，CSS代码编写，需要写一点JavaScript 需要有一定的数学计算 可以尝试不同的逻辑处理：如点击切换，滑动切换等等 示例图仅为参考，不需要完全实现一致，其中的图片、文案均可自行设定 尽可能多地尝试不同的、更多的样式设定来实践各种CSS属性 HTML 及 CSS 代码结构清晰、规范 source demo 要完成这题需要两个css3属性：1.transform-style: preserve-3d;2.perspective;下面有两个参考资料写的很详细，只要能认真看完，这题就没什么难度了我讲一下我做题遇到的坑那就是transfrom属性的translate、rotate、scale、skew执行起来貌似是有顺序transform:translateX(100px) scale(2)与transform:scale(2) translateX(100px)效果不一样我在写这题的时候给每个img是这么赋值的transform: translateZ(500px) rotateY(N*60deg);结果img除了变大点跟transform: rotateY(60deg);没区别（前提父元素有perspective，且没有overflow:hidden）个人认为简单来说原因是坐标轴变换了（详细参考参考资料）transform: translateZ(500px) rotateY(60deg);先向屏幕方向（Z轴）移动了500px在旋转transform: rotateY(60deg)translateZ(500px);先旋转，在向旋转过的方向向Z轴移动了500px所以效果会不一样总之简单点说就是transform属性的书写顺序会影响最终的变换效果切记切记 记一个元素大小与perspective（px）和translateZ（px）的放大关系：元素的初始宽为X,初始高为Y放大后的X=X*(1+translateZ/(perspective-translateZ))X与Y可互换可以看得出perspective趋于无穷大或translateZ趋于0 3d效果越不明显 参考资料好吧，CSS3 3D transform变换，不过如此！Transform-style和Perspective属性decomposing css 2d transform matrix into simple transformations]]></content>
      <categories>
        <category>ife</category>
      </categories>
      <tags>
        <tag>css</tag>
        <tag>ife</tag>
        <tag>css3d</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSS3饼状loading效果]]></title>
    <url>%2F2017%2F04%2F21%2Fife2017%2FCSS3%E9%A5%BC%E7%8A%B6loading%E6%95%88%E6%9E%9C%2F</url>
    <content type="text"><![CDATA[CSS3饼状loading效果题目地址 任务描述 实现图示效果。点击查看 需要使用HTML和CSS实现半圆和四分之三圆环 longding动画页面上下左右剧中 所有的动画元素采用HTML和CSS实现 source demo 这玩意比想象中的有难度啊至于原理还是看看代码吧（不会作图(┬＿┬)）css画图能力LEVEL+1！！ 参考资料CSS3实现鸡蛋饼饼状图loading等待转转转CSS Loading]]></content>
      <categories>
        <category>ife</category>
      </categories>
      <tags>
        <tag>css</tag>
        <tag>ife</tag>
        <tag>loading</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[正则表达式之入门]]></title>
    <url>%2F2017%2F04%2F20%2Fife2017%2F%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E4%B9%8B%E5%85%A5%E9%97%A8%2F</url>
    <content type="text"><![CDATA[正则表达式之入门题目地址 任务描述 编写一个判断给定数字是否为手机号码的正则表达式，测试用例参照但不限于： 12318812011232 // 测试结果应该为 true18812312 // false12345678909 // false 编写一个判断输入的字符串是否有相邻重复单词的正则表达式，测试用例可以参考但不限于： 123foo foo bar // truefoo bar foo // false 有重复单词但是不相邻foo barbar bar // false source demo 手机号码正则表达式：\^1[3|4|5|7|8]\d{9}$\相邻重复单词的正则表达式：\(\b[A-Za-z]+)\s+\1\ (不带连字符)/((?:[^|\s])([A-Za-z]+[A-Za-z-]))\s+\1(?=[$|\s])/(带连字符，有BUG)由于JavaScript不支持后顾，有点难目前还不知道怎么写 参考资料MDN Regular Expressions正则表达式30分钟入门教程正则表达式可视化]]></content>
      <categories>
        <category>ife</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>ife</tag>
        <tag>正则表达式</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用CSS实现折叠面板]]></title>
    <url>%2F2017%2F04%2F19%2Fife2017%2F%E4%BD%BF%E7%94%A8CSS%E5%AE%9E%E7%8E%B0%E6%8A%98%E5%8F%A0%E9%9D%A2%E6%9D%BF%2F</url>
    <content type="text"><![CDATA[使用CSS实现折叠面板题目地址 任务描述 深入理解html中radio的特性 深入理解CSS选择器以及伪元素的使用 使用input的radio单选框特性结合CSS中的伪元素实现bootstrap中折叠面板点击查看样例，要求样式一致。 当其中一个面对折叠时，其他面板需要隐藏 只能使用HTML，CSS，不允许使用JavaScript 注意测试不同情况，尤其是极端情况下的效果 有能力的同学在面板折叠或者展开时添加动画效果* source demo 讲真这题怎么写一开始真的没有头绪，但仔细阅读题目会发现深入理解html中radio的特性和底下参考资料MDN label现在马上就知道怎么写了，有木有；就像自定义radio的那题一样，无非就是radio+label、checkbox+label配合:checked伪类选择器的应用感觉写css就要脑洞大开,信我:checked+label能实现很多效果 参考资料MDN labelMDN Adjacent sibling selectors]]></content>
      <categories>
        <category>ife</category>
      </categories>
      <tags>
        <tag>css</tag>
        <tag>ife</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[自定义网页右键菜单]]></title>
    <url>%2F2017%2F04%2F18%2Fife2017%2F%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BD%91%E9%A1%B5%E5%8F%B3%E9%94%AE%E8%8F%9C%E5%8D%95%2F</url>
    <content type="text"><![CDATA[自定义网页右键菜单题目地址 任务描述 实现鼠标右击时，出现自定义菜单。点击非自定义菜单区域时，隐藏自定义菜单。 点击自定义菜单条目时，弹出菜单条目名称。 自定义菜单出现在鼠标指针右下方，当右边区域不够大，展示在左下方，同理，当下方区域不够时，展示在鼠标指针上方 注意测试不同情况，尤其是极端情况下的效果 source demo Event.page[X|Y]; //鼠标相对页面(html)的位置Event.client[X|Y] //鼠标相对可视区的位置Element.offset[Width|Height] //元素的宽高（包括边框）document.documentElement（html).client[Width|Height] //窗口（html）可视宽高window.inner[Width|Height] //窗口可视宽高 参考资料oncontextmenu事件event那些事]]></content>
      <categories>
        <category>ife</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>ife</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[自定义checkbox、radio样式]]></title>
    <url>%2F2017%2F04%2F17%2Fife2017%2F%E8%87%AA%E5%AE%9A%E4%B9%89checkbox%E3%80%81radio%E6%A0%B7%E5%BC%8F%2F</url>
    <content type="text"><![CDATA[自定义checkbox、radio样式题目地址 任务描述 深入了解html label标签 了解CSS边框、背景、伪元素、伪类（注意和伪元素区分）等属性的设置 了解CSS中常见的雪碧图，并能自己制作使用雪碧图 source demo 1234567891011121314&lt;style type="text/css"&gt; #chkbox&#123; display: none; &#125; #chkbox+label&#123; //style &#125; #chkbox:checked+label&#123; //checked style &#125;&lt;/style&gt;&lt;input type="checkbox" id="chkbox"&gt;&lt;label for="chkbox"&gt;&lt;/label&gt; 使input为nonefor属性关联input设计label的样式 css3优点：减少http请求数据提高网络性能缺点：代码量大，编写复杂，复杂图形没办法（可引入Font Awesome缓解，其他fonticon也行）sprite优点：可使用任何图标缺点：请求数据量较大，放大会模糊，调整位置麻烦 具体效果看demo！]]></content>
      <categories>
        <category>ife</category>
      </categories>
      <tags>
        <tag>css</tag>
        <tag>ife</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[排序表格]]></title>
    <url>%2F2017%2F04%2F16%2Fife2017%2F%E6%8E%92%E5%BA%8F%E8%A1%A8%E6%A0%BC%2F</url>
    <content type="text"><![CDATA[排序表格题目地址 任务描述 实现一个支持列排序的表格组件 提供生成表格的接口，表格中的数据，表格样式尽量低耦合 可以配置对哪些列支持排序功能，并在表头进行排序按钮的显示，图中的样式为示意参考，可自行设定样式及交互方式 提供点击排序按钮后的响应接口，并提供默认的排序方法，当提供的接口没有具体实现时，按默认的排序方法进行排序操作，并更新表格中的数据显示。 source demo 关于这题讲讲两点 1.由于这题需要表格排序，每一次排序都会涉及到大量DOM的更新渲染（我不知道有没有更好的办法），所以我使用innerHTML拼接字符串的方式以提高性能 对于小的DOM更改而言，两种方法（createElement()、innerHTML）效率都差不多。然而，对于大的DOM更改，使用innerHTML要比使用标准DOM方法创建同样的DOM结构快得多。————《JavaScript高级程序设计》24.2.4.2 123456789var list = document.getElementById("myList");var html = "";var i;for(i = 0; i &lt; 10; i++)&#123; html += "&lt;li&gt;Item " + i + "&lt;/li&gt;";&#125;list.innerHTML = html; 2.根据数组对象的某一个属性进行排序1234567891011121314151617181920212223function sortByProperty(PropertyName, dir) &#123; return function(obj1, obj2) &#123; let val1 = obj1[PropertyName]; let val2 = obj2[PropertyName]; dir = dir || "stb"; if(dir === "stb")&#123; return val1-val2;// 小到大 &#125;else if(dir === "bts")&#123; return val2-val1 ;// 大到小 &#125; &#125;;&#125;let data = [&#123; "age": 10 &#125;,&#123; "age": 20 &#125;,&#123; "age": 30&#125;];data.sort(sortByProperty("age","bts"));]]></content>
      <categories>
        <category>ife</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>ife</tag>
        <tag>排序表格</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[浮出层]]></title>
    <url>%2F2017%2F04%2F13%2Fife2017%2F%E6%B5%AE%E5%87%BA%E5%B1%82%2F</url>
    <content type="text"><![CDATA[浮出层题目地址 任务描述 实现一个浮出层的UI组件实现 浮出层的中心默认在屏幕正中 当浮出层显示时，屏幕滚动时，浮出层始终保持位置固定在屏幕正中，不随屏幕滚动而变化位置。或者禁止页面在有浮出层出现时滚动 当浮出层显示时，点击浮出层以外的部分，默认为关闭浮出层。可以实现一个半透明的遮罩来挡住浮出层外的部分 浮出层的样式、内容和逻辑尽量解耦 提供使用JavaScript控制浮出层展现和关闭的接口 浮出层的窗口大小可以是一个默认固定值，也可以是随内容变化而自适应变化，也可以是通过接口参数进行调整，自行根据自己能力进行选择 有能力的同学可以实现浮出层的拖拽移动浮出窗口位置以及拖拽边缘来放大缩小浮出窗口的功能 source demo 好吧，功能性的要求我都完成了就差如何做到尽量解耦和如何优化代码了这题的难点就是怎么实现拖拽移动浮窗口和拖拽边缘来放大缩小浮出窗口的逻辑没什么好讲的，看代码吧！]]></content>
      <categories>
        <category>ife</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>ife</tag>
        <tag>浮出层</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[js对象方法]]></title>
    <url>%2F2017%2F04%2F10%2FJavaScript%2Fjs%E5%AF%B9%E8%B1%A1%E6%96%B9%E6%B3%95%2F</url>
    <content type="text"><![CDATA[以下内容参考自《深入理解JavaScript》 公有方法公有方法可以被此构造函数生成的所有实例化对象访问123456789101112function Constr(...)&#123; // 公有属性 this.publicData = ...;&#125;// 公有方法Constr.prototype.publicMethod = function()&#123;...&#125;;// orConstr.prototype = &#123; constructor: Constr, publicMethod: function()&#123;...&#125;,&#125; demo 1234567891011function User(name)&#123; this.name = name;&#125;User.prototype.getName = function()&#123; console.log(this.name);&#125;;let man = new User("jack");man.getName(); // jacklet man1 = new User("jack");console.log(man.getName === man1.getName); // true 私有方法只能从构造函数内部访问，原型方法也不能访问1234567function Constr(...)&#123; // 私有属性 let privateData = ...; // 私有方法 function privateMethod()&#123;...&#125;;&#125; demo 1234567891011function User(name)&#123; let _name = name; function getName()&#123; console.log(_name); &#125; getName(); // jack&#125;let man = new User("jack");man.getName(); //Uncaught TypeError: man.getName is not a function 特权方法函数在构造函数内部创建，并被添加作为实的方法。这意味着，一方面，这种函数可以访问私有数据，另一方面，它是公有的因此对原型方法可见。1234function Constr(...)&#123; // 私有方法 this.privilegedMethod = function()&#123;...&#125;;&#125; demo 123456789101112function User(name)&#123; let _name = name; this.getName = function()&#123; console.log(_name); &#125;&#125;let man = new User("jack");man.getName(); // jacklet man1 = new User("jack");console.log(man.getName === man1.getName); // false 静态方法静态方法和静态属性就是我们无需实例化就可以调用静态方法既只允许构造函数调用，其他的实例均无法访问和调用的方法和属性。123456789101112131415function User(name) &#123; let vname = name; this._name = name;&#125;User.cname = "tom";User.getName = function() &#123; // this === User console.log(this.cname); console.log(this._name); console.log(this.vname);&#125;;let man = new User("jack");User.getName(); // tom undefined undefinedman.getName(); // Uncaught TypeError: man.getName is not a function 参考资料前端程序员经常忽视的一个JavaScript面试题Private Members in JavaScript]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>面向对象</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[听指令的小方块]]></title>
    <url>%2F2017%2F04%2F10%2Fife2017%2F%E5%90%AC%E6%8C%87%E4%BB%A4%E7%9A%84%E5%B0%8F%E6%96%B9%E5%9D%97%2F</url>
    <content type="text"><![CDATA[一题目地址 任务描述 实现一个类似棋盘的格子空间，每个格子用两个数字可以定位，一个红正方形的DOM在这个空间内，正方形中的蓝色边表示这是他的正面，有一个input输入框 在输入框中允许输入如下指令，按下按钮后，使得正方形做相应动作 GO：向蓝色边所面向的方向前进一格（一格等同于正方形的边长） TUN LEF：向左转（逆时针旋转90度） TUN RIG：向右转（顺时针旋转90度） TUN BAC：向右转（旋转180度） 移动不能超出格子空间 source demo 第一次尝试用面向对象的方式去做题这也算是一种进步吧在做这题时，当我把棋盘画完时（100个div。。。）就觉得好蠢应该把棋盘当作一个对象用js动态创建的，并能调整大小鉴于已经写了就算了，如果下次遇到类似的题就应该动态创建地图 接下来来谈谈这题的小知识 1.当我们用element.style.XXX获取样式时获取的是行内样式这时我们应该用getComputedStyle()来获取元素的样式 在“DOM2 级样式”中提供了 getComputedStyle() 方法。这个方法接受两个参数：要取得计算样式的元素和一个伪元素字符串（例如”:after”）。如果不需要伪元素信息，第二个参数可以是 null。getComputedStyle() 方法返回一个 CSSStyleDeclaration 对象（与 style 属性的类型相同），其中包含当前元素的所有计算的样式。———— 以上来自《JavaScript 高级程序设计》 getComputedStyle与style的区别 getComputedStyle()方法是只读的，只能获取样式，不能设置；而element.style能读能写 getComputedStyle()方法获取的是最终应用在元素上的所有CSS属性对象；而element.style只能获取元素style属性中的CSS样式 例如：我们获取元素的left属性可以这样12345let block = document.getElementById("block");console.log(window.getComputedStyle(block, null).left);//如果元素有伪类console.log(window.getComputedStyle(block, ":after").left); 2.用getComputedStyle()来获取元素的transform样式时得到的是matrix所以我们需要把matrix进行转换从网上找到一个可以转换为scale和rotate和translate 12345678910111213141516171819202122232425262728293031323334function getAngle(el) &#123; //var el = document.getElementById("divTransform"); var st = window.getComputedStyle(el, null); var tr = st.getPropertyValue("-webkit-transform") || st.getPropertyValue("-moz-transform") || st.getPropertyValue("-ms-transform") || st.getPropertyValue("-o-transform") || st.getPropertyValue("transform") || "FAIL"; // With rotate(30deg)... // matrix(0.866025, 0.5, -0.5, 0.866025, 0px, 0px) console.log('Matrix: ' + tr); // rotation matrix - http://en.wikipedia.org/wiki/Rotation_matrix var values = tr.split('(')[1].split(')')[0].split(','); var a = values[0]; var b = values[1]; var c = values[2]; var d = values[3]; var scale = Math.sqrt(a * a + b * b); console.log('Scale: ' + scale); // arc sin, convert from radians to degrees, round var sin = b / scale; // next line works for 30deg but not 130deg (returns 50); var angle = Math.round(Math.asin(sin) * (180 / Math.PI)); // var angle = Math.round(Math.atan2(b, a) * (180 / Math.PI)); console.log('Rotate: ' + angle + 'deg');&#125; 这题我并没有用到这个方法先记下方便日后参考 二题目地址 任务描述 对于正方形的移动增加相应动画，包括移动和旋转 每个指令的执行时间是1s（可以自己调整） 增加新的指令如下： TRA LEF：向屏幕的左侧移动一格，方向不变 TRA TOP：向屏幕的上面移动一格，方向不变 TRA RIG：向屏幕的右侧移动一格，方向不变 TRA BOT：向屏幕的下面移动一格，方向不变 MOV LEF：方向转向屏幕左侧，并向屏幕的左侧移动一格 MOV TOP：方向转向屏幕上面，向屏幕的上面移动一格 MOV RIG：方向转向屏幕右侧，向屏幕的右侧移动一格 MOV BOT：方向转向屏幕下面，向屏幕的下面移动一格 source demo 这题在上题的基础上新加入了几个命令用上题的几个命令组合使用即可实现这题几个命令 js面向对象基础123456789101112131415function User(name) &#123; var name = name; //私有属性 this.name = name; //公有属性 function getName() &#123; //私有方法 return name; &#125;&#125;User.prototype.getName = function() &#123; //公有方法 return this.name;&#125;User.name = 'Wscats'; //静态属性User.getName = function() &#123; //静态方法 return this.name;&#125;var Wscat = new User('Wscats'); //实例化 参考资料获取元素CSS值之getComputedStyle方法熟悉理解CSS3 transform中的Matrix(矩阵)]]></content>
      <categories>
        <category>ife</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>ife</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[表单]]></title>
    <url>%2F2017%2F03%2F29%2Fife2017%2F%E8%A1%A8%E5%8D%95%2F</url>
    <content type="text"><![CDATA[一题目地址 任务描述 在页面中实现一个输入框与按钮，要求点击验证按钮后，对输入框中内容进行格式校验，并在其下方显示校验结果 校验规则： 1.字符数为4~16位 2.每个英文字母、数字、英文符号长度为1 3.每个汉字，中文符号长度为2 source demo 计算字符串长度（英文1中文2）1234567function getStrLen(str) &#123; let len = 0; for (let i of str) &#123; i.codePointAt(0) &lt;= 0xFF ? len++ : len += 2; &#125; return len;&#125; 二题目地址 任务描述 基于上一个任务，在页面中添加多个表单 要求: 表单获得焦点时，下方显示表单填写规则 表单失去焦点时校验表单内容 校验结果正确时，表单边框显示绿色，并在下方显示验证通过的描述文字 校验结果错误时，表单边框显示红色，并在下方显示验证错误的描述文字 点击提交按钮时，对页面中所有输入进行校验，校验结果显示方式同上。若所有表单校验通过，弹窗显示“提交成功”，否则显示“提交失败” source demo 很常规的验证表单的题，不难，有点繁琐ps：命名真是一件痛苦的事 三题目地址 任务描述 在页面中完成两个单选框，切换单选框的不同选项时下方显示的表单随之切换。 当选择在校生时，出现两个select下拉菜单，一个选择城市，一个选择学校，当选择非在校生时，出一个文本输入框 学校下拉菜单里的学校名单均为城市下拉菜单中所选的城市中的大学，当城市发生变化时，学校一起发生变化 城市及学校的数据随意编造即可，无需真实完整 source demo 感觉这题完成度不高，纯粹为了完成而完成，不方便日后的拓展ヽ(●-`Д´-)ノ 参考资料HTML表单指南如何判断中文字符]]></content>
      <categories>
        <category>ife</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>ife</tag>
        <tag>表单</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[悬浮模糊效果]]></title>
    <url>%2F2017%2F03%2F27%2Fife2017%2F%E6%82%AC%E6%B5%AE%E6%A8%A1%E7%B3%8A%E6%95%88%E6%9E%9C%2F</url>
    <content type="text"><![CDATA[悬浮模糊效果题目地址 任务描述 实现文字的流光渐变动画 背景图需要进行模糊处理 实现按钮边框的从中间到两边扩展开 source demo 这题主要的难点就是文字的流光渐变效果主要跟这五个属性有关123456789101112131415161718192021222324.demo&#123; /*前50%颜色组要与后50%颜色组一样且最后100%的颜色要和开头0%的颜色相等*/ background-image: -webkit-linear-gradient(left, blue, red 25%, blue 50%, red 75%, blue 100%); /*背景裁剪至文字形状*/ -webkit-background-clip: text; /*文字透明，使背景颜色显示出来*/ color: transparent; /*将背景图宽度拉长至两倍，之前设置background-image的两份相同的颜色组，就是为了能在此拉长后只显示一份颜色组，另外超出的半截颜色组用来实现流光效果*/ background-size: 200% 100%; /*将背景从0移动到-100%的位置，无限重复即可得到流光渐变效果*/ animation: streamer 3s infinite linear;&#125;@keyframes streamer&#123; from&#123; background-position: 0 0; &#125; to&#123; background-position: -100% 0; &#125;&#125; 关于background-clip的text选项估计很多人都不知道，我也是遇到这题才知道有这个值而且w3school上也没有这个值（估计是没更新吧，毕竟前端发展蛮快的）关于这题，你仔细观察题目demo会发现有2个细节 鼠标放上图片时文字有几十像素的向上移动 边框变长的贝塞尔曲线（一开始很快然后变得很慢，边框并不是匀速变长的）主要看了一些同学的demo，发现有好多都没有注意细节前端嘛，主要就是细心边框的上下与左右的边框宽度不一样，我感觉不好看就没做了 关于背景图我用的不是gif而是用把几张图拼接成一张长图，通过改变background-position-x来形成类似gif的效果1234567891011121314.gif&#123; background-image: url(); background-repeat: no-repeat; background-position: 0 0; animation: gif 8s steps(11) infinite; /*steps(n) n为图片数量*/&#125;@keyframes gif&#123; to&#123; background-position: -3665px 0; /*图片的总长*/ &#125;&#125; 下方这是张鑫旭大神的gif实现方法（底部有链接）12345678910111213141516.love &#123; display: block; width: 100px; height: 100px; background: url(web_heart_animation.png) 0 0 no-repeat; background-size: 2900%; animation: heart-burst steps(28) 0.8s infinite both;&#125;@keyframes heart-burst &#123; 0% &#123; background-position: 0%; &#125; 100% &#123; background-position: 100%; &#125;&#125; 一开始用张大神的写法发现图片会少一帧至于为什么少一帧，很好目前我也不懂 这个还是蛮需要想象力的，但这就是它的有趣之处另外用这个方法还可以实现ktv歌词的滚动效果也许还能做出更炫酷的效果，这就需要想象力了总之这题挺有趣的（PS：一开始为了找背景图就去贴吧下cg，7g多因为百度云限速下了一天多，结果cg都是H的，后面才知道这玩意叫sd，才几百m ORZ 白白浪费一天时间下载） 参考资料w3cplusCodropsAlloyTeamCSS或JS实现gif动态图片的停止与播放]]></content>
      <categories>
        <category>ife</category>
      </categories>
      <tags>
        <tag>css</tag>
        <tag>ife</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JavaScript和树]]></title>
    <url>%2F2017%2F03%2F23%2Fife2017%2FJavaScript%E5%92%8C%E6%A0%91%2F</url>
    <content type="text"><![CDATA[一题目地址 任务描述 在页面中展现一颗二叉树的结构 提供一个按钮，显示开始遍历，点击后，以动画的形式呈现遍历的过程 二叉树的遍历算法和方式自定，前序中序后序皆可，但推荐可以提供多种算法的展示（增加多个按钮，每个按钮对应不同的算法） 当前被遍历到的节点做一个特殊显示（比如不同的颜色） 每隔一段时间（500ms，1s等时间自定）再遍历下一个节点 源码https://github.com/Lexokid/ife/blob/master/2-7/index.html demohttps://lexokid.github.io/ife/2-7/index.html 这题考察二叉树的遍历二叉树的三种递归遍历1234567891011121314151617181920212223242526272829// 前序遍历function preOrderTraverse(node) &#123; if (!node) &#123; return; &#125; nodeArr.push(node); preOrderTraverse(node.firstElementChild); preOrderTraverse(node.lastElementChild);&#125;// 中序遍历function inOrderTraverse(node) &#123; if (!node) &#123; return; &#125; inOrderTraverse(node.firstElementChild); nodeArr.push(node); inOrderTraverse(node.lastElementChild);&#125;// 后序遍历function postOrderTraverse(node) &#123; if (!node) &#123; return; &#125; postOrderTraverse(node.firstElementChild); postOrderTraverse(node.lastElementChild); nodeArr.push(node);&#125; 很好,这不算不难… 二题目地址 任务描述 将二叉树变成了多叉树，并且每一个节点中带有内容 提供一个按钮，显示开始遍历，点击后，以动画的形式呈现遍历的过程 当前被遍历到的节点做一个特殊显示（比如不同的颜色） 每隔一段时间（500ms，1s等时间自定）再遍历下一个节点 增加一个输入框及一个“查询”按钮，点击按钮时，开始在树中以动画形式查找节点内容和输入框中内容一致的节点，找到后以特殊样式显示该节点，找不到的话给出找不到的提示。查询过程中的展示过程和遍历过程保持一致 源码https://github.com/Lexokid/ife/blob/master/2-8/index.html demohttps://lexokid.github.io/ife/2-8/index.html 这题考察多叉树的遍历，可以用深度优先和广度优先两种遍历方式(类似图的遍历)12345678910111213141516171819202122// 深度优先搜索function traverseDFS(node) &#123; nodeArr.push(node); for (let i = 0; i &lt; node.children.length; i++) &#123; traverseDFS(node.children[i]); &#125;&#125;// 广度优先搜索function traverseBFS(node) &#123; let queue = []; nodeArr.push(node); queue.push(node); let curNode = queue.shift(); while (curNode) &#123; for (let i = 0; i &lt; curNode.children.length; i++) &#123; queue.push(curNode.children[i]); nodeArr.push(curNode.children[i]); &#125; curNode = queue.shift(); &#125;&#125; 详细的思路请参考底下的资料 三题目地址 任务描述 添加节点的选择、增加与删除的功能 点击某个节点元素，则该节点元素呈现一个特殊被选中的样式 增加一个删除按钮，当选中某个节点元素后，点击删除按钮，则将该节点及其所有子节点删除掉 增加一个输入框及一个“添加”按钮当选中某个节点元素后，点击增加按钮，则在该节点下增加一个子节点，节点内容为输入框中内容，插入在其子节点的最后一个位置 源码https://github.com/Lexokid/ife/blob/master/2-9/index.html demohttps://lexokid.github.io/ife/2-9/index.html 这题，嗯~~~没什么好说的，基于上一个任务的拓展到这为止算是完成了斌斌学院的任务了学会了DOM节点的操作和遍历，接触了一点点的异步编程也看了其他同学写的代码，开拓了思维，为以后遇到类似的问题提供了多种解决方案总之学到了很多很多接下来要更加努力的学习了为了和平的世界，美好的未来干杯 (゜-゜)つロ 参考资料遍历多叉树（递归、非递归广度优先、深度优先）Data Structures With JavaScript: Treejs数据结构和算法（三）二叉树]]></content>
      <categories>
        <category>ife</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>ife</tag>
        <tag>树</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[js排序]]></title>
    <url>%2F2017%2F03%2F17%2FJavaScript%2Fjs%E6%8E%92%E5%BA%8F%2F</url>
    <content type="text"><![CDATA[js的几种排序(从小到大) sort排序（推荐）123456function systemSort(array)&#123; array.sort(function(a, b) &#123; return a - b; &#125;); return array;&#125; 交换排序时间复杂度O(n2)12345678910111213function swapSort(array) &#123; var i, j, d; for (i = 0; i &lt; array.length; i++) &#123; for (j = i+1; j &lt; array.length; j++) &#123; if (array[i] &gt; array[j]) &#123; d = array[j]; array[j] = array[i]; array[i] = d; &#125; &#125; &#125; return array;&#125; 冒泡排序时间复杂度O(n2)12345678910111213function bubbleSort(array) &#123; var i, j, d; for (i = 0; i &lt; array.length; i++) &#123; for (j = array.length-1; j &gt; i; j--) &#123; if (array[j] &lt; array[j-1]) &#123; d = array[j]; array[j] = array[j-1]; array[j-1] = d; &#125; &#125; &#125; return array;&#125; 改进：当在i&lt;array.length的时候序列已经有序，就不需要在接着循环了 12345678910111213141516function bubbleSort(array) &#123; var i, j, d; var flag=1; for (i = 0; i &lt; array.length &amp;&amp; flag; i++) &#123; flag=0; for (j = array.length-1; j &gt; i; j--) &#123; if (array[j] &lt; array[j-1]) &#123; d = array[j]; array[j] = array[j-1]; array[j-1] = d; flag=1; &#125; &#125; &#125; return array;&#125; 排序动画]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>排序</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[基础JavaScript练习]]></title>
    <url>%2F2017%2F03%2F17%2Fife2017%2F%E5%9F%BA%E7%A1%80JavaScript%E7%BB%83%E4%B9%A0%2F</url>
    <content type="text"><![CDATA[一题目地址 任务描述 模拟一个队列，队列的每个元素是一个数字，初始队列为空 有一个input输入框，以及4个操作按钮 点击”左侧入”，将input中输入的数字从左侧插入队列中； 点击”右侧入”，将input中输入的数字从右侧插入队列中； 点击”左侧出”，读取并删除队列左侧第一个元素，并弹窗显示元素中数值； 点击”右侧出”，读取并删除队列又侧第一个元素，并弹窗显示元素中数值； 点击队列中任何一个元素，则该元素会被从队列中删除 源码https://github.com/Lexokid/ife/blob/master/2-4 demohttps://lexokid.github.io/ife/2-4/index.html 这题没有什么难度，就是一些DOM节点的基本操作 二题目地址 任务描述 基于上一任务 限制输入的数字在10-100 队列元素数量最多限制为60个，当超过60个时，添加元素时alert出提示 队列展现方式变化如图，直接用高度表示数字大小 实现一个简单的排序功能，如冒泡排序（不限制具体算法），用可视化的方法表达出来 源码https://github.com/Lexokid/ife/blob/master/2-5 demohttps://lexokid.github.io/ife/2-5/index.html 这一题前面几个要求都不怎么难，主要是最后一个要求排序需要以可视化的方法来表达出来，这个要求有点难度，后来发现用setTimeout的递归方法和timer累加法可以实现js动画，setInterval也可以setTimeout的递归方法原理差不多是这样12345678910111213setTimeout(function() &#123; // do something setTimeout(function() &#123; // do second thing &#125;, 1000);&#125;, 1000);(function loop(i)&#123; console.log(i); if(i)&#123; setTimeout(function()&#123;loop(--i);&#125;,1000); &#125;&#125;)(3); 123456789101112131415161718192021222324252627282930313233343536373839404142434445function delay(fn, t) &#123; // private instance variables var queue = [], self, timer; function schedule(fn, t) &#123; timer = setTimeout(function() &#123; timer = null; fn(); if (queue.length) &#123; var item = queue.shift(); schedule(item.fn, item.t); &#125; &#125;, t); &#125; self = &#123; delay: function(fn, t) &#123; // if already queuing things or running a timer, // then just add to the queue if (queue.length || timer) &#123; queue.push(&#123;fn: fn, t: t&#125;); &#125; else &#123; // no queue or timer yet, so schedule the timer schedule(fn, t); &#125; return self; &#125;, cancel: function() &#123; clearTimeout(timer); queue = []; &#125; &#125;; return self.delay(fn, t);&#125;function fn()&#123; console.log("a");&#125;delay(fn,1000).delay(fn,2000);/*wait 1000msawait 2000msb*/ timer累加原理123456789for(var i=0;i&lt;5;i++)&#123; (function(x)&#123; setTimeout(function()&#123;console.log(x);&#125;,i*1000); &#125;)(i);&#125;for(let i=0;i&lt;5;i++)&#123; setTimeout(function()&#123;console.log(i);&#125;,i*1000);&#125; setInterval1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162// delay 每一帧之间的间隔(ms)// duration 整个动画完成需要的时间(ms)// start 动画开始的时间// timePassed 从动画开始所经过的时间(ms)// progress 已经过去的动画时间作为分子，计算每一帧通过公式timePassed/duration// delta通过当前的时间，计算当前的动画进度// delta(progress)一个返回当前动画进度的函数。function animate(opts) &#123; var start = new Date; var id = setInterval(function() &#123; var timePassed = new Date - start; var progress = timePassed / opts.duration; progress = (progress &lt; 1) ? progress : 1; var delta = opts.delta(progress) opts.step(delta) if (progress == 1) &#123; clearInterval(id) &#125; &#125;, opts.delay || 10)&#125;function move(element, delta, duration) &#123; var to = 1000; animate(&#123; delay: 10, duration: duration || 1000, delta: delta, step: function(delta) &#123; element.style.left = to * delta + 'px'; &#125; &#125;)&#125;function linear(progress) &#123; return progress;&#125;function quad(progress) &#123; return Math.pow(progress, 2)&#125;function circ(progress) &#123; return 1 - Math.sin(Math.acos(progress))&#125;function back(progress, x) &#123; return Math.pow(progress, 2) * ((x + 1) * progress - x)&#125;function bounce(progress) &#123; for (var a = 0, b = 1, result; 1; a += b, b /= 2) &#123; if (progress &gt;= (7 - 4 * a) / 11) &#123; return -Math.pow((11 - 6 * a - 11 * progress) / 4, 2) + Math.pow(b, 2) &#125; &#125;&#125;function elastic(progress, x) &#123; x = x || 5; return Math.pow(2, 10 * (progress - 1)) * Math.cos(20 * Math.PI * x / 3 * progress)&#125; 代码贴的有点多了，不过都是思路，记下来方便以后使用这题我用的是timer累加的方法来实现动画效果12345678910111213141516171819202122232425function sortHandle() &#123; var array = $("num").children; let time = 100; let timer; let count = 0; for (let i = 0; i &lt; array.length; i++) &#123; for (let j = array.length - 1; j &gt; i; j--) &#123; timer = setTimeout(function() &#123; [].forEach.call($("num").children, function(its) &#123; its.style.boxShadow = `none`; &#125;); array[j].style.boxShadow = `inset 0 0 2px 3px red`; array[j - 1].style.boxShadow = `inset 0 0 2px 2px red`; if (~~(array[j].innerText) &gt; ~~(array[j - 1].innerText)) &#123; $("num").insertBefore(array[j], array[j - 1]); &#125; &#125;, time * count++); &#125; &#125; setTimeout(function() &#123; [].forEach.call($("num").children, function(its) &#123; its.style.boxShadow = `none`; &#125;); &#125;, time * count);&#125; 注意：两个for循环的循环变量要用let来定义，因为循环是不会因为setTimeout阻塞的，所以循环会先执行完，var定义的变量是以函数为作用域的，循环执行完时变量会一直保持在循环结束时的状态，导致setTimeout执行时访问的那个变量永远不变或者可以用一个数组来储存排序的结果，然后用定时器去重现保存的结果 三题目地址 源码https://github.com/Lexokid/ife/blob/master/2-6 demohttps://lexokid.github.io/ife/2-6/index.html 任务描述 基于任务四进行升级 将新元素输入框从input改为textarea 允许一次批量输入多个内容，格式可以为数字、中文、英文等，可以通过用回车，逗号（全角半角均可），顿号，空格（全角半角、Tab等均可）等符号作为不同内容的间隔 增加一个查询文本输入框，和一个查询按钮，当点击查询时，将查询词在各个元素内容中做模糊匹配，将匹配到的内容进行特殊标识，如文字颜色等。举例，内容中有abcd，查询词为ab或bc，则该内容需要标识 这题一样没什么难度，考察了一点正则表达式 这样就可以把除数字、英文、中文以外的字符替换为空格12var reg = /[^a-zA-Z0-9\u4e00-\u9fa5]+/g;str = str.replace(reg, " "); 模糊匹配可以用str.match(reg)的方法 参考链接【翻译】javascript 动画原理浅析setTimeout任务链我用js写了一个冒泡排序法，怎么用html和css把排序过程展现出来？]]></content>
      <categories>
        <category>ife</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>排序</tag>
        <tag>ife</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[浏览器滚动条样式]]></title>
    <url>%2F2017%2F03%2F17%2Fcss%2F%E6%B5%8F%E8%A7%88%E5%99%A8%E6%BB%9A%E5%8A%A8%E6%9D%A1%E6%A0%B7%E5%BC%8F%2F</url>
    <content type="text"><![CDATA[webkit滚动条组成1234567::-webkit-scrollbar \\滚动条整体部分::-webkit-scrollbar-thumb \\滚动条里面的小方块，能向上向下移动（或往左往右移动，取决于是垂直滚动条还是水平滚动条）::-webkit-scrollbar-track \\滚动条的轨道（里面装有Thumb）::-webkit-scrollbar-button \\滚动条的轨道的两端按钮，允许通过点击微调小方块的位置。::-webkit-scrollbar-track-piece \\内层轨道，滚动条中间部分（除去）::-webkit-scrollbar-corner \\边角，即两个滚动条的交汇处::-webkit-resizer \\两个滚动条的交汇处上用于通过拖动调整元素大小的小控件 注意：对以上各个部分定义width,height时,若是水平滚动条，则width属性不起作用，height属性用来控制滚动条相应部分竖直方向高度；若是竖直滚动条，则height属性不起作用，width属性用来控制相应部分的宽度 详细设置1234567891011121314151617181920212223242526272829303132:horizontal//horizontal伪类适用于任何水平方向上的滚动条:vertical//vertical伪类适用于任何垂直方向的滚动条:decrement//decrement伪类适用于按钮和轨道碎片。表示递减的按钮或轨道碎片，例如可以使区域向上或者向右移动的区域和按钮:increment//increment伪类适用于按钮和轨道碎片。表示递增的按钮或轨道碎片，例如可以使区域向下或者向左移动的区域和按钮:start//start伪类适用于按钮和轨道碎片。表示对象（按钮 轨道碎片）是否放在滑块的前面:end//end伪类适用于按钮和轨道碎片。表示对象（按钮 轨道碎片）是否放在滑块的后面:double-button//double-button伪类适用于按钮和轨道碎片。判断轨道结束的位置是否是一对按钮。也就是轨道碎片紧挨着一对在一起的按钮:single-button//single-button伪类适用于按钮和轨道碎片。判断轨道结束的位置是否是一个按钮。也就是轨道碎片紧挨着一个单独的按钮:no-button//no-button伪类表示轨道结束的位置没有按钮:corner-present//corner-present伪类表示滚动条的角落是否存在:window-inactive//适用于所有滚动条，表示包含滚动条的区域，焦点不在该窗口的时候 例 123456789101112131415161718192021222324252627&lt;style type="text/css"&gt; .my_scroll::-webkit-scrollbar&#123; width: 10px; height: 10px; &#125; .my_scroll::-webkit-scrollbar-thumb&#123; -webkit-box-shadow: inset 0 0 4px rgba(0, 0, 0, .6); border-radius: 10px; background-color: red; &#125; .my_scroll::-webkit-scrollbar-track&#123; -webkit-box-shadow: inset 0 0 6px rgba(0, 0, 0, 0.3); border-radius: 10px; background-color: #F5F5F5; &#125; .my_scroll::-webkit-scrollbar-button&#123; border-radius: 10px; background-color: blue; &#125; .my_scroll::-webkit-scrollbar-corner&#123; border-radius: 50%; background-color: green; &#125;&lt;/style&gt;&lt;div class="my_scroll" style="height: 200px;width: 200px;overflow: auto; background: #eee;"&gt;&lt;div style="min-width: 500px; min-height: 500px;"&gt;&lt;/div&gt;&lt;/div&gt; .my_scroll::-webkit-scrollbar{ width: 10px; height: 10px; } .my_scroll::-webkit-scrollbar-thumb{ -webkit-box-shadow: inset 0 0 4px rgba(0, 0, 0, .6); border-radius: 10px; background-color: red; } .my_scroll::-webkit-scrollbar-track{ -webkit-box-shadow: inset 0 0 6px rgba(0, 0, 0, 0.3); border-radius: 10px; background-color: #F5F5F5; } .my_scroll::-webkit-scrollbar-button{ border-radius: 10px; background-color: blue; } .my_scroll::-webkit-scrollbar-corner{ border-radius: 50%; background-color: green; }]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
        <tag>滚动条</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Gradient]]></title>
    <url>%2F2017%2F03%2F16%2Fcss%2FGradient%2F</url>
    <content type="text"><![CDATA[CSS3 GradientGradient 分为线性渐变 linear-gradient 和径向渐变 radial-gradient。因为很多浏览器需要加前缀，这里为了简单起见，所有的代码都只用最新的webkit标准写法 线性渐变语法1background: linear-gradient([&lt;point&gt;||&lt;angle&gt;,]? &lt;stop&gt;, &lt;stop&gt;[,&lt;stop&gt;]*) 线性渐变 - 从上到下（默认情况下 180deg）1234.grad&#123; background: -webkit-linear-gradient(red, blue); background: -webkit-linear-gradient(top,red, blue);&#125; 线性渐变 - 从左到右123.grad&#123; background: -webkit-linear-gradient(left,red, blue);&#125; 线性渐变 - 对角从左上角开始（到右下角）的线性渐变123.grad&#123; background: -webkit-linear-gradient(left top,red, blue);&#125; 使用角度角度是指水平线和渐变线之间的角度，逆时针方向计算。换句话说，0deg 将创建一个从下到上的渐变，90deg 将创建一个从左到右的渐变。 但是，请注意很多浏览器(Chrome,Safari,fiefox等)的使用了旧的标准，即 0deg 将创建一个从左到右的渐变，90deg 将创建一个从下到上的渐变。换算公式 90 - x = y 其中 x 为标准角度，y为非标准角度。 123.grad&#123; background: -webkit-linear-gradient(45deg,red, blue);&#125; 使用多个颜色结点123.grad&#123; background: -webkit-linear-gradient(red, green, blue);&#125; 使用透明度我们使用 rgba() 函数来定义颜色结点实现透明度 123.grad&#123; background: -webkit-linear-gradient(rgba(255,0,0,.5),rgba(0,0,0,.5));&#125; 停止点停止点可以是像素值，也可以是百分比 1234.grad&#123; background: -webkit-linear-gradient(red 10%, green 40%, blue); background: -webkit-linear-gradient(red 20px, green 80px, blue);&#125; 重复的线性渐变123.grad&#123; background: -webkit-repeating-linear-gradient(red, green 10%, blue 20%);&#125; 径向渐变为了创建一个径向渐变，你也必须至少定义两种颜色结点。颜色结点即你想要呈现平稳过渡的颜色。同时，你也可以指定渐变的中心、形状（原型或椭圆形）、大小。默认情况下，渐变的中心是 center（表示在中心点），渐变的形状是 ellipse（表示椭圆形），渐变的大小是 farthest-corner（表示到最远的角落） 1-webkit-radial-gradient([&lt;bg-position&gt; || &lt;angle&gt;,]? [&lt;shape&gt; || &lt;size&gt;,]? &lt;color-stop&gt;, &lt;color-stop&gt;[, &lt;color-stop&gt;]*); 径向渐变 - 颜色结点均匀分布（默认情况下）123.grad&#123; background: -webkit-radial-gradient(red, green, blue);&#125; 径向渐变 - 颜色结点不均匀分布123.grad&#123; background: -webkit-radial-gradient(red 10%, green 40%, blue);&#125; 设置形状shape 参数定义了形状它可以是值 circle 或 ellipse其中，circle 表示圆形，ellipse 表示椭圆形默认值是 ellipse 123.grad&#123; background: -webkit-radial-gradient(circle, red, green, blue);&#125; sizesize 参数定义了渐变的大小 closest-corner closest-side farthest-corner(默认) farthest-side closest-corner closest-side farthest-corner farthest-side 重复的径向渐变123.grad&#123; background: -webkit-repeating-radial-gradient(circle, red, green 10%, blue 15%);&#125; 例子与结合background-size，可以实现一些很精美的背景12345.grad&#123; background: -webkit-linear-gradient(45deg, #555 25%, transparent 25%, transparent), -webkit-linear-gradient(-45deg, #555 25%, transparent 25%, transparent), -webkit-linear-gradient(45deg, transparent 75%, #555 75%), -webkit-linear-gradient(-45deg, transparent 75%, #555 75%); background-size: 20px; background-color: #99f;&#125; 12345.grad&#123; background: -webkit-linear-gradient(transparent 50%, rgba(200, 0, 0, .5) 50%, rgba(200, 0, 0, .5)), -webkit-linear-gradient(0deg, transparent 50%, rgba(200, 0, 0, .5) 50%, rgba(200, 0, 0, .5)); background-size: 20px; background-color: #99f;&#125; 参考资料http://www.cnblogs.com/xiaohuochai/p/5383285.htmlhttp://www.runoob.com/css3/css3-gradients.htmlhttp://www.w3cplus.com/content/css3-gradienthttp://blog.csdn.net/lihongxun945/article/details/46727843]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
        <tag>Gradients</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[零基础JavaScript编码]]></title>
    <url>%2F2017%2F03%2F14%2Fife2017%2F%E9%9B%B6%E5%9F%BA%E7%A1%80JavaScript%E7%BC%96%E7%A0%81%2F</url>
    <content type="text"><![CDATA[一题目地址 源码https://github.com/Lexokid/ife/blob/master/2-1 demohttps://lexokid.github.io/ife/2-1/index.html 二题目地址 源码https://github.com/Lexokid/ife/blob/master/2-2 demohttps://lexokid.github.io/ife/2-2/index.html 三题目地址 源码https://github.com/Lexokid/ife/blob/master/2-3 demohttps://lexokid.github.io/ife/2-3/index.html 知识点sort排序1234567function sortArray(arr) &#123; arr.sort(function(a,b)&#123; //a-b从小到大，b-a从大到小 return a-b; &#125;) return arr;&#125;]]></content>
      <categories>
        <category>ife</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>ife</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[学习CSS3的新特性(animation)]]></title>
    <url>%2F2017%2F03%2F14%2Fife2017%2F%E5%AD%A6%E4%B9%A0CSS3%E7%9A%84%E6%96%B0%E7%89%B9%E6%80%A7%2F</url>
    <content type="text"><![CDATA[题目地址 源码https://github.com/Lexokid/ife/blob/master/1-12 demohttps://lexokid.github.io/ife/1-12/index.html 知识点animation-fill-mode假设有一个盒子1234567891011121314151617&lt;div class="box"&gt;&lt;/div&gt;&lt;style type="text/css"&gt;.box&#123; width: 100px; height: 100px; margin: 100px; background: #f00; transform: translateY(0); animation: move 1s;&#125;@keyframes move&#123; from&#123;transform: translateY(-50px)&#125; to &#123;transform: translateY( 50px)&#125;&#125;&lt;/style&gt; 使用图片来表示 translateY 的值与 时间 的关系: 横轴为表示 时间，为 0 时表示动画开始的时间，也就是向 box 加上 on 类名的时间，横轴一格表示 0.5s 纵轴表示translateY的值，为 0 时表示 translateY 的值为 0，纵轴一格表示 50px animation-fill-mode: none animation-fill-mode: backwards animation-fill-mode: forwards animation-fill-mode: both transition-timing-function: steps()steps 函数指定了一个阶跃函数第一个参数指定了时间函数中的间隔数量（必须是正整数）第二个参数可选，接受 start 和 end 两个值，指定在每个间隔的起点或是终点发生阶跃变化，默认为 end。step-start等同于steps(1,start)，动画分成1步，动画执行时为开始左侧端点的部分为开始；step-end等同于steps(1,end)：动画分成一步，动画执行时以结尾端点为开始，默认值为end。transition-timing-function 针对第一个参数timing-function 作用于每两个关键帧之间，而不是整个动画steps的设置都是针对两个关键帧之间的，而非是整个keyframes，所以第一个参数对 - 次数对应了每次steps的变化 第二个参数可选，接受 start 和 end 两个值，指定在每个间隔的起点或是终点发生阶跃变化，默认为 end2个参数都会选择性的跳过前后部分，start跳过0%，end跳过100%step-start在变化过程中，都是以下一帧的显示效果来填充间隔动画step-end与上面相反，都是以上一帧的显示效果来填充间隔动画 step的工作机制图 总结：steps函数，它可以传入两个参数，第一个是一个大于0的整数，他是将间隔动画等分成指定数目的小间隔动画，然后根据第二个参数来决定显示效果。第二个参数设置后其实和step-start，step-end同义，在分成的小间隔动画中判断显示效果。可以看出：steps(1, start) 等于step-start，steps(1,end)等于step-end 参考资料及来源如何理解animation-fill-mode及其使用？http://www.cnblogs.com/aaronjs/p/4642015.htmlhttp://www.tuicool.com/articles/neqMVrhttp://designmodo.com/steps-css-animations/]]></content>
      <categories>
        <category>ife</category>
      </categories>
      <tags>
        <tag>css</tag>
        <tag>ife</tag>
        <tag>html</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[移动Web页面布局]]></title>
    <url>%2F2017%2F03%2F11%2Fife2017%2F%E7%A7%BB%E5%8A%A8Web%E9%A1%B5%E9%9D%A2%E5%B8%83%E5%B1%80%2F</url>
    <content type="text"><![CDATA[题目地址 源码https://github.com/Lexokid/ife/blob/master/1-11 demohttps://lexokid.github.io/ife/1-11/index.html 知识点meta123456789101112&lt;meta content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0" name="viewport"&gt;&lt;meta content="yes" name="apple-mobile-web-app-capable"&gt;&lt;meta content="black" name="apple-mobile-web-app-status-bar-style"&gt;&lt;meta content="telephone=no" name="format-detection"&gt;&lt;meta content="email=no" name="format-detection" /&gt;&lt;!--第一个meta标签表示：强制让文档的宽度与设备的宽度保持1:1，并且文档最大的宽度比例是1.0，且不允许用户点击屏幕放大浏览；第二个meta标签是iphone设备中的safari私有meta标签，它表示：允许全屏模式浏览；第三个meta标签也是iphone的私有标签，它指定的iphone中safari顶端的状态条的样式；第四个meta标签表示：告诉设备忽略将页面中的数字识别为电话号码第五个meta标签表示：去除Android平台中对邮箱地址的识别 --&gt; 像素pixel - px ( picture element )dpi / ppi - 每英寸像素 ( dot per inch )dips - 设备独立像素 ( device-independent pixels )devicePixelRatio( 设备像素比 ) - 物理像素 / dips 字体设置1234body &#123; font-family: -apple-system, BlinkMacSystemFont, "PingFang SC","Helvetica Neue",STHeiti,"Microsoft Yahei",Tahoma,Simsun,sans-serif;&#125; CSS 实现类似原生效果的 1px 边框123456789101112131415.border-1px &#123; position: relative;&#125;.border-1px:after &#123; position: absolute; content: ''; top: -50%; bottom: -50%; left: -50%; right: -50%; -webkit-transform: scale(0.5); transform: scale(0.5); border-top: 1px solid #666; border-bottom: 1px solid #666;&#125; 去除iOS和Android中的输入URL的控件条setTimeout(function(){ window.scrollTo(0, 1); }, 0);请注意，这句代码必须放在window.onload里才能够正常的工作，而且你的当前文档的内容高度必须是高于窗口的高度时，这句代码才能有效的执行。 关闭iOS中键盘自动大写我们知道在iOS中，当虚拟键盘弹出时，默认情况下键盘是开启首字母大写的功能的，根据某些业务场景，可能我们需要关闭这个功能，移动版本webkit为input元素提供了autocapitalize属性，通过指定autocapitalize=”off”来关闭键盘默认首字母大写。 参考资料MDN:手机网页开发MDN:在移动浏览器中使用viewport元标签控制布局移动前端开发和 Web 前端开发的区别是什么Alloyteam移动开发规范概述手机/移动前端开发需要注意的20个要点w3cplus响应式技术资源浅谈移动Web开发Alloyteam Mars移动WEB开发入门移动开发资源集合移动前端不得不了解的html5 head 头标签]]></content>
      <categories>
        <category>ife</category>
      </categories>
      <tags>
        <tag>css</tag>
        <tag>ife</tag>
        <tag>html</tag>
        <tag>移动Web</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Flexbox 布局练习]]></title>
    <url>%2F2017%2F03%2F08%2Fife2017%2FFlexbox%20%E5%B8%83%E5%B1%80%E7%BB%83%E4%B9%A0%2F</url>
    <content type="text"><![CDATA[题目地址 源码https://github.com/Lexokid/ife/blob/master/1-10 demohttps://lexokid.github.io/ife/1-10/index.html 参考资料Flexbox详解Flexbox——快速布局神器使用 CSS 弹性盒MDN flex属性]]></content>
      <categories>
        <category>ife</category>
      </categories>
      <tags>
        <tag>css</tag>
        <tag>flexbox</tag>
        <tag>ife</tag>
        <tag>html</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[响应式网格]]></title>
    <url>%2F2017%2F03%2F08%2Fife2017%2F%E5%93%8D%E5%BA%94%E5%BC%8F%E7%BD%91%E6%A0%BC%2F</url>
    <content type="text"><![CDATA[题目地址 源码https://github.com/Lexokid/ife/blob/master/1-8 demohttps://lexokid.github.io/ife/1-8/index.html 知识点123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111/*设置container*/.grid-container &#123; width: 100%; max-width: 1200px; padding: 10px;&#125;.grid-container,.grid-container * &#123; box-sizing: border-box;&#125;/*为row类清除浮动来防止由浮动元素造成的外边距折叠*/.row::before,.row::after &#123; content: ""; display: table; clear: both;&#125;/*给每一行设置flex，用order可以控制3-3，3-4，3-5排列顺序*/.row&#123; display: flex; flex-wrap: wrap;&#125;@media all and (max-width: 768px) &#123; ... .col-2&#123; -webkit-order: 2; width: 25%; &#125; ...&#125;/*设置左浮动，如果列是空的浮动列将堆叠在彼此的顶部。为了防止这种情况，我们给列的最小高度为1px*/[class*='col-'] &#123; float: left; min-height: 1px; width: calc(100% * (1 / 12)); padding: 10px;&#125;/*设置文本*/[class*='col-']&gt;p&#123; text-align: center; padding: 0; margin: 0; height: 50px; background: #eee; line-height: 50px;&#125;/*设置列的百分比宽 以12列为例*/.col-1 &#123; width: calc(100% * (1 / 12));&#125;.col-2 &#123; width: calc(100% * (2 / 12));&#125;.col-3 &#123; width: calc(100% * (3 / 12));&#125;.../*设置外边框不会占据空间*/.outline p &#123; outline: 1px solid #999;&#125;/*响应式布局*/@media all and (max-width: 768px) &#123; .col-4&#123; width: 50%; &#125; .col-4:last-of-type&#123; width: 100%; &#125; .col-1&#123; width: 16.66%; &#125; .col-2&#123; -webkit-order: 2; -moz-order: 2; -ms-order: 2; -o-order: 2; order: 2; width: 25%; &#125; .col-6:last-of-type&#123; width: 66.66%; &#125;&#125;&lt;div class="grid-container outline"&gt; &lt;div class="row"&gt; &lt;div class="col-4"&gt;&lt;p&gt;1-1&lt;/p&gt;&lt;/div&gt; &lt;div class="col-4"&gt;&lt;p&gt;1-2&lt;/p&gt;&lt;/div&gt; &lt;div class="col-4"&gt;&lt;p&gt;1-3&lt;/p&gt;&lt;/div&gt; &lt;/div&gt; &lt;div class="row"&gt; &lt;div class="col-3"&gt;&lt;p&gt;2-1&lt;/p&gt;&lt;/div&gt; &lt;div class="col-6"&gt;&lt;p&gt;2-2&lt;/p&gt;&lt;/div&gt; &lt;div class="col-3"&gt;&lt;p&gt;2-3&lt;/p&gt;&lt;/div&gt; &lt;/div&gt; &lt;div class="row"&gt; &lt;div class="col-1"&gt;&lt;p&gt;3-1&lt;/p&gt;&lt;/div&gt; &lt;div class="col-1"&gt;&lt;p&gt;3-2&lt;/p&gt;&lt;/div&gt; &lt;div class="col-2"&gt;&lt;p&gt;3-3&lt;/p&gt;&lt;/div&gt; &lt;div class="col-2"&gt;&lt;p&gt;3-4&lt;/p&gt;&lt;/div&gt; &lt;div class="col-6"&gt;&lt;p&gt;3-5&lt;/p&gt;&lt;/div&gt; &lt;/div&gt;&lt;/div&gt; 参考资料Creating Your Own CSS Grid SystemBootstrap grid examplesBootStrap 带 offset 的网格系统]]></content>
      <categories>
        <category>ife</category>
      </categories>
      <tags>
        <tag>css</tag>
        <tag>ife</tag>
        <tag>html</tag>
        <tag>响应式</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[实现常见的技术产品官网的页面架构及样式布局]]></title>
    <url>%2F2017%2F03%2F06%2Fife2017%2F%E5%AE%9E%E7%8E%B0%E5%B8%B8%E8%A7%81%E7%9A%84%E6%8A%80%E6%9C%AF%E4%BA%A7%E5%93%81%E5%AE%98%E7%BD%91%E7%9A%84%E9%A1%B5%E9%9D%A2%E6%9E%B6%E6%9E%84%E5%8F%8A%E6%A0%B7%E5%BC%8F%E5%B8%83%E5%B1%80%2F</url>
    <content type="text"><![CDATA[题目地址 源码https://github.com/Lexokid/ife/blob/master/1-7 demohttps://lexokid.github.io/ife/1-7/index.html 参考资料CSS background 属性CSS 选择器]]></content>
      <categories>
        <category>ife</category>
      </categories>
      <tags>
        <tag>css</tag>
        <tag>ife</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[通过HTML及CSS模拟报纸排版]]></title>
    <url>%2F2017%2F03%2F02%2Fife2017%2F%E9%80%9A%E8%BF%87HTML%E5%8F%8ACSS%E6%A8%A1%E6%8B%9F%E6%8A%A5%E7%BA%B8%E6%8E%92%E7%89%88%2F</url>
    <content type="text"><![CDATA[题目地址 源码https://github.com/Lexokid/ife/blob/master/1-6/index.html demohttps://lexokid.github.io/ife/1-6/index.html 知识点首字母变大加下划线12345678&lt;div class="text"&gt;abcd&lt;/div&gt; &lt;!-- 字母小写 --&gt;&lt;style type="text/css"&gt; .text&#123; font-variant: small-caps; text-transform: capitalize; text-decoration: underline; &#125;&lt;/style&gt; css字体名在css中推荐使用中文字体的英文表示法，以下附常见中文字体的英文名： Mac OS的一些：华文细黑：STHeiti Light [STXihei]华文黑体：STHeiti华文楷体：STKaiti华文宋体：STSong华文仿宋：STFangsong儷黑 Pro：LiHei Pro Medium儷宋 Pro：LiSong Pro Light標楷體：BiauKai蘋果儷中黑：Apple LiGothic Medium蘋果儷細宋：Apple LiSung Light Windows的一些：新細明體：PMingLiU細明體：MingLiU標楷體：DFKai-SB黑体：SimHei宋体：SimSun新宋体：NSimSun仿宋：FangSong楷体：KaiTi仿宋_GB2312：FangSong_GB2312楷体_GB2312：KaiTi_GB2312微軟正黑體：Microsoft JhengHei微软雅黑体：Microsoft YaHei 装Office会生出来的一些：隶书：LiSu幼圆：YouYuan华文细黑：STXihei华文楷体：STKaiti华文宋体：STSong华文中宋：STZhongsong华文仿宋：STFangsong方正舒体：FZShuTi方正姚体：FZYaoti华文彩云：STCaiyun华文琥珀：STHupo华文隶书：STLiti华文行楷：STXingkai华文新魏：STXinwei]]></content>
      <categories>
        <category>ife</category>
      </categories>
      <tags>
        <tag>css</tag>
        <tag>ife</tag>
        <tag>html</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Web的Flex弹性盒模型]]></title>
    <url>%2F2017%2F03%2F01%2Fcss%2Fflexbox%2F</url>
    <content type="text"><![CDATA[h1 { color: #0BF; text-indent: 15px; } h3 { color: #6D7273; text-indent: 15px; padding: 10px 0; background-color: #fff; } p { margin: 0; padding: 0; color: #666; margin-bottom: 5px; } .boxes { padding: 0 10px; /* overflow: hidden; */ display: -webkit-flex; flex-wrap: wrap; align-content: flex-start; } .box { width: 400px; padding: 8px; margin-right: 20px; margin-bottom: 10px; display: inline-block; /*box-shadow: 2px 2px 3px 1px #E0E0E0;*/ box-shadow: 0px 0px 20px 1px #E0E0E0; } .boxstyle { padding: 8px 0; } .boxborder { border: 1px dashed #B6B6B6; } .demo { color: #fff; display: -webkit-flex; text-align: center; } .demo .item { line-height: 40px; background-color: #ddd; } .demo .item:nth-child(1) { background-color: #E46C49; } .demo .item:nth-child(2) { background-color: #37B0D3; } .demo .item:nth-child(3) { background-color: #68B33D; } .demo .item:nth-child(4) { background-color: #E46775; } .demo .item:nth-child(5) { background-color: #CFC731; } .demo .item:nth-child(6) { background-color: #8370F4; } .demo .item span { display: block; } .demo2 .item { height: 60px; width: 150px; word-wrap: break-word; line-height: 1.5; } .demo-row { flex-direction: row; } .demo-row-reverse { flex-direction: row-reverse; } .demo-column { height: 200px; flex-direction: column; } .demo-column-reverse { height: 200px; flex-direction: column-reverse; } .demo-nowrap { -webkit-flex-wrap: nowrap; width: 400px; } .demo-wrap { -webkit-flex-wrap: wrap; width: 400px; } .demo-wrap-reverse { -webkit-flex-wrap: wrap-reverse; width: 400px; } .demo-align-content { width: 400px; flex-wrap: wrap; height: 200px; border: 1px dashed #B6B6B6; } .demo-align-content .item:nth-child(1), .demo-align-content .item:nth-child(2), .demo-align-content .item:nth-child(3), .demo-align-content .item:nth-child(4), .demo-align-content .item:nth-child(5), .demo-align-content .item:nth-child(6) { background-color: #717171; width: 80px; margin: 2px 10px; } Web的Flex弹性盒模型 [ flex ] display: -webkit-flex; width:100px; flex: 2; flex: 1; display: -webkit-flex; width:150px; margin-right:10px; flex: 1; width:150px; margin-left:10px; [ flex-direction ] flex-direction: row; /*default*/ display: -webkit-flex; flex: 1; flex: 2; flex: 3; flex-direction: row-reverse; display: -webkit-flex; flex: 1; flex: 2; flex: 3; flex-direction: column; display: -webkit-flex; flex: 1; flex: 2; flex: 3; flex-direction: column-reverse; display: -webkit-flex; flex: 1; flex: 2; flex: 3; [ flex-wrap ] -webkit-flex-wrap: nowrap; /* default */ display: -webkit-flex; width: 400px 100px; width: 200px; width: 300px; -webkit-flex-wrap: wrap display: -webkit-flex; width: 400px 100px; width: 200px; width: 300px; -webkit-flex-wrap: wrap-reverse display: -webkit-flex; width: 400px 100px; width: 200px; width: 300px; [ flex-flow ]: flex-direction flex-wrap; /* 自个体会吧 */ [ justify-content ] /* 效果如同 float:left; */ justify-content: flex-start; /* default */ display: -webkit-flex; width:100px; width:100px; /* 效果如同 float:right; */ justify-content: flex-end; display: -webkit-flex; width:100px; width:100px; /* 第三代水平居中方案 */ justify-content: center; display: -webkit-flex; width:100px; width:100px; justify-content: space-between; display: -webkit-flex; width:100px; width:100px; justify-content: space-around; display: -webkit-flex; width:100px; width:100px; [ align-self ] display: -webkit-flex; align-self:flex-start; align-self:flex-end; align-self:center; align-self:auto; /*default */ align-self:baseline; align-self:stretch; [ align-items ] align-items: flex-start; /* default */ display: -webkit-flex; width:100px; width:100px; align-items: flex-end; display: -webkit-flex; width:100px; width:100px; /* 第三代垂直居中 */ align-items: center; display: -webkit-flex; width:100px; width:100px; align-items: baseline; display: -webkit-flex; width:100px; width:100px; align-items: stretch; display: -webkit-flex; height:100px; min-height:20px; max-height:60px; [ align-content ] /* 对比 align-items*/ align-items: flex-start display: -webkit-flex; a b c d e f align-content: flex-start; display: -webkit-flex; a b c d e f align-content: flex-end; display: -webkit-flex; a b c d e f align-content: center; display: -webkit-flex; a b c d e f align-content: space-between; display: -webkit-flex; a b c d e f align-content: space-around; display: -webkit-flex; a b c d e f align-content: stretch; /*default*/ display: -webkit-flex; a b c d e f [ order ] display: -webkit-flex; a b c d (order:-1) e f]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
        <tag>flexbox</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[定位和居中]]></title>
    <url>%2F2017%2F02%2F27%2Fife2017%2F%E5%AE%9A%E4%BD%8D%E5%92%8C%E5%B1%85%E4%B8%AD%2F</url>
    <content type="text"><![CDATA[题目地址 源码https://github.com/Lexokid/ife/blob/master/1-4/index.html demohttps://lexokid.github.io/ife/1-4/index.html 知识点 水平内联元素居中(文本等)123.center-children &#123; text-align: center;&#125; 块级元素水平居中123.center-me &#123; margin: 0 auto;&#125; 多个块级元素水平居中1234567891011121314/*1.*/.inline-block-center &#123; text-align: center;&#125;.inline-block-center div &#123; display: inline-block; text-align: left;&#125;/*2.*/.flex-center &#123; display: flex; justify-content: center;&#125; 示例：http://codepen.io/chriscoyier/pen/ebing 垂直内联元素居中(文本等)单行123456789101112/*1.padding-top与padding-bottom相等*/.link &#123; padding-top: 30px; padding-bottom: 30px;&#125;/*2.height与line-height相等*/.center-text-trick &#123; height: 100px; line-height: 100px; white-space: nowrap;&#125; 多行123456789101112131415161718/*1. flexbox 用于包裹的元素上*/flex-center-vertically &#123; display: flex; justify-content: center; flex-direction: column; height: 400px;&#125;/*2.*/.center-table &#123; display: table;&#125;.center-table p &#123; display: table-cell; padding: 20px; vertical-align: middle;&#125; 块级元素居中定高123456789.parent &#123; position: relative;&#125;.child &#123; position: absolute; top: 50%; height: 100px; margin-top: -50px; /* account for padding and border if not using box-sizing: border-box; */&#125; 不定高12345678.parent &#123; position: relative;&#125;.child &#123; position: absolute; top: 50%; transform: translateY(-50%);&#125; flexbox居中12345.parent &#123; display: flex; flex-direction: column; justify-content: center;&#125; 水平垂直元素定宽高123456789101112131415.parent &#123; position: relative;&#125;.child &#123; width: 300px; height: 100px; padding: 20px; position: absolute; top: 50%; left: 50%; margin: -70px 0 0 -170px;&#125; 元素不定宽高123456789.parent &#123; position: relative;&#125;.child &#123; position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);&#125; flexbox居中12345.parent &#123; display: flex; justify-content: center; align-items: center;&#125; 参考资料Centering in CSS: A Complete GuideGet HTML &amp; CSS Tips In Your InboxHTML和CSS高级指南之二——定位详解]]></content>
      <categories>
        <category>ife</category>
      </categories>
      <tags>
        <tag>css</tag>
        <tag>ife</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[三栏式布局]]></title>
    <url>%2F2017%2F02%2F27%2Fife2017%2F%E4%B8%89%E6%A0%8F%E5%BC%8F%E5%B8%83%E5%B1%80%2F</url>
    <content type="text"><![CDATA[题目地址 源码https://github.com/Lexokid/ife/blob/master/1-3/index.html demohttps://lexokid.github.io/ife/1-3/index.html 参考资料：三栏式布局Learn CSS Positioning in Ten Steps清除浮动（clearfix hack）]]></content>
      <categories>
        <category>ife</category>
      </categories>
      <tags>
        <tag>css</tag>
        <tag>ife</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ife2017]]></title>
    <url>%2F2017%2F02%2F27%2Fife2017%2Fife2017%2F</url>
    <content type="text"><![CDATA[三栏式布局定位和居中通过HTML及CSS模拟报纸排版实现常见的技术产品官网的页面架构及样式布局响应式网格 Flexbox 布局练习移动Web页面布局学习CSS3的新特性零基础JavaScript编码基础JavaScript练习JavaScript和树悬浮模糊效果表单听指令的小方块浮出层排序表格自定义checkbox、radio样式自定义网页右键菜单使用CSS实现折叠面板正则表达式之入门CSS3饼状loading效果CSS3实现3D轮播图色彩选择器网页抓取分析服务系列]]></content>
      <categories>
        <category>ife</category>
      </categories>
      <tags>
        <tag>ife</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[git命令]]></title>
    <url>%2F2017%2F02%2F27%2Fgit%2Fgit%E5%91%BD%E4%BB%A4%2F</url>
    <content type="text"><![CDATA[来源阮一峰博客 Workspace：工作区 Index / Stage：暂存区 Repository：仓库区（或本地仓库） Remote：远程仓库 新建代码库12345678# 在当前目录新建一个Git代码库$ git init# 新建一个目录，将其初始化为Git代码库$ git init [project-name]# 下载一个项目和它的整个代码历史$ git clone [url] 配置Git的设置文件为.gitconfig，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。123456789# 显示当前的Git配置$ git config --list# 编辑Git配置文件$ git config -e [--global]# 设置提交代码时的用户信息$ git config [--global] user.name &quot;[name]&quot;$ git config [--global] user.email &quot;[email address]&quot; 增加/删除文件123456789101112131415161718192021# 添加指定文件到暂存区$ git add [file1] [file2] ...# 添加指定目录到暂存区，包括子目录$ git add [dir]# 添加当前目录的所有文件到暂存区$ git add .# 添加每个变化前，都会要求确认# 对于同一个文件的多处变化，可以实现分次提交$ git add -p# 删除工作区文件，并且将这次删除放入暂存区$ git rm [file1] [file2] ...# 停止追踪指定文件，但该文件会保留在工作区$ git rm --cached [file]# 改名文件，并且将这个改名放入暂存区$ git mv [file-original] [file-renamed] 代码提交123456789101112131415161718# 提交暂存区到仓库区$ git commit -m [message]# 提交暂存区的指定文件到仓库区$ git commit [file1] [file2] ... -m [message]# 提交工作区自上次commit之后的变化，直接到仓库区$ git commit -a# 提交时显示所有diff信息$ git commit -v# 使用一次新的commit，替代上一次提交# 如果代码没有任何新变化，则用来改写上一次commit的提交信息$ git commit --amend -m [message]# 重做上一次commit，并包括指定文件的新变化$ git commit --amend [file1] [file2] ... 分支123456789101112131415161718192021222324252627282930313233343536373839404142# 列出所有本地分支$ git branch# 列出所有远程分支$ git branch -r# 列出所有本地分支和远程分支$ git branch -a# 新建一个分支，但依然停留在当前分支$ git branch [branch-name]# 新建一个分支，并切换到该分支$ git checkout -b [branch]# 新建一个分支，指向指定commit$ git branch [branch] [commit]# 新建一个分支，与指定的远程分支建立追踪关系$ git branch --track [branch] [remote-branch]# 切换到指定分支，并更新工作区$ git checkout [branch-name]# 切换到上一个分支$ git checkout -# 建立追踪关系，在现有分支与指定的远程分支之间$ git branch --set-upstream [branch] [remote-branch]# 合并指定分支到当前分支$ git merge [branch]# 选择一个commit，合并进当前分支$ git cherry-pick [commit]# 删除分支$ git branch -d [branch-name]# 删除远程分支$ git push origin --delete [branch-name]$ git branch -dr [remote/branch] 标签1234567891011121314151617181920212223242526# 列出所有tag$ git tag# 新建一个tag在当前commit$ git tag [tag]# 新建一个tag在指定commit$ git tag [tag] [commit]# 删除本地tag$ git tag -d [tag]# 删除远程tag$ git push origin :refs/tags/[tagName]# 查看tag信息$ git show [tag]# 提交指定tag$ git push [remote] [tag]# 提交所有tag$ git push [remote] --tags# 新建一个分支，指向某个tag$ git checkout -b [branch] [tag] 查看信息123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960# 显示有变更的文件$ git status# 显示当前分支的版本历史$ git log# 显示commit历史，以及每次commit发生变更的文件$ git log --stat# 搜索提交历史，根据关键词$ git log -S [keyword]# 显示某个commit之后的所有变动，每个commit占据一行$ git log [tag] HEAD --pretty=format:%s# 显示某个commit之后的所有变动，其&quot;提交说明&quot;必须符合搜索条件$ git log [tag] HEAD --grep feature# 显示某个文件的版本历史，包括文件改名$ git log --follow [file]$ git whatchanged [file]# 显示指定文件相关的每一次diff$ git log -p [file]# 显示过去5次提交$ git log -5 --pretty --oneline# 显示所有提交过的用户，按提交次数排序$ git shortlog -sn# 显示指定文件是什么人在什么时间修改过$ git blame [file]# 显示暂存区和工作区的差异$ git diff# 显示暂存区和上一个commit的差异$ git diff --cached [file]# 显示工作区与当前分支最新commit之间的差异$ git diff HEAD# 显示两次提交之间的差异$ git diff [first-branch]...[second-branch]# 显示今天你写了多少行代码$ git diff --shortstat &quot;@&#123;0 day ago&#125;&quot;# 显示某次提交的元数据和内容变化$ git show [commit]# 显示某次提交发生变化的文件$ git show --name-only [commit]# 显示某次提交时，某个文件的内容$ git show [commit]:[filename]# 显示当前分支的最近几次提交$ git reflog 远程同步1234567891011121314151617181920212223# 下载远程仓库的所有变动$ git fetch [remote]# 显示所有远程仓库$ git remote -v# 显示某个远程仓库的信息$ git remote show [remote]# 增加一个新的远程仓库，并命名$ git remote add [shortname] [url]# 取回远程仓库的变化，并与本地分支合并$ git pull [remote] [branch]# 上传本地指定分支到远程仓库$ git push [remote] [branch]# 强行推送当前分支到远程仓库，即使有冲突$ git push [remote] --force# 推送所有分支到远程仓库$ git push [remote] --all 撤销12345678910111213141516171819202122232425262728293031# 恢复暂存区的指定文件到工作区$ git checkout [file]# 恢复某个commit的指定文件到暂存区和工作区$ git checkout [commit] [file]# 恢复暂存区的所有文件到工作区$ git checkout .# 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变$ git reset [file]# 重置暂存区与工作区，与上一次commit保持一致$ git reset --hard# 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变$ git reset [commit]# 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致$ git reset --hard [commit]# 重置当前HEAD为指定commit，但保持暂存区和工作区不变$ git reset --keep [commit]# 新建一个commit，用来撤销指定commit# 后者的所有变化都将被前者抵消，并且应用到当前分支$ git revert [commit]# 暂时将未提交的变化移除，稍后再移入$ git stash$ git stash pop 其他12# 生成一个可供发布的压缩包$ git archive]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MySql零接触(8)]]></title>
    <url>%2F2017%2F02%2F11%2FMySql%2FMySql%E9%9B%B6%E6%8E%A5%E8%A7%A6(8)%2F</url>
    <content type="text"><![CDATA[自定义函数（UDF）自定义函数：UDF是对MySQL扩展的途径，其用法与内置函数相同。必要条件：返回值（必须），参数（非必须）函数可以返回任意类型的值，同样可以接受这些类型的参数 CREATE FUNCTION function_name(参数)RETURNS (返回值类型){STRING|INTEGER|REAL|DECIMAL}routine_body (函数体，要有RETURN) 函数体：1.函数体由合法的SQL语句构成2.函数体可以是简单的SELECT或INSERT语句3.函数体如果为复合结构则使用BEGIN…END语句4.复合结构可以包含声明，循环，控制结构 删除函数：DROP FUNCTION [IF EXISTS] function_name; 修改结束符：DELEMITER 结束符且当编写函数体内容的时候，需要使用 DELIMITER 关键字将结束符先修改为别的，否则编写语句的时候写到 ‘;’ 的时候会直接执行，导致函数编写失败 例：如果我们要以 X年X月X日 X点:X分:X秒 显示时间每次都需要SELECT DATE_FORMAT(NOW(),&#39;%Y年%m月%d日 %H点:%i分:%s秒&#39;);如果我们写成函数就可以直接调用了1234CREATE FUNCTION f1() RETURNS VARCHAR(30)RETURN DATE_FORMAT(NOW(),'%Y年%m月%d日 %H点:%i分:%s秒');SELECT f1(); 实现往表中插入记录时，返回插入的ID 12345678DELIMITER $$ --先修改结束符CREATE FUNCTION ADD_USER(p_id SMALLINT,username VARCHAR(20))RETURNS INT UNSIGNEDBEGININSERT user(p_id,username) VALUES(p_id,username);RETURN LAST_INSERT_ID();END$$ 存储过程存储过程是SQL语句和控制语句的预编译集合，以一个名称存储并作为一个单元处理（类似函数）。存储过程存储在数据库内，可以由应用程序调用执行，而且允许用户申明变量以及进行流程控制。存储过程可以接受输入类型的参数和输出类型的参数，并且可以存在多个返回值。只在第一次调用时进行语法分析和编译，以后的调用直接调用编译的结果，效率大大提高。 优点：1、增强SQL语句的功能和灵活性：可以通过控制语句对流程进行控制和判断2、实现较快的执行速度：客户端第一次调用存储过程时，MySQL引擎会对其进行语法分析、编译等操作，然后将编译结果存储到内存中，所以第一次和之前的效率一样，然而以后会直接调用内存中的编译结果，效率提高3、减少网络流量：例如删除一个记录，我们原本要输入DELETE FROM xx WHERE …; 要传输的字符较多，如果写成存储过程，就只要调用存储过程的名字和相应参数就行，传输的字符数量较少，所以减少了网络流量。 存储过程语法结构分析：CREATE[DEFINER = {user|CURRENT_USER}]//定义时的用户，若是不写就默认为当前用户PROCEDURE sp_name ([proc_parameter[,…]]) //可以带0到多个参数 sp_name存储过程的名字[characteristic …] routine_body其中参数proc_parameter:[IN|OUT|INOUT] param_name typeIN, 表示该参数的值必须在调用存储过程时指定OUT, 表示该参数的值可以被存储过程改变，并且可以返回INOUT, 表示该参数的值调用时指定，并且可以被改变和返回 特性：COMMENT ‘string’{CONTAINS SQL|NO SQL|READS SQL DATA|MODIFIES SQL DATA|SQL SECURITY{DEFINER|INVOKER}COMMENT:注释CONTAINS SQL:包含SQL语句, 但不包含读或写数据的语句NO SQL:不包含SQL语句READS SQL DATA:包含读数据的语句MODIFIES SQL DATA:包含写数据的语句SQL SECURITY {DEFINER|INVOKER}指明谁有权限来执行 过程体：(1)过程体由合法的SQL语句构成；(2)过程体可以是任意SQL语句;对表格进行增删，连接，但是不能创建数据表(3)过程体如果为复合结构则使用BEGIN…END语句(4)复合结构可以使用条件、循环等控制语句 修改存储过程：不能修改过程体 要修改过程体需删除存储过程，重新创建ALTER PROCEDURE sp_name [characteristic]COMMENT ‘string’|{CONTAINS SQL|NO SQL|READS SQL DATA|MODIFIES SQL DATA}|SQL SECURITY{DEFINER|INVOKER} 删除存储过程：DROP PROCEDURE [IF EXISTS] sp_name;DROP PROCEDUER removeUserById; 1.用户变量：以”@”开始，形式为”@变量名” eg.SET @i=7;用户变量跟mysql客户端是绑定的，设置的变量，只对当前用户使用的客户端生效2.全局变量：定义时，以如下两种形式出现，set GLOBAL 变量名 或者 set @@global.变量名对所有客户端生效。只有具有super权限才可以设置全局变量3.会话变量：只对连接的客户端有效。4.局部变量：作用范围在begin到end语句块之间。在该语句块里设置的变量declare语句专门用于定义局部变量。set语句是设置不同类型的变量，包括会话变量和全局变量 例：创建一个输入id号即可删除记录，并返回删除的记录数和剩余的记录数的存储过程123456789101112DELIMITER $$CREATE PROCEDURE removeUserAndReturnInfos(IN p_id INT UNSIGNED,OUT userNums INT UNSIGNED, OUT delNums SMALLINT UNSIGNED)BEGINDELETE FROM users WHERE id = p_id;SELECT COUNT(id) FROM users INTO userNums;SELECT ROW_COUNT() INTO delNums;--INTO 含义就是将 SELECT 语句结果的表达式（id数量）返回到 userNums 变量中。 将SELECT结果的表达式放入到OUT变量，使用INTOEND$$DELIMITER ;CALL removeUserAndReturnInfos(20, @a, @b);SELELCT @a, @b; 存储过程与自定义函数的区别：1、存储过程实现的功能相对复杂，函数针对性较强2、存储过程可以返回多个值，函数只能有一个返回值3、存储过程一般独立执行，函数可以作为 sql 语句的组成部分来出现另外，存储过程也比通过API接口调用程序要快。]]></content>
      <categories>
        <category>MySql</category>
      </categories>
      <tags>
        <tag>MySql</tag>
        <tag>语法</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MySql零接触(7)]]></title>
    <url>%2F2017%2F02%2F10%2FMySql%2FMySql%E9%9B%B6%E6%8E%A5%E8%A7%A6(7)%2F</url>
    <content type="text"><![CDATA[字符函数CONCAT(char1,char2…) 将括号内的字符进行连接CONCAT_WS(sep,char1,char2…) 将字符进行连接，字符间用sep分开FORMAT(char_num,num) 将char_num进行格式化，保留num位小数，返回字符型结果LOWER(char) 转化成小写字母UPPER(char) 转化成大写字母LEFT(char,num) 获取char中左侧num个字符RIGHT(char,num) 获取char中右侧num个字符LENGTH(char) 返回字符串长度（空格也算在长度内）LTRIM(char) 删除前导空格RTRIM(char) 删除后续空格TRIM(char) 删除前导和后续空格TRIM(LEADING char1 FROM char2) 删除char2中的前导char1TRIM(TRAILING char2 FROM char2) 删除char2中的后续char1TRIM(BOTH char1 FROM char2) 删除char2中的前导和后续char1REPLACE(char1,char2,char3) 将char1中的char2替换成char3。可用空格替换。SUBSTRING(char,num1,num2) 在char中，从num1开始，截取num2个字符串（字符串从1开始）。如果缺省num2，则自num1开始截取到末尾。如果num1&lt;0，则倒取。[NOT] LIKE 模式匹配。%代表任意个字符，_代表任意一个字符。若要查找%或_，可写成LIKE ‘%1%%’ EXCAPE ‘1’; //1后面的不用进行解析 数值运算符与函数CEIL(num) num向上取整FLOOR(num) num向下取整DIV 整数除法，小于1取0MOD 取余数，等价于%POWER(num1,num2) 取num1的num2次方ROUND(num1,num2) 对num1后的num2位小数进行四舍五入TRUNCATE(num1,num2) 对num1后的num2位小数进行截断(不进行四舍五入) 比较运算符与函数1.[NOT] BETWEEN…AND… [不]在范围之内2.[NOT] IN() [不]在列出值范围内3.IS [NOT] NULL [不]为空 1234567SELECT 15 BETWEEND 1 AND 20; --返回1，15在1到20范围内SELECT 15 NOT BETWEEND 1 AND 20; --返回0，15不在1到20之间,条件不成立 返回值是0SELECT 10 IN(5,10,15); --返回1，值是否在给定的数值中,条件成立为1不成立为0SELECT 10 NOT IN(5,10,15); --返回0，数值是否不在给定的数值中,条件成立为1不成立为0SELECT NULL IS NULL; --返回1，空是空 条件成立返回1,不成立返回0SELECT '' IS NULL; --返回0，除了NULL空其它都是非空 返回都是0SELECT * FROM abc WHERE id IS NOT NULL; --查找abc表中id不为NULL的列 日期时间函数NOW() 当前时间 含日期时间CURDATE() 当前日期 只有日期CURTIME() 当前时间 只有时间DATE_ADD() 日期变化（时间增减或减少）DATEDIFF() 日期差值DATE_FORMAT() 日期格式化例：12345678SELECT DATE_ADD('2014-3-12',INTERVAL 365 DAY); -- 2015-3-12 --在原有给定的时间上增加365天--INTERVAL增加可以增加负值 单位 year,month,week,daySELECT DATEDIFF('2014-1-1','2015-1-1') -- -365--时间差值计算 单位为日 前面时间减去后面时间SELECT DATE_FORMAT('2014-3-2','%m/%d/%y'); -- 03/02/2014--日期格式转换 信息函数CONNECTION_ID(); 连接IDSELECT DATABASE(); 当前数据库LAST_INSERT_ID(); 最后插入记录的 ID 号（所查询的数据表必须有一个自动编号的列才能使用这个语句进行查询），如果是一次insert中插入的是多条记录，得到的是多条中的第一条（而不是最后一条！）VERSION(); 版本的信息USER(); 当前用户 聚合函数聚合函数的共同特点：只有一个返回值AVG() 平均值COUNT() 计数MAX() 最大值MIN() 最小值SUM() 求和 加密函数MD5(char) 信息摘要算法，针对web页面的数据库。PASSWORD(char) 密码算法，针对修改当前用户和其他用户的密码。修改客户端密码SET PASSWORD=PASSWORD(‘密码’)。]]></content>
      <categories>
        <category>MySql</category>
      </categories>
      <tags>
        <tag>MySql</tag>
        <tag>语法</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MySql零接触(6)]]></title>
    <url>%2F2017%2F02%2F08%2FMySql%2FMySql%E9%9B%B6%E6%8E%A5%E8%A7%A6(6)%2F</url>
    <content type="text"><![CDATA[子查询子查询是指出现在其他SQL语句内的SELECT子句例如：SELECT * FROM t1 WHERE column1 = (SELECT column2 FROM t2);其中，SELECT * FROM t1 …称为Outer Query[外查询](或者Outer Statement)SELECT column2 FROM t2 称为Sub Query[子查询] 子查询的条件： 1.始终出现在圆括号内 2.可以包含多个关键字或者条件；如 distinct、group by、order by、limit、函数等 （改为大写） 3.子查询的外查询可以是:【SELECT,INSERT,UPDATE,SET或DO】。SQL语句的统称 子查询的返回值：子查询可以返回标量、一行、一列或子查询 使用比较运算符的子查询：=、&gt;、&lt;、&gt;=、&lt;=、&lt;&gt;、!=、&lt;=&gt;语法结构：operand comparision_operator subquery当子查询返回多个结果时，可用ANY、SOME、ALL关键字来修饰子查询WHERE语句中不能使用聚合函数，想使用，需要通过SELECT子查询 例：12345678910111213CREATE TABLE IF NOT EXISTS tdb_goods( goods_id SMALLINT UNSIGNED PRIMARY KEY AUTO_INCREMENT, --商品id goods_name VARCHAR(150) NOT NULL, --商品名 goods_cate VARCHAR(40) NOT NULL, --商品类别 brand_name VARCHAR(40) NOT NULL, --品牌 goods_price DECIMAL(15,3) UNSIGNED NOT NULL DEFAULT 0, --商品价格 is_show BOOLEAN NOT NULL DEFAULT 1, is_saleoff BOOLEAN NOT NULL DEFAULT 0);... --插入数据--查找价格大于平均值的商品SELECT goods_id,goods_name,goods_price FROM tdb_goods WHERE goods_price&gt;=(SELECT ROUND(AVG(goods_price),2) FROM tdb_goods); 连接table_reference {[INNER|CROSS] JOIN|{LEFT|RIGHT}[OUTER]JOIN} table_reference ON conditional_expr连接类型：INNER JOIN,内连接(在MySQL中，JOIN, CROSS JOIN 和 INNER JOIN 是等价的)LEFT [OUTER] JOIN ,左外连接RIGHT [OUTER] JOIN,右外连接连接条件：conditional_expr例如：UPDATE 表1 INNER JOIN 表2 ON 列1 = 列2（两者属性完全相同）SET 列1 = 列3（设置值）。 内连接交集 仅显示A、B两表符合连接条件的记录。不符合连接条件的记录不显示。 外连接：LEFT JOIN左外连接RIGHT JOIN右外连接左外连接：LEFT OUTER JOIN：显示左表的全部记录及右表符合连接条件的记录右外连接：RIGHT OUTER JOIN：显示右表的全部记录及左表符合连接条件的记录如果使用LEFT JOIN,左表中存在一条记录A,在右表中没有找到相应的记录,则在返回结果用会出现一条只有记录A中的相应字段内容,其他字段都为NULL在记录(RIGHT JOIN类似).内连接比外链接用的多一些 以左外连接为例：A LEFT JOIN B join_condition1.数据表B的结果集依赖于数据表A(数据表A中的记录在B表中显示出来，否则B表中的记录不能显示)2.数据表A的结果集根据左连接条件依赖所有数据表(B表除外)3.左外连接条件决定如何检索数据表B(在没有指定WHERE条件的情况下)4.如果数据表A的某条记录符合WHERE条件，但是在数据表B不存在符合连接条件的记录，将生成一个所有列为空的额外的B行 外连接冲突：使用内连接查找的记录在连接数据表中不存在，并且在WHERE子句中尝试一下操作：column_name IS NULL如果 column_name 被指定为 NOT NULL，MySQL将在找到符合连接着条件的记录后停止搜索更多的行（查找冲突） 连接条件：使用ON设定连接条件，也可以用WHERE代替一般情况下使用 ON：设定连接条件 WHERE：进行结果集记录的过滤 多表更新UPDATE table_reference {[INNER|CROSS] JOIN|{LEFT|RIGHT}[OUTER]JOIN} table_reference ON conditional_expr SET col_name1={expr1 | DEFAULT} [,col_name2={expr2 | DEFAULT}]… [WHERE where_condition] 1234567891011-- 创建“商品分类”表CREATE TABLE IF NOT EXISTS tdb_goods_cates( cate_id SMALLINT UNSIGNED PRIMARY KEY AUTO_INCREMENT, cate_name VARCHAR(40) );-- 将分组结果写入到tdb_goods_cates数据表INSERT tdb_goods_cates (cate_name) SELECT goods_cate FROM tdb_goods GROUP BY goods_cate;-- 通过tdb_goods_cates数据表来更新tdb_goods表UPDATE tdb_goods INNER JOIN tdb_goods_cates ON goods_cate = cate_name SET goods_cate = cate_id ; 多表更新之一步到位1.CREATE SELECT创建数据表同时将查询结果写入到数据表CREATE TABLE [IF NOT EXISTS] tbl_name [(create_definition,…)] select_statement; 123456CREATE TABLE tdb_goods_brands(brand_id SMALLINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,brand_name VARCHAR(40) NOT NULL)SELECT brand_name FROM tdb_goods GROUP BY brand_name; 2.两个表建立连接 多表更新根据新建的表tdb_goods_brands修改商品表tdb_goods，把商品表中的brand_name改成tdb_goods_brands中的brand_id 12--两个表都有brand_name,要用 AS关键词给表起别名UPDATE tdb_goods AS g INNER JOIN tdb_goods_brands AS b ON g.brand_name = b.brand_name SET g.brand_name = b.brand_id; 3.但是商品表tdb_goods中仍为 goods_cate VARCHAR, brand_name VARCHAR。我们要把goods_cate 改为 cate_id,把brand_name 改为 brand_id,并把数据类型改为SAMLLINT。既修改列名称又修改数据类型用CHANGE关键字 123ALTER TABLE tdb_goodsCHANGE goods_cate cate_id SMALLINT UNSIGNED NOT NULL,CHANGE brand_name brand_id SMALLINT UNSIGNED NOT NULL; 4.不一定要用物理的外键即FOREIGN KEY 建立联系，也可以使用这种方法 称为事实外键。实际上物理外键使用得少 多表连接表的连接可以说就是外键的一种逆向操作,外键将数据分开来存储,通过连接又将多张表联系在一起例如：123SELECT goods_id,goods_name,cate_name,brand_name,goods_price FROM tdb_goods AS gINNER JOIN tdb_goods_cates AS c ON g.cate_id=c.cate_idINNER JOIN tdb_goods_brands AS b ON g.brand_id=b.brand_id; 自身连接同一个数据表对其自身进行连接 无限级分类表设计： 1.无限分类：即在同一张表中既有父类，又有子类通过在分类表中再增加多一个字段标识其属于哪一个父类的 ID 来实现需通过对同一张数据表的自身连接来进行查询，需要对表标识别名 123456789101112131415161718192021222324252627282930CREATE TABLE tdb_goods_types( type_id SMALLINT UNSIGNED PRIMARY KEY AUTO_INCREMENT, type_name VARCHAR(20) NOT NULL, parent_id SMALLINT UNSIGNED NOT NULL DEFAULT 0);INSERT tdb_goods_types(type_name,parent_id) VALUES('家用电器',DEFAULT);INSERT tdb_goods_types(type_name,parent_id) VALUES('电脑、办公',DEFAULT);INSERT tdb_goods_types(type_name,parent_id) VALUES('大家电',1);INSERT tdb_goods_types(type_name,parent_id) VALUES('生活电器',1);INSERT tdb_goods_types(type_name,parent_id) VALUES('平板电视',3);INSERT tdb_goods_types(type_name,parent_id) VALUES('空调',3);INSERT tdb_goods_types(type_name,parent_id) VALUES('电风扇',4);INSERT tdb_goods_types(type_name,parent_id) VALUES('饮水机',4);INSERT tdb_goods_types(type_name,parent_id) VALUES('电脑整机',2);INSERT tdb_goods_types(type_name,parent_id) VALUES('电脑配件',2);INSERT tdb_goods_types(type_name,parent_id) VALUES('笔记本',9);INSERT tdb_goods_types(type_name,parent_id) VALUES('超级本',9);INSERT tdb_goods_types(type_name,parent_id) VALUES('游戏本',9);INSERT tdb_goods_types(type_name,parent_id) VALUES('CPU',10);INSERT tdb_goods_types(type_name,parent_id) VALUES('主机',10);--查找显示子类对应的一级父类：SELECT p.type_id ,p.type_name,s.type_name FROM tdb_goods_types AS p LEFT JOIN tdb_goods_types AS s ON p.parent_id=s.type_id;--查找父类下的子类:SELECT p.type_id ,p.type_name,s.type_name FROM tdb_goods_types AS p LEFT JOIN tdb_goods_types AS s ON p.type_id=s.parent_id ORDER BY p.type_id;--查找有多少子级:SELECT max(p.type_id) id, p.type_name, count(s.type_name) count_type FROM tdb_goods_types p LEFT JOIN tdb_goods_types s on p.type_id=s.parent_id GROUP BY p.type_name ORDER BY max(p.type_id); 多表删除DELETE tbl_name[.][,tbl_name[.]]… FROM table_references [WHERE where_condition]当表中有相同数据时，可通过多表删除，自身连接来删除重复项。1delete t1 from tdb_goods as t1 inner join (select max(goods_id) as goods_id from tdb_goods group by goods_name having count(goods_id) &gt; 1) as t2 on t1.goods_id = t2.goods_id;]]></content>
      <categories>
        <category>MySql</category>
      </categories>
      <tags>
        <tag>MySql</tag>
        <tag>语法</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MySql零接触(5)]]></title>
    <url>%2F2017%2F02%2F08%2FMySql%2FMySql%E9%9B%B6%E6%8E%A5%E8%A7%A6(5)%2F</url>
    <content type="text"><![CDATA[数据的操作若省略列名称则所有列要依次赋值对于自动编号的字段，插入“NULL”或“DEFAULT”系统将自动依次递增编号对于有默认值的字段，可以插入“DEFAULT”表示使用默认值列值可传入数值、表达式或函数，如密码可以用md5()函数(PHP中的函数 求字符串哈希值函数)(如md5(‘123’))可同时插入多条数据，多条数据括号间用逗号“,”隔开 1.插入数据方法一：INSERT [INTO] tbl_name [(col_name)] {VALUES|VALUE}({expr|DEFAULT},…),(…),…;示例：1INSERT tb1(username,salary) VALUES('Tom',6666.66),('John',1234); 方法二：INSERT [INTO] tbl_name SET col_name={expr|DEFAULT},…;此方法可以使用子查询，一次只能插入一条数据示例：1INSERT tb1 SET username='Ben',salary='1234'; 方法三：INSERT [INTO] tbl_name [(col_name,…)] SELECT …;此方法可以将查询结果插入到指定数据表示例：12INSERT test SELECT username FROM tb1 WHERE age &gt;=30;--新创建的test表只有uname字段，查找tb1表中age大于等于30的username的数据，插入test表 2.更新数据UPDATE [LOW_PRIORITY] [IGNORE] table_reference SET col_name1={expr1|DEFAULT} [,col_name2={expr2|DEFAULT}]… [WHERE where_condition]当缺少WHERE时，所有记录都会更新LOW_PRIORITY：UPDATE的执行被延迟了，直到没有其它的客户端从表中读取为止IGNORE：即使在更新过程中出现错误，更新语句也不会中断12UPDATE tb1 SET salary = 1000, age = age + 5;UPDATE tb1 SET salary = salary + 1000 WHERE age &gt;= 20; 3.删除数据若不添加WHERE则删除全部记录删除后再插入，插入的记录中设置为AUTO_INCREMENT(自动编号)列将从最大值往上加，而是基于原有记录最大编号继续增加DELETE FROM tbl_name [WHERE where_condition];1DELETE FROM tb1 WHERE username = 'Tom'; 查找1.查找数据SELECT select_expr [,select_expr2…] 只查找某一个函数或表达式[FROM table_references 查询表名[WHERE where_conditon] 查询条件[GROUP BY {col_name|position} [ASC|DESC],…] 按某个字段进行分组，相同的只显示第一个[HAVING where_conditon] 分组时，给出显示条件[ORDER BY {col_name|expr|position} [ASC(升序，默认)|DESC(降序)],…] 排序[LIMIT {[offset,]row_count|row_count OFFSET offset}] 限制返回数量]每一个表达式表示想要的一列，必须有至少一个多个列之间以英文逗号分隔，输入列的顺序影响到结果列的顺序可通过tal_name.col_name 来指明是tal_name的col_name列星号(*)表示所有列，tbl_name.*可以表示命名表的所有列查询表达式可以使用[AS] alias_name为其赋予别名，(主要用于不同表的同名列)别名影响到结果别名可用于GROUP BY，ORDER BY或HAVING子句 示例：12345SELECT NOW(); --当前时间SELECT username AS uname, age FROM tb1; --从tb1中查找username(以uname别名显示)和ageSELECT age FROM tb1 GROUP BY age HAVING COUNT(salary)&gt;2; --以age分组，显示salary的个数多于2个的age分组SELECT * FROM tb1 ORDER BY age, salary DESC; --先以age升序排列，在以salary降序排列SELECT * FROM tb1 ORDER BY salary LIMIT 2,3; --从第2条开始(从0开始)，返回3条信息]]></content>
      <categories>
        <category>MySql</category>
      </categories>
      <tags>
        <tag>MySql</tag>
        <tag>语法</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MySql零接触(4)]]></title>
    <url>%2F2017%2F02%2F06%2FMySql%2FMySql%E9%9B%B6%E6%8E%A5%E8%A7%A6(4)%2F</url>
    <content type="text"><![CDATA[约束 约束分为表级约束和列级约束 约束保证数据的完整性和一致性 约束类型包括： NOT NULL(非空约束） PRIMARY KEY（主键约束） UNIQUE(唯一约束) DEFAULT(默认约束) FOREIGN KEY(外键约束) 表级约束与列级约束 对于一个列所创建的约束，称之为列级约束，而对于两个或两个以上的列所创建的约束，我们称之为表级约束 列级约束在使用的时候，既可以在列定义的时候声明，也可以在列定义以后声明 表级的约束只能在列定义以后来声明 在实际开发中，用列级约束比较多，表级约束很少用，除此之外，在所有的约束中，并不是说每种约束都存在着表级或列级约束，其中，NOT NULL 非空约束，DEFAULT约束这两种约束就不存在表级约束，它们只有列级约束，而对于其他的三种，像主键，唯一，外键，它们都可以存在表级和列级约束。 添加\修改约束主键约束 每张数据表只能存在一个主键 主键保证数据的唯一性 主键自动为NOT NULL 1.添加主键约束ALTER TABLE tbl_name ADD [CONSTRAINT [symbol]] PRIMARY KEY [index_type] (index_col_name,…);示例：1ALTER TABLE tb1 ADD CONSTRAINT pk_tb1_username PRIMARY KEY (username); 2.删除主键约束ALTER TABLE tbl_name DROP PRIMARY KEY; 唯一约束 唯一约束可以保证记录的唯一性 唯一约束的字段可以为空值 每张数据表可以存在多个唯一约束 3.添加唯一约束ALTER TABLE tbl_name ADD [CONSTRAINT [symbol]] UNIQUE [INDEX|KEY] [index_name] [index_type] (index_col_name,…);示例：1ALTER TABLE tb1 ADD CONSTRAINT uq_tb1_age UNIQUE (username); 4.删除唯一约束ALTER TABLE tbl_name DROP {INDEX|KEY} index_name;示例：1ALTER TABLE tb1 DROP uq_tb1_age; 外键约束保持数据一致性，完整性实现数据表一对一或一对多关系外键约束的要求：1.父表和子表必须使用相同的存储引擎，而且禁止使用临时表2.数据表的存储引擎只能为InnoDB3.外键列和参照列必须具有相似的数据类型。其中数字的长度或是否有符号位必须相同，而字符的长度则可以不同4.外键列和参照列必须创建索引。如果外键列不存在索引的话，mysql将自动创建索引 外键约束的参照操作 CASCADE 需要在两张表中插入记录，必须先在父表中插入记录再在子表中插入记录因为子表参照的是父表中的信息，若父表中没有则无法参照2、SET NULL：从父表删除或更新行，并设置子表中的外键列为NULL。如果使用该选项，必须保证子列表没有指定NOT NULL。3、RESTRICT：拒绝对父表的删除或更新操作。4、NO ACTION：标准SQL的关键字，在MySQL中与RESTRICT相同。 FOREIGN KEY （子表列名） REFERENCES FROM 父表名（父表列名）[ON DELETE|UPDATE CASCADE|SET NULL|RESTRICT|NO ACTION]; 在实际开发中，存储引擎不为INNODB，无法使用FOREIGN KEY，普遍使用逻辑方法。 5.添加外键约束ALTER TABLE tbl_name ADD [CONSTRAINT [symbol]] FOREIGN KEY [index_name] (index_col_name,…) REFERENCES tbl2_name (col_name);示例：1ALTER TABLE tb1 ADD CONSTRAINT fk_username FOREIGN KEY (username) REFERENCES tb2 (username); 6.删除外键约束ALTER TABLE tbl_name DROP FOREIGN KEY fk_symbol;示例：1ALTER TABLE tb1 DROP FOREIGN KEY fk_username; 默认约束 默认值 当插入数据时，如果没有明确为字段赋值，则自动赋予默认值 7.添加/删除默认约束ALTER TABLE tbl_name ALTER [COLUMN] col_name {SET DEFAULT literal | DROP DEFAULT};示例：1ALTER TABLE tb1 ALTER salary SET DEFAULT 2000;]]></content>
      <categories>
        <category>MySql</category>
      </categories>
      <tags>
        <tag>MySql</tag>
        <tag>语法</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MySql零接触(3)]]></title>
    <url>%2F2017%2F02%2F06%2FMySql%2FMySql%E9%9B%B6%E6%8E%A5%E8%A7%A6(3)%2F</url>
    <content type="text"><![CDATA[数据表操作NULL，字段值可以为空NOT NULL，字段值禁止为空AUTO_INCREMENT，自动编号，必须与主键组合使用，默认情况，起始值为1，每次的增量为1 1.创建数据表CREATE TABLE [IF NOT EXISTS] table_name(column_name(列名称) data_type(列类型)[NOT NULL|NULL],….);示例：12345create TABLE tb1(username VARCHAR(20) NOT NULL,age TINYINT UNSIGNED, --unsigned表示无符号位，即不能为负数salary FLOAT(8,2), UNSIGNED, --有效位数为8位，精度为2，即6位整数，2位小数); 2.添加单列ALTER TABLE tbl_name ADD [COLUMN] col_name column_definitione [FIRST | AFTER col_name];示例：1ALTER TABLE tb1 ADD pwd VARCHAR(30) AFTER username; --没指定FIRST或者AFTER将位于最后 3.添加多列ALTER TABLE tbl_name ADD [COLUMN] (col_name column_definition,…); 4.删除列ALTER TABLE tbl_name DROP col_name,…;示例：1ALTER TABLE tb1 DROP pwd, DROP age; 5.查看数据表结构SHOW COLUMNS FROM table_name;DESC table_name; 6.查看数据表列表SHOW TABLES [FROM db_name] [LIKE ‘pattern’|WHERE expr];示例：1SHOW TABLES FROM mysql; --查看mysql数据库的所有表 7.查看数据库创建时的指令SHOW CREATE TABLE tb_name; 字段的修改1.修改列定义ALTER TABLE tbl_name MODIFY [COLUMN] col_name column_definition [FIRST|AFTER col_name];示例：1ALTER TABLE tb1 MODIFY age SMALLINT UNSIGNED FIRST; 2.修改列名称和定义ALTER TABLE tbl_name CHANGE [COLUMN] old_col_name new_col_name column_definition [FIRST|AFTER col_name];示例：1ALTER TABLE tb1 CHANGE age user_age SMALLINT UNSIGNED FIRST; 3.数据表更名方法1：ALTER TABLE tbl_name RENAME [TO|AS] new_tbl_name;方法2：RENAME TABLE tbl_name TO new_tbl_name[,tbl_name2 TO new_tbl_name2]…;示例：1RENAME TABLE tb1 TO users;]]></content>
      <categories>
        <category>MySql</category>
      </categories>
      <tags>
        <tag>MySql</tag>
        <tag>语法</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MySql零接触(2)]]></title>
    <url>%2F2017%2F02%2F06%2FMySql%2FMySql%E9%9B%B6%E6%8E%A5%E8%A7%A6(2)%2F</url>
    <content type="text"><![CDATA[数据类型数据类型是指列、存储过程参数、表达式和局部变量的数据特征，它决定了数据的存储格式，代表了不同的信息类型 整形 数据类型 存储范围 字节 TINYINT 有符号：-128到127(-27到27-1) 无符号：0到255(0到28-1) 1 SMALLINT 有符号：-32768到32767(-215到215-1) 无符号：0到65535(0到216-1) 2 MEDIUMINT 有符号：-8388608到8388607(-223到223-1) 无符号：0到16777215(0到224-1) 3 INT 有符号：-2147483648到2147483647(-231到231-1) 无符号：0到3294967295(0到232-1) 4 BIGINT 有符号：-9223372036854775808到9223372036854775807(-263到263-1) 无符号 ：0到18446744073709551615(0到264-1) 8 浮点型 数据类型 描述 FLOAT[(M,D)] M是数字总位数，D是小数点后面的位数。如果M和D被省略，根据硬件允许的限制来保存值。单精度浮点数精确到大约7位小数 DOUBLE[(M,D)] M是数字总位数，D是小数点后面的位数。 字符型 列类型 储存需求 CHAR(M) M个字节 0&lt;=M&lt;=255 定长 M是5就5个字节 abc会算成abc00; VARCHAR(M) L+1个字节 L&lt;=M,0&lt;=M&lt;=65535; 变长 abc就是abc; TINYTEXT L+1个字节，L&lt;2的8次方; TEXT L+2个字节，L&lt;2的16次方; MEDIUMTEXT L+3个字节，L&lt;2的24次方; LONGTEXT L+4个字节，L&lt;2的32次方; ENUM(‘value1’,’value2’,…) 1或2字节，取决于枚举值的个数（最多65535个值）; SET(‘value1’,’value2’,…) 1、2、3、4、8字节，取决于set成员个数（最多64个成员）; CHAR 定长:固定长度 即显示的字符没有达到指定长度的时候,显示字符后面自动加空格补齐长度VARCHAR 变长:变化长度 存储的字符是什么,就显示什么,不会自动给空格补齐举例:L+3个字节 其中L&lt;2的24次方 因为计算机是以2进制进行存储 1个字节=8byte 最大的数就是111111,也就是255 所以可以理解为这里的3个字节其实就是2的24次方ENUM 枚举 例如性别 三种选项:男,女,保密SET 集合类型 比如里面有存储有a,b,c 那么可以选择a,b,c,ab,bc,ac,abc table th:first-of-type { width: 120px; } table:nth-of-type(1) th:last-of-type { width: 120px; } table:nth-of-type(3) th:first-of-type { width: 240px; }]]></content>
      <categories>
        <category>MySql</category>
      </categories>
      <tags>
        <tag>MySql</tag>
        <tag>语法</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MySql零接触(1)]]></title>
    <url>%2F2017%2F02%2F06%2FMySql%2FMySql%E9%9B%B6%E6%8E%A5%E8%A7%A6(1)%2F</url>
    <content type="text"><![CDATA[最近学习了与MySQL的零距离接触发现适合初学者，讲得不错，做些笔记方便自己学习 MySQL登录mysql [-u username] [-h host] [-p[password]] [-P port] mysql参数 参数-描述 -D，–database=name 打开指定数据库 -h, –host=name 服务器名称（默认本地服务器127.0.0.1） -p，–password[=name] 密码 -P, –port=# 端口号（默认3306） -u, –user=name 用户名 -V, –version 输出版本信息并且退出 –delimiter=name 指定分隔符 –prompt=name 设置提示符 示例：12mysql -uroot -proot -P3306 -h127.0.0.1--表示超级用户名root,密码root，端口号3306（不输入P默认为3306），主机地址127.0.0.1（若使用本机作为主机，h默认127.0.0.1） MySQL 语句的规范 关键字，函数名称大写 数据库名称，表的名称，字段名称小写 SQL语句以；结尾 数据库操作1.创建数据库创建数据库,并设置其编码方式(如果不设置编码方式,系统将按照默认方式设置编码方式)CREATE ｛DATABASE | SCHEMA｝ [IF NOT EXITSTS] db_name [DEFAULT] CHARACTER SET [=] charset_name;示例：1CREATE DATABASE IF NOT EXISTS db1 CHARACTER SET gbk; 2.查看所有数据库SHOW {DATABASES | SCHEMAS}; 3.查看数据库创建时的指令SHOW CREATE DATABASE db_name; 4.修改数据库编码方式ALTER {DATABASE | SCHEMA} db_name [DEFAULT] CHARACTER SET [=] charset_name;示例：1ALTER DATABASE db1 CHARACTER SET utf8; 5.删除数据库DROP {DATABASE | SCHEMA} [IF EXISTS] db_name;示例：1DROP DATABASE db1; 其他命令1.显示当前服务版本号SELECT VERSION(); 2.显示当前用户SELECT USER(); 3.显示当前日期时间SELECT NOW(); 4.显示当前所在数据库SELECT DATABASE(); MySql的配置选项1.修改编码打开my.ini添加\修改[mysql]default-character-set=utf8 [mysqld]character-set-server=utf8 2.修改数据表的默认存储引擎打开my.ini修改 default-storage-engine=INNODB]]></content>
      <categories>
        <category>MySql</category>
      </categories>
      <tags>
        <tag>MySql</tag>
        <tag>语法</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[正则表达式]]></title>
    <url>%2F2017%2F01%2F28%2F%E6%AD%A3%E5%88%99%2F%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%2F</url>
    <content type="text"><![CDATA[本文以javascript来演示正则表达式 REGEXP对象在javascript中通过对象regexp来使用正则表达式，regexp有两种方法实例化 字面量/表达式/修饰符1var reg = /[A-Za-z]/g; 构造函数RegExp(‘表达式’,修饰符);1var reg = new RegExp('[A-Za-z]',g); 修饰符：g:全文搜索i:忽略大小写m:多行搜索 字符类型普通字符由所有那些未显式指定为元字符的打印和非打印字符组成。这包括所有的大写和小写字母字符，所有数字，所有标点符号以及一些符号。 例如：abc、123 元字符在正则表达式中有特殊意义的非字母字符 例如：\d匹配一个数字字符，而非\d在正则表达式中具体特殊含义的字符：* + ? $ ^ . \ () {} [] 基本语法字符类使用元字符[]和字符来构建的字符类，是泛指，而不是特定的某个字符，表达式可以匹配这类的字符例如:[abc]用来匹配a或b或c，[^abc]用来匹配不是a或b或c的内容 范围类使用-来连接两个字符表示范围类，例如：[a-zA-Z]匹配a到z或A到Z之间的任意字符包涵a,z,A,Z 预定义类正则表达式提供预定义类来匹配常见的字符类预定义类有：.,\d,\D,\s,\S,\w,\W等，见下表例如：ab\d.匹配一个ab+数字+任意字符组成的字符串，等同于ab[0-9][^\n] 边界正则表达式提供了几个常用的边界匹配字符，有：^,$,\b,\B例如：^abc\d匹配以abc开头一个数字结尾的字符串，^在[]内表示取反 量词量词用来表示匹配多少次，有：?,+,*,{n},{n,m},{n,}例如：abc\d{3,5}匹配一个abc+3~5个数字组成的字符串 1.贪婪模式让正则表达式尽可能多的匹配例：如果字符串1234567,则\d{2,5}会匹配字符串12345,他会尽可能多的匹配而不会只匹配12 2.非贪婪模式让正则表达式尽可能少的匹配，在量词后加?即可例：如果字符串1234567,则\d{2,5}?会匹配字符串12、34、56ps:不是很清楚\d{2,3}?与\d{2}有什么区别 分组使用()可以达到分组的功能，使量词作用于分组使用 | 可以达到或的效果例如：(abc\d){2}则会匹配abc+1个数字+abc+1个数字 反向引用正则表达式一个最重要的特性就是将匹配成功的模式的某部分进行存储供以后使用这一能力。对一个正则表达式模式或部分模式两边添加圆括号将导致这部分表达式存储到一个临时缓冲区中。可以使用非捕获元字符‘?:’来忽略对这部分正则表达式的保存。所捕获的每个子匹配都按照在正则表达式模式中从左至右所遇到的内容存储。存储子匹配的缓冲区编号从 1 开始，连续编号直至最大 99 个子表达式。每个缓冲区都可以使用 ‘$n’ 访问，其中 n 为一个标识特定缓冲区的一位或两位十进制数。例如：1234567'world-hello'.replace(/(\w+)-(\w+)/g,'$2-$1');//'hello-world'//第一个分组匹配到world存储到一个临时缓冲区，第二个分组匹配到的hello存储到另一个临时缓冲区,使用$1访问第一个临时缓冲区，$2访问第二个临时缓冲区'world-hello'.replace(/(?:\w+)-(\w+)/g,'$1');//'hello'//使用?:来忽略对这部分正则表达式的保存，第一个分组匹配到的world被忽略，第二个分组匹配到的hello存储到第一个临时缓冲区 前瞻后顾正则表达式从文本头部向尾部开始解析，文本尾部方向为“前”前瞻就是在正则表达式匹配到规则的时候，向前检查是否符合断言，后顾相反JavaScript不支持后顾符合不符合特点的断言称为正向匹配和负向匹配 名称 正则 含义 正向前瞻 exp1(?=exp2) 匹配前面是exp2的exp1 负向前瞻 exp1(?!exp2) 匹配前面不是exp2的exp1 正向后顾 exp1(?&lt;=exp2) 匹配后面是exp2的exp1，JavaScript不支持 负向后顾 exp1(?&lt;!exp2) 匹配后面不是exp2的exp1，JavaScript不支持 ps:文本尾部方向为“前” 例如：1234567'a2b3c4'.replace(/[a-zA-Z](?=3)/g,'X');//a2X3c4//匹配前面是数字3的字母，并替换为'X''ab2c3de'.replace(/[a-zA-Z](?!\d)/g,'X');//Xb2c3XX//匹配前面不是数字的字母，并替换为'X' 正则表达式全符号解释 字符 描述 \ 将下一个字符标记为一个特殊字符、或一个原义字符、或一个 后向引用、或一个八进制转义符。例如，’n’ 匹配字符 “n”。’\n’ 匹配一个换行符。序列 ‘\\‘ 匹配 “\“ 而 “\(“ 则匹配 “(“。 ^ 匹配输入字符串的开始位置。如果设置了 RegExp 对象的 Multiline 属性，^ 也匹配 ‘\n’ 或 ‘\r’ 之后的位置。 $ 匹配输入字符串的结束位置。如果设置了RegExp 对象的 Multiline 属性，$ 也匹配 ‘\n’ 或 ‘\r’ 之前的位置。 * 匹配前面的子表达式零次或多次。例如，zo* 能匹配 “z” 以及 “zoo”。 * 等价于{0,}。 + 匹配前面的子表达式一次或多次。例如，’zo+’ 能匹配 “zo” 以及 “zoo”，但不能匹配 “z”。+ 等价于 {1,}。 ? 匹配前面的子表达式零次或一次。例如，”do(es)?” 可以匹配 “do” 或 “does” 中的”do” 。? 等价于 {0,1}。 {n} n 是一个非负整数。匹配确定的 n 次。例如，’o{2}’ 不能匹配 “Bob” 中的 ‘o’，但是能匹配 “food” 中的两个 o。 {n,} n 是一个非负整数。至少匹配n 次。例如，’o{2,}’ 不能匹配 “Bob” 中的 ‘o’，但能匹配 “foooood” 中的所有 o。’o{1,}’ 等价于 ‘o+’。’o{0,}’ 则等价于 ‘o*’。 {n,m} m 和 n 均为非负整数，其中n &lt;= m。最少匹配 n 次且最多匹配 m 次。刘， “o{1,3}” 将匹配 “fooooood” 中的前三个 o。’o{0,1}’ 等价于 ‘o?’。请注意在逗号和两个数之间不能有空格。 ? 当该字符紧跟在任何一个其他限制符 (*, +, ?, {n}, {n,}, {n,m}) 后面时，匹配模式是非贪婪的。非贪婪模式尽可能少的匹配所搜索的字符串，而默认的贪婪模式则尽可能多的匹配所搜索的字符串。例如，对于字符串 “oooo”，’o+?’ 将匹配单个 “o”，而 ‘o+’ 将匹配所有 ‘o’。 . 匹配除 “\n” 之外的任何单个字符。要匹配包括 ‘\n’ 在内的任何字符，请使用象 ‘[.\n]’ 的模式。 (pattern) 匹配pattern 并获取这一匹配。所获取的匹配可以从产生的 Matches 集合得到，在VBScript 中使用 SubMatches 集合，在JScript 中则使用 $0…$9 属性。要匹配圆括号字符，请使用 ‘(‘ 或 ‘)‘。 (?:pattern) 匹配 pattern 但不获取匹配结果，也就是说这是一个非获取匹配，不进行存储供以后使用。这在使用 “或” 字符 (&#124;) 来组合一个模式的各个部分是很有用。例如， ‘industr(?:y&#124;ies) 就是一个比 ‘industry&#124;industries’ 更简略的表达式。 (?=pattern) 正向预查，在任何匹配 pattern 的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如， ‘Windows (?=95&#124;98&#124;NT&#124;2000)’ 能匹配 “Windows 2000” 中的 “Windows” ，但不能匹配 “Windows 3.1” 中的 “Windows”。预查不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始。 (?!pattern) 负向预查，在任何不匹配Negative lookahead matches the search string at any point where a string not matching pattern 的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如’Windows (?!95&#124;98&#124;NT&#124;2000)’ 能匹配 “Windows 3.1” 中的 “Windows”，但不能匹配 “Windows 2000” 中的 “Windows”。预查不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始。 x&#124;y 匹配 x 或 y。例如，’z&#124;food’ 能匹配 “z” 或 “food”。’(z&#124;f)ood’ 则匹配 “zood” 或 “food”。 [xyz] 字符集合。匹配所包含的任意一个字符。例如， ‘[abc]’ 可以匹配 “plain” 中的 ‘a’。 [^xyz] 负值字符集合。匹配未包含的任意字符。例如， ‘[^abc]’ 可以匹配 “plain” 中的’p’。 [a-z] 字符范围。匹配指定范围内的任意字符。例如，’[a-z]’ 可以匹配 ‘a’ 到 ‘z’ 范围内的任意小写字母字符。 [^a-z] 负值字符范围。匹配任何不在指定范围内的任意字符。例如，’[^a-z]’ 可以匹配任何不在 ‘a’ 到 ‘z’ 范围内的任意字符。 \b 匹配一个单词边界，也就是指单词和空格间的位置。例如， ‘er\b’ 可以匹配”never” 中的 ‘er’，但不能匹配 “verb” 中的 ‘er’。 \B 匹配非单词边界。’er\B’ 能匹配 “verb” 中的 ‘er’，但不能匹配 “never” 中的 ‘er’。 \cx 匹配由x指明的控制字符。例如， \cM 匹配一个 Control-M 或回车符。 x 的值必须为 A-Z 或 a-z 之一。否则，将 c 视为一个原义的 ‘c’ 字符。 \d 匹配一个数字字符。等价于 [0-9]。 \D 匹配一个非数字字符。等价于 [^0-9]。 \f 匹配一个换页符。等价于 \x0c 和 \cL。 \n 匹配一个换行符。等价于 \x0a 和 \cJ。 \r 匹配一个回车符。等价于 \x0d 和 \cM。 \s 匹配任何空白字符，包括空格、制表符、换页符等等。等价于 [ \f\n\r\t\v]。 \S 匹配任何非空白字符。等价于 [^ \f\n\r\t\v]。 \t 匹配一个制表符。等价于 \x09 和 \cI。 \v 匹配一个垂直制表符。等价于 \x0b 和 \cK。 \w 匹配包括下划线的任何单词字符。等价于’[A-Za-z0-9_]’。 \W 匹配任何非单词字符。等价于 ‘[^A-Za-z0-9_]’。 \xn 匹配 n，其中 n 为十六进制转义值。十六进制转义值必须为确定的两个数字长。例如， ‘\x41’ 匹配 “A”。’\x041’ 则等价于 ‘\x04’ &amp; “1”。正则表达式中可以使用 ASCII 编码。 \num 匹配 num，其中 num 是一个正整数。对所获取的匹配的引用。例如，’(.)\1’ 匹配两个连续的相同字符。 \n 标识一个八进制转义值或一个后向引用。如果 \n 之前至少 n 个获取的子表达式，则 n 为后向引用。否则，如果 n 为八进制数字 (0-7)，则 n 为一个八进制转义值。 \nm 标识一个八进制转义值或一个后向引用。如果 \nm 之前至少有is preceded by at least nm 个获取得子表达式，则 nm 为后向引用。如果 \nm 之前至少有 n 个获取，则 n 为一个后跟文字 m 的后向引用。如果前面的条件都不满足，若 n 和 m 均为八进制数字 (0-7)，则 \nm 将匹配八进制转义值 nm。 \nml 如果 n 为八进制数字 (0-3)，且 m 和 l 均为八进制数字 (0-7)，则匹配八进制转义值 nml。 \un 匹配 n，其中 n 是一个用四个十六进制数字表示的 Unicode 字符。例如， \u00A9 匹配版权符号 (?)。 table th:first-of-type { width: 80px; } table:nth-of-type(1) th:nth-of-type(2) { width: 120px; } table:nth-of-type(2) td:first-of-type { font-weight: 900; } 参考资料正则表达式可视化]]></content>
      <categories>
        <category>正则表达式</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>正则表达式</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MarkDown代码块支持的语言]]></title>
    <url>%2F2017%2F01%2F20%2FMarkDown%2FMarkDown%E4%BB%A3%E7%A0%81%E5%9D%97%E6%94%AF%E6%8C%81%E7%9A%84%E8%AF%AD%E8%A8%80%2F</url>
    <content type="text"><![CDATA[名称 关键字 AppleScript applescript ActionScript 3.0 actionscript3 , as3 Shell bash , shell ColdFusion coldfusion , cf C cpp , c C# c# , c-sharp , csharp CSS css Delphi delphi , pascal , pas diff&amp;patch diff patch Erlang erl , erlang Groovy groovy HTML html Java java JavaFX jfx , javafx JavaScript js , jscript , javascript Perl perl , pl , Perl PHP php text text , plain Python py , python Ruby ruby , rails , ror , rb SASS&amp;SCSS sass , scss Scala scala SQL sql Visual Basic vb , vbnet XML xml , xhtml , xslt , html Objective C objc , obj-c F# f# f-sharp , fsharp R r , s , splus matlab matlab swift swift GO go , golang]]></content>
      <categories>
        <category>MarkDown</category>
      </categories>
      <tags>
        <tag>MarkDown</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[typeof和instanceof]]></title>
    <url>%2F2017%2F01%2F14%2FJavaScript%2Ftypeof%E5%92%8Cinstanceof%2F</url>
    <content type="text"><![CDATA[typeof和instanceof如果要对一个值进行分类，你就不得不区分JavaScript中的原始值和对象 typeof运算符能区分原始值和对象，并检测出原始值的类型 instanceof运算符可以检测一个对象是否是特定构造函数的一个实例 typeoftypeof运算符用法：1234typeof undefined; //'undefined'typeof 'abc'; //'string'typeof &#123;&#125;; //'object'typeof []; //'object' 返回一个字符串，会描述值的类型是什么 运算数 结果 undefined ‘undefined’ null ‘null’ 布尔值 ‘boolean’ 数字 ‘number’ 字符串 ‘string’ 函数 ‘function’ 所有其他常规属性 ‘object’ 注意：typeof null返回object是一个不能去修正的bug，因为这会破坏现有的代码。判断一个值是否是对象可以用下面这个函数： 12345function isObject(value)&#123; return (value !== null &amp;&amp; (typeof value === 'object' || typeof value === 'function'));&#125; instanceof判断value是由构造函数Constr还是子构造函数创建的，所以它是检测Constr.prototype是否在value的原型链上。因此，下两个表达式是等价的：value instanceof ConstrConstr.prototype.isPrototypeOf(value) instanceof运算符用法：123456789101112&#123;&#125; instanceof Object; //true[] instanceof Array; //true[] instanceof Object; //trueundefined instanceof Object; //falsenull instanceof Object; //falsenew Date() instanceof Date; //truenew Date() instanceof Object; //true'abc' instanceof String; //false123 instanceof Number; //false instanceof对原始值总是false如果instanceof的右边不是函数，则会抛出异常[] instanceof 123; //TypeError: Expecting a function in instanceof check 注意：几乎所有的对象都是Object的实例，因为Object.prototype在这些对象的原型链上。但也有个别对象不属于这种情况，如：12Object.create(null) instanceof Object; //falseObject.prototype instanceof Object; //false 是因为这些是没有原型的对象：12Object.getPrototypeOf(Object.create(null)); //nullObject.getPrototypeOf(Object.prototype); //null 但typeof可以正确的把这些归类为对象：12typeof Object.create(null); //'Object'typeof Object.prototype; //'Object']]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[原始值和对象]]></title>
    <url>%2F2017%2F01%2F13%2FJavaScript%2F%E5%8E%9F%E5%A7%8B%E5%80%BC%E5%92%8C%E5%AF%B9%E8%B1%A1%2F</url>
    <content type="text"><![CDATA[原始值和对象在阅读深入理解JavaScript中发现值可以分为两类：原始值和对象 原始值包括布尔值、数字、字符串、null和undefined 其他的值都是对象 两者之间最主要的区别在于它们的比较方式：每个对象都有唯一的标识且（严格的）等于自己：1234var obj1 = &#123;&#125;;var obj2 = &#123;&#125;;obj1 === obj2; //falseobj1 === obj1; //true 相反，所有原始值只要编码值相同，则被认为相等：123var prim1 = 123;var prim2 = 123;prim1 === prim2; //true 原始值原始值包括布尔值、数字、字符串、null和undefined原始值具有以下特点： 按值比较 123 === 3; //true'abc' === 'abc'; //true 不可改变其属性不能被改变、添加和删除 1234567var str = 'abc';str.length = 1;str.length; //3str.foo = 3;str.foo; //undefined//读取未知属性时，总会返回undefined 对象所有非原始值都是对象对象具有以下特点： 按引用进行比较比较身份标识：每个值都有各自的身份标识 12345&#123;&#125; === &#123;&#125;; //falsevar obj1 = &#123;&#125;;var obj2 = obj1;obj1 === obj2; //true 默认可变对象属性可以被改变、添加和删除 123var obj = &#123;&#125;;obj.foo = 123;obj.foo; //123]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2016%2F11%2F04%2Fessay%2FHello%20World%2F</url>
    <content type="text"><![CDATA[在2016年11月4日，我终于开通了博客，用来记录自己学习的点点滴滴和监督自己，会更新一些自己学习到的内容和总结。总之开始了我的博客之路。]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
</search>
