<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[正则表达式]]></title>
      <url>%2F2017%2F01%2F28%2F%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%2F</url>
      <content type="text"><![CDATA[table th:first-of-type { width: 80px; } table:nth-of-type(1) th:nth-of-type(2) { width: 120px; } table:nth-of-type(2) td:first-of-type { font-weight: 900; } 本文以javascript来演示正则表达式 REGEXP对象在javascript中通过对象regexp来使用正则表达式，regexp有两种方法实例化 字面量/表达式/修饰符1var reg = /[A-Za-z]/g; 构造函数RegExp(‘表达式’,修饰符);1var reg = new RegExp('[A-Za-z]',g); 修饰符：g:全文搜索i:忽略大小写m:多行搜索 字符类型普通字符由所有那些未显式指定为元字符的打印和非打印字符组成。这包括所有的大写和小写字母字符，所有数字，所有标点符号以及一些符号。 例如：abc、123 元字符在正则表达式中有特殊意义的非字母字符 例如：\d匹配一个数字字符，而非\d在正则表达式中具体特殊含义的字符：* + ? $ ^ . \ () {} [] 基本语法字符类使用元字符[]和字符来构建的字符类，是泛指，而不是特定的某个字符，表达式可以匹配这类的字符例如:[abc]用来匹配a或b或c，[^abc]用来匹配不是a或b或c的内容 范围类使用-来连接两个字符表示范围类，例如：[a-zA-Z]匹配a到z或A到Z之间的任意字符包涵a,z,A,Z 预定义类正则表达式提供预定义类来匹配常见的字符类预定义类有：.,\d,\D,\s,\S,\w,\W等，见下表例如：ab\d.匹配一个ab+数字+任意字符组成的字符串，等同于ab[0-9][^\n] 边界正则表达式提供了几个常用的边界匹配字符，有：^,$,\b,\B例如：^abc\d匹配以abc开头一个数字结尾的字符串，^在[]内表示取反 量词量词用来表示匹配多少次，有：?,+,*,{n},{n,m},{n,}例如：abc\d{3,5}匹配一个abc+3~5个数字组成的字符串 1.贪婪模式让正则表达式尽可能多的匹配例：如果字符串1234567,则\d{2,5}会匹配字符串12345,他会尽可能多的匹配而不会只匹配12 2.非贪婪模式让正则表达式尽可能少的匹配，在量词后加?即可例：如果字符串1234567,则\d{2,5}?会匹配字符串12、34、56ps:不是很清楚\d{2,3}?与\d{2}有什么区别 分组使用()可以达到分组的功能，使量词作用于分组使用 | 可以达到或的效果例如：(abc\d){2}则会匹配abc+1个数字+abc+1个数字 反向引用正则表达式一个最重要的特性就是将匹配成功的模式的某部分进行存储供以后使用这一能力。对一个正则表达式模式或部分模式两边添加圆括号将导致这部分表达式存储到一个临时缓冲区中。可以使用非捕获元字符‘?:’来忽略对这部分正则表达式的保存。所捕获的每个子匹配都按照在正则表达式模式中从左至右所遇到的内容存储。存储子匹配的缓冲区编号从 1 开始，连续编号直至最大 99 个子表达式。每个缓冲区都可以使用 ‘$n’ 访问，其中 n 为一个标识特定缓冲区的一位或两位十进制数。例如：1234567'world-hello'.replace(/(\w+)-(\w+)/g,'$2-$1');//'hello-world'//第一个分组匹配到world存储到一个临时缓冲区，第二个分组匹配到的hello存储到另一个临时缓冲区,使用$1访问第一个临时缓冲区，$2访问第二个临时缓冲区'world-hello'.replace(/(?:\w+)-(\w+)/g,'$1');//'hello'//使用?:来忽略对这部分正则表达式的保存，第一个分组匹配到的world被忽略，第二个分组匹配到的hello存储到第一个临时缓冲区 前瞻后顾正则表达式从文本头部向尾部开始解析，文本尾部方向为“前”前瞻就是在正则表达式匹配到规则的时候，向前检查是否符合断言，后顾相反JavaScript不支持后顾符合不符合特点的断言称为正向匹配和负向匹配 名称 正则 含义 正向前瞻 exp1(?=exp2) 匹配前面是exp2的exp1 负向前瞻 exp1(?!exp2) 匹配前面不是exp2的exp1 正向后顾 exp1(?&lt;=exp2) 匹配后面是exp2的exp1，JavaScript不支持 负向后顾 exp1(?&lt;!exp2) 匹配后面不是exp2的exp1，JavaScript不支持 ps:文本尾部方向为“前” 例如：1234567'a2b3c4'.replace(/[a-zA-Z](?=3)/g,'X');//a2X3c4//匹配前面是数字3的字母，并替换为'X''ab2c3de'.replace(/[a-zA-Z](?!\d)/g,'X');//Xb2c3XX//匹配前面不是数字的字母，并替换为'X' 正则表达式全符号解释 字符 描述 \ 将下一个字符标记为一个特殊字符、或一个原义字符、或一个 后向引用、或一个八进制转义符。例如，’n’ 匹配字符 “n”。’\n’ 匹配一个换行符。序列 ‘\\‘ 匹配 “\“ 而 “\(“ 则匹配 “(“。 ^ 匹配输入字符串的开始位置。如果设置了 RegExp 对象的 Multiline 属性，^ 也匹配 ‘\n’ 或 ‘\r’ 之后的位置。 $ 匹配输入字符串的结束位置。如果设置了RegExp 对象的 Multiline 属性，$ 也匹配 ‘\n’ 或 ‘\r’ 之前的位置。 * 匹配前面的子表达式零次或多次。例如，zo* 能匹配 “z” 以及 “zoo”。 * 等价于{0,}。 + 匹配前面的子表达式一次或多次。例如，’zo+’ 能匹配 “zo” 以及 “zoo”，但不能匹配 “z”。+ 等价于 {1,}。 ? 匹配前面的子表达式零次或一次。例如，”do(es)?” 可以匹配 “do” 或 “does” 中的”do” 。? 等价于 {0,1}。 {n} n 是一个非负整数。匹配确定的 n 次。例如，’o{2}’ 不能匹配 “Bob” 中的 ‘o’，但是能匹配 “food” 中的两个 o。 {n,} n 是一个非负整数。至少匹配n 次。例如，’o{2,}’ 不能匹配 “Bob” 中的 ‘o’，但能匹配 “foooood” 中的所有 o。’o{1,}’ 等价于 ‘o+’。’o{0,}’ 则等价于 ‘o*’。 {n,m} m 和 n 均为非负整数，其中n &lt;= m。最少匹配 n 次且最多匹配 m 次。刘， “o{1,3}” 将匹配 “fooooood” 中的前三个 o。’o{0,1}’ 等价于 ‘o?’。请注意在逗号和两个数之间不能有空格。 ? 当该字符紧跟在任何一个其他限制符 (*, +, ?, {n}, {n,}, {n,m}) 后面时，匹配模式是非贪婪的。非贪婪模式尽可能少的匹配所搜索的字符串，而默认的贪婪模式则尽可能多的匹配所搜索的字符串。例如，对于字符串 “oooo”，’o+?’ 将匹配单个 “o”，而 ‘o+’ 将匹配所有 ‘o’。 . 匹配除 “\n” 之外的任何单个字符。要匹配包括 ‘\n’ 在内的任何字符，请使用象 ‘[.\n]’ 的模式。 (pattern) 匹配pattern 并获取这一匹配。所获取的匹配可以从产生的 Matches 集合得到，在VBScript 中使用 SubMatches 集合，在JScript 中则使用 $0…$9 属性。要匹配圆括号字符，请使用 ‘(‘ 或 ‘)‘。 (?:pattern) 匹配 pattern 但不获取匹配结果，也就是说这是一个非获取匹配，不进行存储供以后使用。这在使用 “或” 字符 (&#124;) 来组合一个模式的各个部分是很有用。例如， ‘industr(?:y&#124;ies) 就是一个比 ‘industry&#124;industries’ 更简略的表达式。 (?=pattern) 正向预查，在任何匹配 pattern 的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如， ‘Windows (?=95&#124;98&#124;NT&#124;2000)’ 能匹配 “Windows 2000” 中的 “Windows” ，但不能匹配 “Windows 3.1” 中的 “Windows”。预查不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始。 (?!pattern) 负向预查，在任何不匹配Negative lookahead matches the search string at any point where a string not matching pattern 的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如’Windows (?!95&#124;98&#124;NT&#124;2000)’ 能匹配 “Windows 3.1” 中的 “Windows”，但不能匹配 “Windows 2000” 中的 “Windows”。预查不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始。 x&#124;y 匹配 x 或 y。例如，’z&#124;food’ 能匹配 “z” 或 “food”。’(z&#124;f)ood’ 则匹配 “zood” 或 “food”。 [xyz] 字符集合。匹配所包含的任意一个字符。例如， ‘[abc]’ 可以匹配 “plain” 中的 ‘a’。 [^xyz] 负值字符集合。匹配未包含的任意字符。例如， ‘[^abc]’ 可以匹配 “plain” 中的’p’。 [a-z] 字符范围。匹配指定范围内的任意字符。例如，’[a-z]’ 可以匹配 ‘a’ 到 ‘z’ 范围内的任意小写字母字符。 [^a-z] 负值字符范围。匹配任何不在指定范围内的任意字符。例如，’[^a-z]’ 可以匹配任何不在 ‘a’ 到 ‘z’ 范围内的任意字符。 \b 匹配一个单词边界，也就是指单词和空格间的位置。例如， ‘er\b’ 可以匹配”never” 中的 ‘er’，但不能匹配 “verb” 中的 ‘er’。 \B 匹配非单词边界。’er\B’ 能匹配 “verb” 中的 ‘er’，但不能匹配 “never” 中的 ‘er’。 \cx 匹配由x指明的控制字符。例如， \cM 匹配一个 Control-M 或回车符。 x 的值必须为 A-Z 或 a-z 之一。否则，将 c 视为一个原义的 ‘c’ 字符。 \d 匹配一个数字字符。等价于 [0-9]。 \D 匹配一个非数字字符。等价于 [^0-9]。 \f 匹配一个换页符。等价于 \x0c 和 \cL。 \n 匹配一个换行符。等价于 \x0a 和 \cJ。 \r 匹配一个回车符。等价于 \x0d 和 \cM。 \s 匹配任何空白字符，包括空格、制表符、换页符等等。等价于 [ \f\n\r\t\v]。 \S 匹配任何非空白字符。等价于 [^ \f\n\r\t\v]。 \t 匹配一个制表符。等价于 \x09 和 \cI。 \v 匹配一个垂直制表符。等价于 \x0b 和 \cK。 \w 匹配包括下划线的任何单词字符。等价于’[A-Za-z0-9_]’。 \W 匹配任何非单词字符。等价于 ‘[^A-Za-z0-9_]’。 \xn 匹配 n，其中 n 为十六进制转义值。十六进制转义值必须为确定的两个数字长。例如， ‘\x41’ 匹配 “A”。’\x041’ 则等价于 ‘\x04’ &amp; “1”。正则表达式中可以使用 ASCII 编码。 \num 匹配 num，其中 num 是一个正整数。对所获取的匹配的引用。例如，’(.)\1’ 匹配两个连续的相同字符。 \n 标识一个八进制转义值或一个后向引用。如果 \n 之前至少 n 个获取的子表达式，则 n 为后向引用。否则，如果 n 为八进制数字 (0-7)，则 n 为一个八进制转义值。 \nm 标识一个八进制转义值或一个后向引用。如果 \nm 之前至少有is preceded by at least nm 个获取得子表达式，则 nm 为后向引用。如果 \nm 之前至少有 n 个获取，则 n 为一个后跟文字 m 的后向引用。如果前面的条件都不满足，若 n 和 m 均为八进制数字 (0-7)，则 \nm 将匹配八进制转义值 nm。 \nml 如果 n 为八进制数字 (0-3)，且 m 和 l 均为八进制数字 (0-7)，则匹配八进制转义值 nml。 \un 匹配 n，其中 n 是一个用四个十六进制数字表示的 Unicode 字符。例如， \u00A9 匹配版权符号 (?)。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[MarkDown代码块支持的语言]]></title>
      <url>%2F2017%2F01%2F20%2FMarkDown%E4%BB%A3%E7%A0%81%E5%9D%97%E6%94%AF%E6%8C%81%E7%9A%84%E8%AF%AD%E8%A8%80%2F</url>
      <content type="text"><![CDATA[名称 关键字 AppleScript applescript ActionScript 3.0 actionscript3 , as3 Shell bash , shell ColdFusion coldfusion , cf C cpp , c C# c# , c-sharp , csharp CSS css Delphi delphi , pascal , pas diff&amp;patch diff patch Erlang erl , erlang Groovy groovy Java java JavaFX jfx , javafx JavaScript js , jscript , javascript Perl perl , pl , Perl PHP php text text , plain Python py , python Ruby ruby , rails , ror , rb SASS&amp;SCSS sass , scss Scala scala SQL sql Visual Basic vb , vbnet XML xml , xhtml , xslt , html Objective C objc , obj-c F# f# f-sharp , fsharp R r , s , splus matlab matlab swift swift GO go , golang]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[MySql基本命令]]></title>
      <url>%2F2017%2F01%2F20%2Fmysql%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4%2F</url>
      <content type="text"><![CDATA[MySQL登录mysql [-u username] [-h host] [-p[password]] [-P port] mysql参数 参数-描述 -D，–database=name 打开指定数据库 -h, –host=name 服务器名称（默认本地服务器127.0.0.1） -p，–password[=name] 密码 -P, –port=# 端口号（默认3306） -u, –user=name 用户名 -V, –version 输出版本信息并且退出 –delimiter=name 指定分隔符 –prompt=name 设置提示符 示例：12mysql -uroot -proot -P3306 -h127.0.0.1--表示超级用户名root,密码root，端口号3306（不输入P默认为3306），主机地址127.0.0.1（若使用本机作为主机，h默认127.0.0.1） 数据库操作1.创建数据库创建数据库,并设置其编码方式(如果不设置编码方式,系统将按照默认方式设置编码方式)CREATE ｛DATABASE | SCHEMA｝ [IF NOT EXITSTS] db_name [DEFAULT] CHARACTER SET [=] charset_name;示例：1CREATE DATABASE IF NOT EXISTS db1 CHARACTER SET gbk; 2.查看所有数据库SHOW {DATABASES | SCHEMAS}; 3.查看数据库创建时的指令SHOW CREATE DATABASE db_name; 4.修改数据库编码方式ALTER {DATABASE | SCHEMA} db_name [DEFAULT] CHARACTER SET [=] charset_name;示例：1ALTER DATABASE db1 CHARACTER SET utf8; 5.删除数据库DROP {DATABASE | SCHEMA} [IF EXISTS] db_name;示例：1DROP DATABASE db1; 6.打开数据库USE db_name; 7.查看警告信息SHOW WARNINGS; 数据表操作1.创建数据表CREATE TABLE [IF NOT EXISTS] table_name(column_name(列名称) data_type(列类型)[NOT NULL|NULL],….);示例：12345create TABLE tb1(username VARCHAR(20) NOT NULL,age TINYINT UNSIGNED, --unsigned表示无符号位，即不能为负数salary FLOAT(8,2), UNSIGNED, --有效位数为8位，精度为2，即6位整数，2位小数); 2.添加单列ALTER TABLE tbl_name ADD [COLUMN] col_name column_definitione [FIRST | AFTER col_name];示例：1ALTER TABLE tb1 ADD pwd VARCHAR(30) AFTER username; --没指定FIRST或者AFTER将位于最后 3.添加多列ALTER TABLE tbl_name ADD [COLUMN] (col_name column_definition,…); 4.删除列ALTER TABLE tbl_name DROP col_name,…;示例：1ALTER TABLE tb1 DROP pwd, DROP age; 5.查看数据表结构SHOW COLUMNS FROM table_name; 6.查看数据表列表SHOW TABLES [FROM db_name] [LIKE ‘pattern’|WHERE expr];示例：1SHOW TABLES FROM mysql; --查看mysql数据库的所有表 修改约束1.添加主键约束ALTER TABLE tbl_name ADD [CONSTRAINT [symbol]] PRIMARY KEY [index_type] (index_col_name,…);示例：1ALTER TABLE tb1 ADD CONSTRAINT pk_tb1_username PRIMARY KEY (username); 2.删除主键约束ALTER TABLE tbl_name DROP PRIMARY KEY; 3.添加唯一约束ALTER TABLE tbl_name ADD [CONSTRAINT [symbol]] UNIQUE [INDEX|KEY] [index_name] [index_type] (index_col_name,…);示例：1ALTER TABLE tb1 ADD CONSTRAINT uq_tb1_age UNIQUE (username); 4.删除唯一约束ALTER TABLE tbl_name DROP {INDEX|KEY} index_name;示例：1ALTER TABLE tb1 DROP uq_tb1_age; 5.添加外键约束ALTER TABLE tbl_name ADD [CONSTRAINT [symbol]] FOREIGN KEY [index_name] (index_col_name,…) REFERENCES tbl2_name (col_name);示例：1ALTER TABLE tb1 ADD CONSTRAINT fk_username FOREIGN KEY (username) REFERENCES tb2 (username); 6.删除外键约束ALTER TABLE tbl_name DROP FOREIGN KEY fk_symbol;示例：1ALTER TABLE tb1 DROP FOREIGN KEY fk_username; 7.添加/删除默认约束ALTER TABLE tbl_name ALTER [COLUMN] col_name {SET DEFAULT literal | DROP DEFAULT};示例：1ALTER TABLE tb1 ALTER salary SET DEFAULT 2000; 字段的修改1.修改列定义ALTER TABLE tbl_name MODIFY [COLUMN] col_name column_definition [FIRST|AFTER col_name];示例：1ALTER TABLE tb1 MODIFY age SMALLINT UNSIGNED FIRST; 2.修改列名称ALTER TABLE tbl_name CHANGE [COLUMN] old_col_name new_col_name column_definition [FIRST|AFTER col_name];示例：1ALTER TABLE tb1 CHANGE age user_age SMALLINT UNSIGNED FIRST; 3.数据表更名方法1：ALTER TABLE tbl_name RENAME [TO|AS] new_tbl_name;方法2：RENAME TABLE tbl_name TO new_tbl_name[,tbl_name2 TO new_tbl_name2]…;示例：1RENAME TABLE tb1 TO users; 数据的操作1.插入数据方法一：INSERT [INTO] tbl_name [(col_name)] {VALUES|VALUE}({expr|DEFAULT},…),(…),…;示例：1INSERT tb1(username,salary) VALUES('Tom',6666.66),('John',1234); 方法二：INSERT [INTO] tbl_name SET col_name={expr|DEFAULT},…;此方法可以使用子查询示例：1INSERT tb1 SET username='Ben',salary='1234'; 方法三：INSERT [INTO] tbl_name [(col_name,…)] SELECT …;此方法可以将查询结果插入到指定数据表 2.更改数据UPDATE [LOW_PRIORITY] [IGNORE] table_reference SET col_name1={expr1|DEFAULT} [,col_name2={expr2|DEFAULT}]… [WHERE where_condition]12UPDATE tb1 SET salary = 1000, age = age + 5;UPDATE tb1 SET salary = salary + 1000 WHERE age &gt;= 20; 3.删除数据DELETE FROM tbl_name [WHERE where_condition];1DELETE FROM tb1 WHERE username = 'Tom'; 查找1.查找数据SELECT select_expr [,select_expr2…] 只查找某一个函数或表达式[FROM table_references 查询表名[WHERE where_conditon] 查询条件[GROUP BY {col_name|position} [ASC|DESC],…] 按某个字段进行分组，相同的只显示第一个[HAVING where_conditon] 分组时，给出显示条件[ORDER BY {col_name|expr|position} [ASC(升序，默认)|DESC(降序)],…] 排序[LIMIT {[offset,]row_count|row_count OFFSET offset}] 限制返回数量]示例：1234SELECT NOW(); --当前时间SELECT username AS uname, age FROM tb1; --从tb1中查找username(以uname别名显示)和ageSELECT age FROM tb1 GROUP BY age HAVING COUNT(salary)&gt;2; --以age分组，显示salary的个数多于2个的age分组SELECT * FROM tb1 ORDER BY age, salary DESC; --先以age升序排列，在以salary降序排列 其他命令1.显示当前服务版本号SELECT VERSION(); 2.显示当前用户SELECT USER(); 3.显示当前日期时间SELECT NOW(); 4.显示当前所在数据库SELECT DATABASE();]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[typeof和instanceof]]></title>
      <url>%2F2017%2F01%2F14%2Ftypeof%E5%92%8Cinstanceof%2F</url>
      <content type="text"><![CDATA[typeof和instanceof如果要对一个值进行分类，你就不得不区分JavaScript中的原始值和对象 typeof运算符能区分原始值和对象，并检测出原始值的类型 instanceof运算符可以检测一个对象是否是特定构造函数的一个实例 typeoftypeof运算符用法：1234typeof undefined; //'undefined'typeof 'abc'; //'string'typeof &#123;&#125;; //'object'typeof []; //'object' 返回一个字符串，会描述值的类型是什么 运算数 结果 undefined ‘undefined’ null ‘null’ 布尔值 ‘boolean’ 数字 ‘number’ 字符串 ‘string’ 函数 ‘function’ 所有其他常规属性 ‘object’ 注意：typeof null返回object是一个不能去修正的bug，因为这会破坏现有的代码。判断一个值是否是对象可以用下面这个函数： 12345function isObject(value)&#123; return (value !== null &amp;&amp; (typeof value === 'object' || typeof value === 'function'));&#125; instanceof判断value是由构造函数Constr还是子构造函数创建的，所以它是检测Constr.prototype是否在value的原型链上。因此，下两个表达式是等价的：value instanceof ConstrConstr.prototype.isPrototypeOf(value) instanceof运算符用法：123456789101112&#123;&#125; instanceof Object; //true[] instanceof Array; //true[] instanceof Object; //trueundefined instanceof Object; //falsenull instanceof Object; //falsenew Date() instanceof Date; //truenew Date() instanceof Object; //true'abc' instanceof String; //false123 instanceof Number; //false instanceof对原始值总是false如果instanceof的右边不是函数，则会抛出异常[] instanceof 123; //TypeError: Expecting a function in instanceof check 注意：几乎所有的对象都是Object的实例，因为Object.prototype在这些对象的原型链上。但也有个别对象不属于这种情况，如：12Object.create(null) instanceof Object; //falseObject.prototype instanceof Object; //false 是因为这些是没有原型的对象：12Object.getPrototypeOf(Object.create(null)); //nullObject.getPrototypeOf(Object.prototype); //null 但typeof可以正确的把这些归类为对象：12typeof Object.create(null); //'Object'typeof Object.prototype; //'Object']]></content>
    </entry>

    
    <entry>
      <title><![CDATA[原始值和对象]]></title>
      <url>%2F2017%2F01%2F13%2F%E5%8E%9F%E5%A7%8B%E5%80%BC%E5%92%8C%E5%AF%B9%E8%B1%A1%2F</url>
      <content type="text"><![CDATA[原始值和对象在阅读深入理解JavaScript中发现值可以分为两类：原始值和对象 原始值包括布尔值、数字、字符串、null和undefined 其他的值都是对象 两者之间最主要的区别在于它们的比较方式：每个对象都有唯一的标识且（严格的）等于自己：1234var obj1 = &#123;&#125;;var obj2 = &#123;&#125;;obj1 === obj2; //falseobj1 === obj1; //true 相反，所有原始值只要编码值相同，则被认为相等：123var prim1 = 123;var prim2 = 123;prim1 === prim2; //true 原始值原始值包括布尔值、数字、字符串、null和undefined原始值具有以下特点： 按值比较 123 === 3; //true'abc' === 'abc'; //true 不可改变其属性不能被改变、添加和删除 1234567var str = 'abc';str.length = 1;str.length; //3str.foo = 3;str.foo; //undefined//读取未知属性时，总会返回undefined 对象所有非原始值都是对象对象具有以下特点： 按引用进行比较比较身份标识：每个值都有各自的身份标识 12345&#123;&#125; === &#123;&#125;; //falsevar obj1 = &#123;&#125;;var obj2 = obj1;obj1 === obj2; //true 默认可变对象属性可以被改变、添加和删除 123var obj = &#123;&#125;;obj.foo = 123;obj.foo; //123]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>%2F2016%2F11%2F04%2FHello%20World%2F</url>
      <content type="text"><![CDATA[在2016年11月4日，我终于开通了博客，用来记录自己学习的点点滴滴和监督自己，会更新一些自己学习到的内容和总结。总之开始了我的博客之路。]]></content>
    </entry>

    
  
  
</search>
